{"posts":[{"title":"Project Fugu: A New Hope","date":"2020-06-11T06:00:00.000Z","tags":"pwa, mobile, web","slug":"project-fugu-a-new-hope","url":"/blog/project-fugu-a-new-hope","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2020/06/project-fugu-a-new-hope.md","markdown":"Capabilities. That's what The Web needs.\n\nThings like:\n\n1. Face or other biometric logins for websites\n2. USB connectivity\n3. TCP and UDP sockets clients / servers\n4. Serial connections\n5. Geofencing and background location tracking\n6. Screen lock / screen brightness\n7. Barcode scanning / generation\n8. Contacts API.\n9. etc., etc., etc.\n\nIf a native app can do it, the web should be able to do also!\n\n## Progress!\n\nAs it turns out the folks on the Chrome team feel the same.\n\nIn fact, there's an entire public spreadsheet with a really ambitious list of capabilities that have been identified as gaps between what the web can do and what native apps can do.\n\nThe web as an application platform, has an incredible future.\n\nSee it for yourself! [goo.gle/fugu-api-tracker](https://goo.gle/fugu-api-tracker)\n\n![project fugu tracker](/images/fugu-tracker.png)\n\n> > > This gives me a new hope for the future of The Web!\n\n## Meanwhile over on IE, ahem... I mean Safari\n\nThe following appears to be the general attitude I see from the Webkit folks even for adding something as benign as screen lock. Ricky is a WebKit engineer and @othermaciej who responds with a similar attitude is currently **head of WebKit Engineering**:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Looking forward to the battery life benefits this API will bring.</p>&mdash; othermaciej (@othermaciej) <a href=\"https://twitter.com/othermaciej/status/1171963641098162176?ref_src=twsrc%5Etfw\">September 12, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThat makes me sad.\n\n## Why does any of this matter?\n\nIn short, because software distribution is hard.\n\nEvery other means of distribution involves a variety of B.S. that is unique to each platform you want to distribute to. This involves, but it not limited to:\n\n1. Building/packaging\n2. Code signing\n3. App store approval seeking\n4. App store revenue sharing.\n5. Risk of being demoted in the lottery of app store picks and search engines.\n6. Dealing with obsolescence due to platforms moving forward without backward compatibility.\n7. Every time you want to do a material update, you have to repeat this same silly song and dance again... for each platform.\n\nAnd _most_ of these little steps and requirements are different for _every_ platform you want to distribute to.\n\nTake Windows, for example. If you want to provide a link to download an electron app installer from your site and you don't want to have to coach your users how to click through the Windows warnings when they try to run the installer you have to do code signing. Fine. Ok. No big deal, right?\n\nWell, I'm doing this right now so... you have to:\n\n1. Buy an Extended Validation cert for \\$349 (a year)\n2. Complete some really extensive information about your business.\n3. Submit/upload a bunch of documentation, _including_ a formal attestation letter from your CPA (who obviously won't do this for free)\n4. Then, once everything is submitted, they will _mail you a USB drive_ with the certificate on it.\n5. _Then_ you get to sign your software.\n\nDoable? Sure. Fun? Definitely not. Cost effective and sustainable? Not really.\n\n## So, why not just stick to the web!?\n\nThat's what I'm trying to do! But sometimes, you need to do something that the web does not yet allow. More frequently, this is becoming \"you need to do something that _Apple_ doesn't think the web should be able to do\" (or won't prioritize the work required to implement).\n\nThis happens both in my consulting work (currently with Walmart, previously at Starbucks), and in my [AnesthesiaCharting.com](https://anesthesiacharting.com/) business. We keep running into these limitations of what the browser can do.\n\nThe common answer is, well... so just build native apps for that, or use Electron.\n\n## Ok, let's look a little closer, maybe it's not actually so bad?\n\nIf you really \"go all in\" on native, you have to build at least _three_ different code bases instead of one.\n\nIf you're like my big clients, maybe that's worthwhile... _maybe_. But that doesn't mean it isn't a _a lot_ more work.\n\nSo, now you're probably thinking: \"**Just use React Native, or Flutter, or Electron or some other meta platform!**\"\n\nBut that still doesn't solve it, for several reasons. For example let's look at my business AnesthesiaCharting.com. We'd ideally want to support the following platforms:\n\n1. Windows Desktop\n2. Mac Desktop\n3. iPad/iOS\n4. Android Phones/Tablets\n5. Chromebooks\n\nSo, I guess React Native can now mostly support all these. Flutter has a \"alpha\" support for Mac OS but not Windows.\n\nAnd there's a giant gap in all these ideas: _none_ of the problems outlined previously about distributing on multiple platforms goes away.\n\nIf you _actually want to distribute and update software to all these platforms_ you still have to get approval everywhere, pay your developer fees, so you can sign your code, and set up a big complicated release process for pushing updates.\n\nI feel like most people that throw this answer out have not actually done this themselves. It seems they're frequently spouting off things that they've heard at conferences from what I can only call \"the marketing department\" for these various technologies.\n\n## What do all those platforms have in common?\n\nAll but _one_ of those 5 platforms I listed above _can run Chrome_! That means that I have a very capable web runtime available on all but _one_ of the platforms that my customers use.\n\nOh, in case you're wondering--iOS cannot run Chrome. Don't be fooled by the fact that you can install an app called \"Chrome\" from the Apple app store. It is _not_ actually Chrome, in fact, it's not even Safari. It's _less than Safari_. It's a WebKit web-view which, cannot even have things that Safari supports like ServiceWorker, let alone any of the other, more advanced APIs that expose the capabilities of the device.\n\n## So what specific capabilities do I need that Web doesn't yet provide?\n\nI've been finding myself working with serial ports recently. Yeah, that's right, good 'ol RS-232. A standard for device to device communication first published in **1960**!\n\nIt's dinosaur tech, but unlike the big lizards, this tech has stuck around. As it turns out, one of the most popular patient vitals monitors (you know the ones that show your heart rate, oxygen saturation, etc) is made by a company called Criticare. These things you can only talk to via, you guessed it: serial.\n\nBut it's not just for old tech, lots of robotics stuff and other simple controllers use serial connections.\n\nAs it turns out Google is working on a Web Serial API right now! It's in the Fugu tracker! In fact, it's already shipped as an [Origin Trial](https://developers.chrome.com/origintrials) that I'm in... and I'm **stoked**!\n\nAll I have to do is:\n\n```js\nconst port = await navigator.serial.requestPort();\nawait port.open({ baudrate: 38400 });\n```\n\nNow I can read and write to the connected device!\n\n## Why is that a big deal?\n\nWith those two lines above. I can distribute software via The Web that talks to these patient vitals monitors.\n\nAnd it works with _no additional work_ on 4 of the 5 platforms I'm trying to target!\n\nAll I have to do is tell customers to use a Chromium-based browser.\n\n## Pedantry\n\nYou can be as pedantic as you want about \"browser engine diversity\" you can say that \"Google has too much control of the web\", you can argue about all manner of pedantic things.\n\nBut at the end of the day, as a business trying to ship software to my customers, guess what I'm going to do?\n\nI'm going to tell my customers to use a Chromium-based browser if they need to talk to a Criticare monitor.\n\nI'll tell them to skip the fancy iPad Pro and buy a \\$300 chromebook to use as a _clinical tool in their operatories_.\n\nForget Apple. I'm going to tell all these doctors that Apple is selling them short and to buy a cheap chromebook or other device that can run a Chromium based browser.\n\nOh and hey, before you get too pedantic on me. This is a reminder that Microsoft is taking Chromium and using it to _compete with Chrome on user-facing features_! So is Brave and others.\n\n> > > This is The Web we want.\n\nA Web with all the capabilities we need, while keeping software distribution SIMPLE. Let the vendors compete on user-facing features, like password managers, privacy controls, etc. But, let's have the most capable open source browser engine available so we can get the capabilities we need to _ship software_.\n\nThis is why Project Fugu give me a new hope.\n\nThanks for reading! See ya on Twitter, I'm [@HenrikJoreteg](https://twitter.com/HenrikJoreteg) on there if you want to _kindly_ tell me all the ways I'm wrong :)","outputFile":"/blog/project-fugu-a-new-hope.html","html":"<p>Capabilities. That&#39;s what The Web needs.</p><p>Things like:</p><ol><li>Face or other biometric logins for websites</li><li>USB connectivity</li><li>TCP and UDP sockets clients / servers</li><li>Serial connections</li><li>Geofencing and background location tracking</li><li>Screen lock / screen brightness</li><li>Barcode scanning / generation</li><li>Contacts API.</li><li>etc., etc., etc.</li></ol><p>If a native app can do it, the web should be able to do also!</p><a name=progress class=anchor href=#progress><h2><span class=header-link></span>Progress!</h2></a><p>As it turns out the folks on the Chrome team feel the same.</p><p>In fact, there&#39;s an entire public spreadsheet with a really ambitious list of capabilities that have been identified as gaps between what the web can do and what native apps can do.</p><p>The web as an application platform, has an incredible future.</p><p>See it for yourself! <a href=https://goo.gle/fugu-api-tracker>goo.gle/fugu-api-tracker</a></p><p><img src=/images/fugu-tracker.png alt=\"project fugu tracker\"></p><blockquote><blockquote><blockquote><p>This gives me a new hope for the future of The Web!</p></blockquote></blockquote></blockquote><a name=meanwhile-over-on-ie-ahem-i-mean-safari class=anchor href=#meanwhile-over-on-ie-ahem-i-mean-safari><h2><span class=header-link></span>Meanwhile over on IE, ahem... I mean Safari</h2></a><p>The following appears to be the general attitude I see from the Webkit folks even for adding something as benign as screen lock. Ricky is a WebKit engineer and @othermaciej who responds with a similar attitude is currently <strong>head of WebKit Engineering</strong>:</p><p><blockquote class=twitter-tweet><p lang=en dir=ltr>Looking forward to the battery life benefits this API will bring.</p>&mdash; othermaciej (@othermaciej) <a href=\"https://twitter.com/othermaciej/status/1171963641098162176?ref_src=twsrc%5Etfw\">September 12, 2019</a></blockquote><script async src=https://platform.twitter.com/widgets.js charset=utf-8></script></p><p>That makes me sad.</p><a name=why-does-any-of-this-matter class=anchor href=#why-does-any-of-this-matter><h2><span class=header-link></span>Why does any of this matter?</h2></a><p>In short, because software distribution is hard.</p><p>Every other means of distribution involves a variety of B.S. that is unique to each platform you want to distribute to. This involves, but it not limited to:</p><ol><li>Building/packaging</li><li>Code signing</li><li>App store approval seeking</li><li>App store revenue sharing.</li><li>Risk of being demoted in the lottery of app store picks and search engines.</li><li>Dealing with obsolescence due to platforms moving forward without backward compatibility.</li><li>Every time you want to do a material update, you have to repeat this same silly song and dance again... for each platform.</li></ol><p>And <em>most</em> of these little steps and requirements are different for <em>every</em> platform you want to distribute to.</p><p>Take Windows, for example. If you want to provide a link to download an electron app installer from your site and you don&#39;t want to have to coach your users how to click through the Windows warnings when they try to run the installer you have to do code signing. Fine. Ok. No big deal, right?</p><p>Well, I&#39;m doing this right now so... you have to:</p><ol><li>Buy an Extended Validation cert for \\$349 (a year)</li><li>Complete some really extensive information about your business.</li><li>Submit/upload a bunch of documentation, <em>including</em> a formal attestation letter from your CPA (who obviously won&#39;t do this for free)</li><li>Then, once everything is submitted, they will <em>mail you a USB drive</em> with the certificate on it.</li><li><em>Then</em> you get to sign your software.</li></ol><p>Doable? Sure. Fun? Definitely not. Cost effective and sustainable? Not really.</p><a name=so-why-not-just-stick-to-the-web class=anchor href=#so-why-not-just-stick-to-the-web><h2><span class=header-link></span>So, why not just stick to the web!?</h2></a><p>That&#39;s what I&#39;m trying to do! But sometimes, you need to do something that the web does not yet allow. More frequently, this is becoming &quot;you need to do something that <em>Apple</em> doesn&#39;t think the web should be able to do&quot; (or won&#39;t prioritize the work required to implement).</p><p>This happens both in my consulting work (currently with Walmart, previously at Starbucks), and in my <a href=\"https://anesthesiacharting.com/\">AnesthesiaCharting.com</a> business. We keep running into these limitations of what the browser can do.</p><p>The common answer is, well... so just build native apps for that, or use Electron.</p><a name=ok-let39s-look-a-little-closer-maybe-it39s-not-actually-so-bad class=anchor href=#ok-let39s-look-a-little-closer-maybe-it39s-not-actually-so-bad><h2><span class=header-link></span>Ok, let&#39;s look a little closer, maybe it&#39;s not actually so bad?</h2></a><p>If you really &quot;go all in&quot; on native, you have to build at least <em>three</em> different code bases instead of one.</p><p>If you&#39;re like my big clients, maybe that&#39;s worthwhile... <em>maybe</em>. But that doesn&#39;t mean it isn&#39;t a <em>a lot</em> more work.</p><p>So, now you&#39;re probably thinking: &quot;<strong>Just use React Native, or Flutter, or Electron or some other meta platform!</strong>&quot;</p><p>But that still doesn&#39;t solve it, for several reasons. For example let&#39;s look at my business AnesthesiaCharting.com. We&#39;d ideally want to support the following platforms:</p><ol><li>Windows Desktop</li><li>Mac Desktop</li><li>iPad/iOS</li><li>Android Phones/Tablets</li><li>Chromebooks</li></ol><p>So, I guess React Native can now mostly support all these. Flutter has a &quot;alpha&quot; support for Mac OS but not Windows.</p><p>And there&#39;s a giant gap in all these ideas: <em>none</em> of the problems outlined previously about distributing on multiple platforms goes away.</p><p>If you <em>actually want to distribute and update software to all these platforms</em> you still have to get approval everywhere, pay your developer fees, so you can sign your code, and set up a big complicated release process for pushing updates.</p><p>I feel like most people that throw this answer out have not actually done this themselves. It seems they&#39;re frequently spouting off things that they&#39;ve heard at conferences from what I can only call &quot;the marketing department&quot; for these various technologies.</p><a name=what-do-all-those-platforms-have-in-common class=anchor href=#what-do-all-those-platforms-have-in-common><h2><span class=header-link></span>What do all those platforms have in common?</h2></a><p>All but <em>one</em> of those 5 platforms I listed above <em>can run Chrome</em>! That means that I have a very capable web runtime available on all but <em>one</em> of the platforms that my customers use.</p><p>Oh, in case you&#39;re wondering--iOS cannot run Chrome. Don&#39;t be fooled by the fact that you can install an app called &quot;Chrome&quot; from the Apple app store. It is <em>not</em> actually Chrome, in fact, it&#39;s not even Safari. It&#39;s <em>less than Safari</em>. It&#39;s a WebKit web-view which, cannot even have things that Safari supports like ServiceWorker, let alone any of the other, more advanced APIs that expose the capabilities of the device.</p><a name=so-what-specific-capabilities-do-i-need-that-web-doesn39t-yet-provide class=anchor href=#so-what-specific-capabilities-do-i-need-that-web-doesn39t-yet-provide><h2><span class=header-link></span>So what specific capabilities do I need that Web doesn&#39;t yet provide?</h2></a><p>I&#39;ve been finding myself working with serial ports recently. Yeah, that&#39;s right, good &#39;ol RS-232. A standard for device to device communication first published in <strong>1960</strong>!</p><p>It&#39;s dinosaur tech, but unlike the big lizards, this tech has stuck around. As it turns out, one of the most popular patient vitals monitors (you know the ones that show your heart rate, oxygen saturation, etc) is made by a company called Criticare. These things you can only talk to via, you guessed it: serial.</p><p>But it&#39;s not just for old tech, lots of robotics stuff and other simple controllers use serial connections.</p><p>As it turns out Google is working on a Web Serial API right now! It&#39;s in the Fugu tracker! In fact, it&#39;s already shipped as an <a href=https://developers.chrome.com/origintrials>Origin Trial</a> that I&#39;m in... and I&#39;m <strong>stoked</strong>!</p><p>All I have to do is:</p><pre><code class=undefinedjs>const port = await navigator.serial.requestPort();\nawait port.open({ baudrate: 38400 });\n</code></pre><p>Now I can read and write to the connected device!</p><a name=why-is-that-a-big-deal class=anchor href=#why-is-that-a-big-deal><h2><span class=header-link></span>Why is that a big deal?</h2></a><p>With those two lines above. I can distribute software via The Web that talks to these patient vitals monitors.</p><p>And it works with <em>no additional work</em> on 4 of the 5 platforms I&#39;m trying to target!</p><p>All I have to do is tell customers to use a Chromium-based browser.</p><a name=pedantry class=anchor href=#pedantry><h2><span class=header-link></span>Pedantry</h2></a><p>You can be as pedantic as you want about &quot;browser engine diversity&quot; you can say that &quot;Google has too much control of the web&quot;, you can argue about all manner of pedantic things.</p><p>But at the end of the day, as a business trying to ship software to my customers, guess what I&#39;m going to do?</p><p>I&#39;m going to tell my customers to use a Chromium-based browser if they need to talk to a Criticare monitor.</p><p>I&#39;ll tell them to skip the fancy iPad Pro and buy a \\$300 chromebook to use as a <em>clinical tool in their operatories</em>.</p><p>Forget Apple. I&#39;m going to tell all these doctors that Apple is selling them short and to buy a cheap chromebook or other device that can run a Chromium based browser.</p><p>Oh and hey, before you get too pedantic on me. This is a reminder that Microsoft is taking Chromium and using it to <em>compete with Chrome on user-facing features</em>! So is Brave and others.</p><blockquote><blockquote><blockquote><p>This is The Web we want.</p></blockquote></blockquote></blockquote><p>A Web with all the capabilities we need, while keeping software distribution SIMPLE. Let the vendors compete on user-facing features, like password managers, privacy controls, etc. But, let&#39;s have the most capable open source browser engine available so we can get the capabilities we need to <em>ship software</em>.</p><p>This is why Project Fugu give me a new hope.</p><p>Thanks for reading! See ya on Twitter, I&#39;m <a href=https://twitter.com/HenrikJoreteg>@HenrikJoreteg</a> on there if you want to <em>kindly</em> tell me all the ways I&#39;m wrong :)</p>","preview":"<p>Capabilities. That&#39;s what The Web needs.</p><p>Things like:</p><ol><li>Face or other biometric logins for websites</li><li>USB connectivity</li><li>TCP and UDP sockets clients / servers</li><li>Serial connections</li><li>Geofencing and background location tracking</li><li>Screen lock / screen brightness</li><li>Barcode scanning / generation</li><li>Contacts API.</li><li>etc., etc., etc.</li></ol>"},{"title":"Improving Redux state transfer performance with JSON.parse(), a quick case study","date":"2019-06-26T20:00:00.000Z","tags":"architecture, pwa, state, redux","slug":"improving-redux-state-transfer-performance","url":"/blog/improving-redux-state-transfer-performance","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2019/06/redux-state-transfer.md","markdown":"**TLDR:** Turning Redux state into a JavaScript string you can parse with _JSON.parse()_ instead of an object literal, or inert script tag, appears to be _significantly_ faster than other approaches for sending Redux store state to the browser.\n\nFor my case making this one change shaved TTI (Time To Interactive) from an already pretty good _4.04s_ to _3.3s_, a _.74s_ or _~18%_ improvement. It increased the Lighthouse performance score an average of _8_ points from _87.2_ to _95.2_!\n\nThese results were unexpected, when I shared them on Twitter both [Addy Osmani](https://twitter.com/addyosmani) and [Mathias Bynens](https://twitter.com/mathias) asked me write it up... so here we are.\n\n## Introduction\n\nWhen doing Server-side Rendering (a.k.a SSR) it is common practice to render HTML and \"[rehydrate](https://developers.google.com/web/updates/2019/02/rendering-on-the-web#rehydration)\" it in the browser using Preact or React.\n\nOften times, this also requires you transfer the current application state to the browser, somehow. That way, when your application spins up in the browser, it can rehydrate with all the state it had on the server.\n\nMost of my experience with doing this as a consultant is with [Redux](https://redux.js.org/). And, in my experience these Redux state dumps can easily get _way too big_... but I digress.\n\nThe best strategy is always to _minimize their size to begin with_. But, there are certain cases where that is difficult to do beyond a certain point, and plenty of other cases where things have already gotten out of hand and you're just trying to make thing better.\n\nThere are three predominant mechanisms (that I'm aware of) for doing this \"state transfer.\"\n\nThey are:\n\n## Option #1: Turn your state in to a JS object literal\n\nThis means that on the server-side you do something like _JSON.stringify(store.getState())_ and you end up with HTML that includes a script tag like this.\n\n```html\n<script>\n  window.__REDUX__ = { some: \"value\", someOther: \"value and so on\" };\n</script>\n```\n\nFor this approach to work you also have to be careful about not including anything in your JSON that would make the browser think the script tag was terminating. So some extra escaping may be in order ([learn more here](https://mathiasbynens.be/notes/etago)). Additionally, using the result of _JSON.stringify()_ directly in JS source code was a potential security issue until recently, since JSON strings could contain certain characters that were invalid in JS strings. More recently, this has been addressed with a [spec-level proposal that made it into ES2019](https://github.com/tc39/proposal-json-superset).\n\nBut, as you'll see you probably won't want to use this approach anyway since it's the slowest option.\n\nWhen this executes in the browser what was JSON on the server-side is treated and parsed by the browser as a JS object literal. No different than if you have written code like this, without the quoted key names:\n\n```html\n<script>\n  window.__REDUX__ = { some: \"value\", someOther: \"value and so on\" };\n</script>\n```\n\nBut, it just has a few extra double quotes.\n\nThe important point in this case is that the data itself is parsed _as if it were JavaScript_.\n\n## Option #2: Turn your state into an \"inert\" script\n\nBrowsers only will parse the contents of a _&lt;script&gt;_ tag if its type is _\"module\"_, _\"text/javascript\"_, or another [recognized JS MIME type](https://mimesniff.spec.whatwg.org/#javascript-mime-type), or well... it doesn't have a _type_ specified at all. So the point is _anything else you specify as a type_ means its contents will be ignored.\n\nPeople use this for all manner of trickery, but it can also be used to transfer Redux state with a bit less escaping, but again, you still need to escape for stuff like _&lt;/script_ to protect against XSS issues.\n\nSome people like to to give it a valid MIME type to make themselves feel better but... browser don't care.\n\nFor example:\n\n```html\n<script id=\"myState\" type=\"application/json\">\n  {\"your\": \"state\", \"goes\": \"here\"}\n</script>\n```\n\nThen you can later parse it by grabbing the element out of the DOM and parsing its contents in some other script like so:\n\n```js\nwindow.__REDUX__ = JSON.parse(\n  querySelector(\"myState\").innerHTML\n);\n```\n\nUnlike approach #1, in this case, the browser _never interprets the data as JavaScript_ it merely parses a string as JSON, which is a much stricter data type, which as it turns out, is much faster.\n\n_However_, this approach means that the browser first has to create a DOM element with a lot of text in it and _then_ you have to read that text from the DOM. This, as it turns out, is not without performance overhead of its own (results below).\n\n## Option #3: Turn your state into JS String containing escaped JSON.\n\nWhat you do end up with in your HTML is this:\n\n```html\n<script>\n  window.__REDUX__ = JSON.parse(\"{\\\"some\\\":\\\"state\\\",\\\"other\\\":\\\"value\\\"}\");\n</script>\n```\n\nAs it turns out, this is _way_ faster than the other options.\n\nIt may look a bit funny, but you still end up with a JS object. _However_, the key difference is that the contents of the data you're sending is _never interpreted as if it were code_. It's just a long JavaScript string literal, as far as the JavaScript parser is concerned. But, at runtime, it's _parsed as JSON_ and becomes a JS object instance just like all the other approaches.\n\n**A quick note on how I generated the JSON string:** It turns out, it's not so easy to do this correctly, especially if you're including data from an API that you may not have full control over. Avoiding XSS is important here.\n\nAnyway, again [thanks to Mathias](https://twitter.com/mathias/status/1143784574159347712), I ended up doing the following in node.js on the server-side to generate that string in a way that's safe to assume can be treated like a JavaScript string. I'm using his excellent: [jsesc library](https://github.com/mathiasbynens/jsesc) as well as his advice to do roughly something like this:\n\n```js\nconst jsesc = require(\"jsesc\");\n\n// assume `data` here is the data we want to transfer\nmodule.exports = data => {\n  const jsonString = jsesc(JSON.stringify(data), {\n    json: true,\n    isScriptContext: true\n  });\n\n  return `\n  <!DOCTYPE html>\n  <html>\n    <head>\n      ... stuff here\n    </head>\n    <body>\n      <div id='js-app'>${allTheAppHTML}</div>\n      <script>window.__REDUX_STATE__ = JSON.parse(${jsonString})</script>\n      <script src='/my-app.js'></script>\n    </body>\n  </html>\n  `;\n};\n```\n\n## I'm a stooge, all the credit goes to other people here\n\nThe inimitable [Addy Osmani](https://twitter.com/addyosmani) wrote an awesome post for the V8 project's blog about [The Cost of JavaScript in 2019](https://v8.dev/blog/cost-of-javascript-2019).\n\nAnd I happened to see, the equally inimitable, [Mathias Bynens tweet](https://twitter.com/mathias/status/1143551692732030979) where he screencapped part of it about the cost of parsing JSON and suggested the JSON string approach (and later helped review this post).\n\nI'm currently working on a Preact PWA project for a big client where we're doing SSR with a redux state transfer of an object bigger than I'd like it to be, so... i figured what the heck, let's try it.\n\nWhat I found blew me away.\n\n## The test setup\n\n- Browser: Chrome Stable _75.0.3770.100_\n- Audit Mechanism: Lighthouse Perf Audit, incognito mode, _Simulated Fast 3G, 4x CPU Slowdown_ setting, with no caching.\n- Number of tests: 5 runs of each approach\n- Size of Redux state in bytes: _163,980_ with escape slashes: _176,017_ added _7%_\n\nThe size of the state object here is significant. It's much bigger than I'd like it to be but it comes from an API that I have little control over so anyway...\n\n## The results\n\nApproach #1: JS Object Literal\n\n```\nPerf Score   TTI\n83           4.0s\n87           4.1s\n89           4.1s\n88           4.1s\n89           3.9s\n\nAvg:\n87.2         4.04s\n```\n\nApproach #2: Inert Script Tag\n\n```\nPerf Score   TTI\n90           4.0s\n90           4.0s\n92           4.1s\n92           4.0s\n90           4.0s\n\nAvg:\n90.8         4.02s\n```\n\nApproach #3: Escaped JSON String inside Script Tag\n\n```\nPerf Score   TTI\n95           3.3s\n95           3.2s\n96           3.3s\n96           3.4s\n94           3.3s\n\nAvg:\n95.2         3.3s\n```\n\n## Summary\n\n```\n             Avg Perf Score   Avg. TTI\nApproach #1: 87.2             4.04s\nApproach #2: 90.8             4.02s\nApproach #3: 95.2             3.3s\n```\n\nConclusion: JSON String inside a real _&lt;script&gt;_ tag wins by a shocking margin. An _18%_ TTI improvement on an already pretty fast app is incredible for such a simple change.\n\nYour mileage may vary, but if you're doing a state transfer like this I'd encourage you to try it for yourself.\n\nPlease tell me what you learn, I'm [@HenrikJoreteg](https://twitter.com/henrikjoreteg) on Twitter. Please, let me know what you find.\n\nSome of my open questions that I don't really have time to dig into right this minute:\n\n1. As Mathias pointed out to me in DM [Chrome 76 includes even faster JSON.parse](https://v8.dev/blog/v8-release-76#json.parse-improvements), how will this perform in Chrome 76+? Could this be even better?!?!\n2. Would _.innerHTML_ versus _.textContent_ make any difference in approach #2?\n3. How does this change impact performance in other browsers?\n\nI'd love to hear your thoughts, but I wanted to share this while it was all still fresh in my mind. Hope this helps someone, thanks for reading!","outputFile":"/blog/improving-redux-state-transfer-performance.html","html":"<p><strong>TLDR:</strong> Turning Redux state into a JavaScript string you can parse with <em>JSON.parse()</em> instead of an object literal, or inert script tag, appears to be <em>significantly</em> faster than other approaches for sending Redux store state to the browser.</p><p>For my case making this one change shaved TTI (Time To Interactive) from an already pretty good <em>4.04s</em> to <em>3.3s</em>, a <em>.74s</em> or <em>~18%</em> improvement. It increased the Lighthouse performance score an average of _8_ points from <em>87.2</em> to <em>95.2</em>!</p><p>These results were unexpected, when I shared them on Twitter both <a href=https://twitter.com/addyosmani>Addy Osmani</a> and <a href=https://twitter.com/mathias>Mathias Bynens</a> asked me write it up... so here we are.</p><a name=introduction class=anchor href=#introduction><h2><span class=header-link></span>Introduction</h2></a><p>When doing Server-side Rendering (a.k.a SSR) it is common practice to render HTML and &quot;<a href=https://developers.google.com/web/updates/2019/02/rendering-on-the-web#rehydration>rehydrate</a>&quot; it in the browser using Preact or React.</p><p>Often times, this also requires you transfer the current application state to the browser, somehow. That way, when your application spins up in the browser, it can rehydrate with all the state it had on the server.</p><p>Most of my experience with doing this as a consultant is with <a href=\"https://redux.js.org/\">Redux</a>. And, in my experience these Redux state dumps can easily get <em>way too big</em>... but I digress.</p><p>The best strategy is always to <em>minimize their size to begin with</em>. But, there are certain cases where that is difficult to do beyond a certain point, and plenty of other cases where things have already gotten out of hand and you&#39;re just trying to make thing better.</p><p>There are three predominant mechanisms (that I&#39;m aware of) for doing this &quot;state transfer.&quot;</p><p>They are:</p><a name=option-1-turn-your-state-in-to-a-js-object-literal class=anchor href=#option-1-turn-your-state-in-to-a-js-object-literal><h2><span class=header-link></span>Option #1: Turn your state in to a JS object literal</h2></a><p>This means that on the server-side you do something like <em>JSON.stringify(store.getState())</em> and you end up with HTML that includes a script tag like this.</p><pre><code class=undefinedhtml>&lt;script&gt;\n  window.__REDUX__ = { some: &quot;value&quot;, someOther: &quot;value and so on&quot; };\n&lt;/script&gt;\n</code></pre><p>For this approach to work you also have to be careful about not including anything in your JSON that would make the browser think the script tag was terminating. So some extra escaping may be in order (<a href=https://mathiasbynens.be/notes/etago>learn more here</a>). Additionally, using the result of <em>JSON.stringify()</em> directly in JS source code was a potential security issue until recently, since JSON strings could contain certain characters that were invalid in JS strings. More recently, this has been addressed with a <a href=https://github.com/tc39/proposal-json-superset>spec-level proposal that made it into ES2019</a>.</p><p>But, as you&#39;ll see you probably won&#39;t want to use this approach anyway since it&#39;s the slowest option.</p><p>When this executes in the browser what was JSON on the server-side is treated and parsed by the browser as a JS object literal. No different than if you have written code like this, without the quoted key names:</p><pre><code class=undefinedhtml>&lt;script&gt;\n  window.__REDUX__ = { some: &quot;value&quot;, someOther: &quot;value and so on&quot; };\n&lt;/script&gt;\n</code></pre><p>But, it just has a few extra double quotes.</p><p>The important point in this case is that the data itself is parsed <em>as if it were JavaScript</em>.</p><a name=option-2-turn-your-state-into-an-quotinertquot-script class=anchor href=#option-2-turn-your-state-into-an-quotinertquot-script><h2><span class=header-link></span>Option #2: Turn your state into an &quot;inert&quot; script</h2></a><p>Browsers only will parse the contents of a <em>&lt;script&gt;</em> tag if its type is <em>&quot;module&quot;</em>, <em>&quot;text/javascript&quot;</em>, or another <a href=https://mimesniff.spec.whatwg.org/#javascript-mime-type>recognized JS MIME type</a>, or well... it doesn&#39;t have a <em>type</em> specified at all. So the point is <em>anything else you specify as a type</em> means its contents will be ignored.</p><p>People use this for all manner of trickery, but it can also be used to transfer Redux state with a bit less escaping, but again, you still need to escape for stuff like <em>&lt;/script</em> to protect against XSS issues.</p><p>Some people like to to give it a valid MIME type to make themselves feel better but... browser don&#39;t care.</p><p>For example:</p><pre><code class=undefinedhtml>&lt;script id=&quot;myState&quot; type=&quot;application/json&quot;&gt;\n  {&quot;your&quot;: &quot;state&quot;, &quot;goes&quot;: &quot;here&quot;}\n&lt;/script&gt;\n</code></pre><p>Then you can later parse it by grabbing the element out of the DOM and parsing its contents in some other script like so:</p><pre><code class=undefinedjs>window.__REDUX__ = JSON.parse(\n  querySelector(&quot;myState&quot;).innerHTML\n);\n</code></pre><p>Unlike approach #1, in this case, the browser <em>never interprets the data as JavaScript</em> it merely parses a string as JSON, which is a much stricter data type, which as it turns out, is much faster.</p><p><em>However</em>, this approach means that the browser first has to create a DOM element with a lot of text in it and <em>then</em> you have to read that text from the DOM. This, as it turns out, is not without performance overhead of its own (results below).</p><a name=option-3-turn-your-state-into-js-string-containing-escaped-json class=anchor href=#option-3-turn-your-state-into-js-string-containing-escaped-json><h2><span class=header-link></span>Option #3: Turn your state into JS String containing escaped JSON.</h2></a><p>What you do end up with in your HTML is this:</p><pre><code class=undefinedhtml>&lt;script&gt;\n  window.__REDUX__ = JSON.parse(&quot;{\\&quot;some\\&quot;:\\&quot;state\\&quot;,\\&quot;other\\&quot;:\\&quot;value\\&quot;}&quot;);\n&lt;/script&gt;\n</code></pre><p>As it turns out, this is <em>way</em> faster than the other options.</p><p>It may look a bit funny, but you still end up with a JS object. <em>However</em>, the key difference is that the contents of the data you&#39;re sending is <em>never interpreted as if it were code</em>. It&#39;s just a long JavaScript string literal, as far as the JavaScript parser is concerned. But, at runtime, it&#39;s <em>parsed as JSON</em> and becomes a JS object instance just like all the other approaches.</p><p><strong>A quick note on how I generated the JSON string:</strong> It turns out, it&#39;s not so easy to do this correctly, especially if you&#39;re including data from an API that you may not have full control over. Avoiding XSS is important here.</p><p>Anyway, again <a href=https://twitter.com/mathias/status/1143784574159347712>thanks to Mathias</a>, I ended up doing the following in node.js on the server-side to generate that string in a way that&#39;s safe to assume can be treated like a JavaScript string. I&#39;m using his excellent: <a href=https://github.com/mathiasbynens/jsesc>jsesc library</a> as well as his advice to do roughly something like this:</p><pre><code class=undefinedjs>const jsesc = require(&quot;jsesc&quot;);\n\n// assume `data` here is the data we want to transfer\nmodule.exports = data =&gt; {\n  const jsonString = jsesc(JSON.stringify(data), {\n    json: true,\n    isScriptContext: true\n  });\n\n  return `\n  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      ... stuff here\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;div id=&#39;js-app&#39;&gt;${allTheAppHTML}&lt;/div&gt;\n      &lt;script&gt;window.__REDUX_STATE__ = JSON.parse(${jsonString})&lt;/script&gt;\n      &lt;script src=&#39;/my-app.js&#39;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n  `;\n};\n</code></pre><a name=i39m-a-stooge-all-the-credit-goes-to-other-people-here class=anchor href=#i39m-a-stooge-all-the-credit-goes-to-other-people-here><h2><span class=header-link></span>I&#39;m a stooge, all the credit goes to other people here</h2></a><p>The inimitable <a href=https://twitter.com/addyosmani>Addy Osmani</a> wrote an awesome post for the V8 project&#39;s blog about <a href=https://v8.dev/blog/cost-of-javascript-2019>The Cost of JavaScript in 2019</a>.</p><p>And I happened to see, the equally inimitable, <a href=https://twitter.com/mathias/status/1143551692732030979>Mathias Bynens tweet</a> where he screencapped part of it about the cost of parsing JSON and suggested the JSON string approach (and later helped review this post).</p><p>I&#39;m currently working on a Preact PWA project for a big client where we&#39;re doing SSR with a redux state transfer of an object bigger than I&#39;d like it to be, so... i figured what the heck, let&#39;s try it.</p><p>What I found blew me away.</p><a name=the-test-setup class=anchor href=#the-test-setup><h2><span class=header-link></span>The test setup</h2></a><ul><li>Browser: Chrome Stable <em>75.0.3770.100</em></li><li>Audit Mechanism: Lighthouse Perf Audit, incognito mode, <em>Simulated Fast 3G, 4x CPU Slowdown</em> setting, with no caching.</li><li>Number of tests: 5 runs of each approach</li><li>Size of Redux state in bytes: <em>163,980</em> with escape slashes: <em>176,017</em> added _7%_</li></ul><p>The size of the state object here is significant. It&#39;s much bigger than I&#39;d like it to be but it comes from an API that I have little control over so anyway...</p><a name=the-results class=anchor href=#the-results><h2><span class=header-link></span>The results</h2></a><p>Approach #1: JS Object Literal</p><pre><code>Perf Score   TTI\n83           4.0s\n87           4.1s\n89           4.1s\n88           4.1s\n89           3.9s\n\nAvg:\n87.2         4.04s\n</code></pre><p>Approach #2: Inert Script Tag</p><pre><code>Perf Score   TTI\n90           4.0s\n90           4.0s\n92           4.1s\n92           4.0s\n90           4.0s\n\nAvg:\n90.8         4.02s\n</code></pre><p>Approach #3: Escaped JSON String inside Script Tag</p><pre><code>Perf Score   TTI\n95           3.3s\n95           3.2s\n96           3.3s\n96           3.4s\n94           3.3s\n\nAvg:\n95.2         3.3s\n</code></pre><a name=summary class=anchor href=#summary><h2><span class=header-link></span>Summary</h2></a><pre><code>             Avg Perf Score   Avg. TTI\nApproach #1: 87.2             4.04s\nApproach #2: 90.8             4.02s\nApproach #3: 95.2             3.3s\n</code></pre><p>Conclusion: JSON String inside a real <em>&lt;script&gt;</em> tag wins by a shocking margin. An <em>18%</em> TTI improvement on an already pretty fast app is incredible for such a simple change.</p><p>Your mileage may vary, but if you&#39;re doing a state transfer like this I&#39;d encourage you to try it for yourself.</p><p>Please tell me what you learn, I&#39;m <a href=https://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on Twitter. Please, let me know what you find.</p><p>Some of my open questions that I don&#39;t really have time to dig into right this minute:</p><ol><li>As Mathias pointed out to me in DM <a href=https://v8.dev/blog/v8-release-76#json.parse-improvements>Chrome 76 includes even faster JSON.parse</a>, how will this perform in Chrome 76+? Could this be even better?!?!</li><li>Would <em>.innerHTML</em> versus <em>.textContent</em> make any difference in approach #2?</li><li>How does this change impact performance in other browsers?</li></ol><p>I&#39;d love to hear your thoughts, but I wanted to share this while it was all still fresh in my mind. Hope this helps someone, thanks for reading!</p>","preview":"<p><strong>TLDR:</strong> Turning Redux state into a JavaScript string you can parse with <em>JSON.parse()</em> instead of an object literal, or inert script tag, appears to be <em>significantly</em> faster than other approaches for sending Redux store state to the browser.</p><p>For my case making this one change shaved TTI (Time To Interactive) from an already pretty good <em>4.04s</em> to <em>3.3s</em>, a <em>.74s</em> or <em>~18%</em> improvement. It increased the Lighthouse performance score an average of _8_ points from <em>87.2</em> to <em>95.2</em>!</p>"},{"title":"Architecting UIs for Change","date":"2019-03-22T20:00:00.000Z","tags":"architecture, pwa, state, redux","slug":"architecting-uis-for-change","url":"/blog/architecting-uis-for-change","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2019/03/architecting-uis-for-change.md","markdown":"**Techniques for keeping your app code under control even when requirements shift dramatically.**\n\nI've had this pinned on my twitter for just about as long as \"tweet pinning\" has been a thing:\n\n> > If you don't actively fight for simplicity in software, complexity will win... and it will suck.\n\nIt's a nice, pithy little quip, perhaps... but how do you actually accomplish this?\n\nThe way I see it, broadly speaking, you have three options:\n\n1. **Push back on any complex requirements.** Just avoid the complex problems altogether by only building relatively simple things.\n2. **Minimize entropy** by trying to isolate areas of your app into distinct concerns and do whatever you can to hold those lines.\n3. **Develop coping mechanisms** for the inherent complexity we're bound to face and learn to manage it.\n\n**Option #1** is untenable and frankly—boring. Yet, there are a surprising number of folks who seem to believe the web should still just be a set of linked static documents of content. But, some of us like to build more interesting things on the web that are truly app experiences. Not just documents, but document _editors_. Oh, and things like video editing suites, graphic design tools, [interactive sheet music for learning how to play guitar](https://www.soundslice.com/) and tools for [tracking and monitoring patients during surgery](https://app.anesthesiacharting.com).\n\n**Option #2** is well-intentioned and seems reasonable on the surface. I've heard this desire expressed from management from the last two big corporate PWAs I've worked on. There's a logical desire to have distinct teams that are able to develop, build, and deploy in isolation from one another. To be clear, I'm all for separation of concerns. But the entire presentation layer of a nice cohesive \"app\" experience is, in fact, a shared concern and not something that can be divided so simply (more on this later).\n\n**Options #3** As you probably guessed, this is my preference and will the subject of this post. But, before we can develop coping mechanisms, we have to study the problem. Perhaps we can discern something about the source of complexity.\n\n## Identifying the source of complexity\n\nIf you're a developer, I bet you're a little bit like me, you have an internal barometer that can sense how in-control the codebase is at any one time. I feel a sense of dread as we start to pile on features if I'm feeling that the current patterns are not able to sustain the addition of more features without causing serious deterioration of the overall quality of the code. On the flip-side, I also feel a huge sense of relief when I refactor something that was starting to slip into disorder and then manage to create the right abstraction that lets us reign it in. Doing this can be downright euphoric.\n\nBut is there anything we can pinpoint about the source of the \"slippage\" to begin with? I think so.\n\nI've seen this in so many apps now, that I feel confident that it's a common source of many of these issues. For context, I've built a wide range of what might be considered \"ambitious\" web apps. Real-time asset geo-location tracking systems, chat apps, video calling apps, the Starbucks PWA, apps that enable you to make and receive real phone calls in a browser, surgery tracking apps, and recently I've been working on an e-commerce PWA for one of the world's largest retailers. These observations seem to hold true regardless of app or team size.\n\nEarly development tends to go something like this:\n\n1. Initial requirements are identified and a small team builds a tidy, small, simple prototype with no real tech debt based on their understanding of initial requirements.\n\n2. Stakeholders and early users start using the prototype and quickly realize there were several scenarios that were not accounted for. In addition, they also start to generate a whole bunch of \"wouldn't it be awesome if we could\" feature suggestions.\n\n3. Code tidiness (and often performance) goes to hell as developers scramble to connect previously cleanly isolated areas of the app in the attempt to build those \"wouldn't it be awesome if we could\" features. These type of features frequently involve connecting previous isolated logic because you realize there is value to be gained by doing so (example below).\n\nLater, when the app is launched to real users, steps 2 and 3 repeat, over and over. Or more precisely, they repeat until the developers working on it so dread their work that they either walk away, stop caring, or stop being able to actually deliver them in a timely manner.\n\n2-5 years after the initial build someone comes along as says: \"this is all garbage, we need to re-write it.\"\n\nAnd... the whole cycle starts again.\n\nTo some degree, this is inevitable, and not all bad because sometimes you just need a fresh start. But, perhaps if we did things a little differently we could at minimum _extend_ this cycle a bit. So, if we look at the above sequence there is a precise moment where things seem to go off the rails.\n\n> > It happens at the point where the original assumptions are challenged.\n\nCan we perhaps define the point more clearly? I think so. As I hinted at above, more often than not, the precise point where \"loss of control\" over the app begins is when someone realizes the potential benefit of connecting logic from two previously disparate areas of the application. I've seen this so often that I've started to believe that most of us are drawing the wrong boundaries when we first build an app.\n\n> > I think this happens because we're too focused on what data the app will _consume_ instead of how the data will _interact_ in our app.\n\nThis is a natural consequence of identifying the data we'll be fetching in our apps. But I think we tend to stop here for a couple of reasons:\n\n1. Our brains have a bias toward broad generalizations and simple solutions. We at least know what data models we're dealing with, so we build around that.\n2. We don't fully understand what the real requirements should be until we try to build a solution so we build around what we _do_ know: the data models we can get from the data APIs.\n\nWhen we're first starting imagining a brand new application, it's relatively easily identify the _types_ of data we'll have to keep track of and it often fits into neat little buckets. The trouble is:\n\n> > The whole reason for building a UI in the first place, is often to enable us to manage the interactions between these different data types!\n\n## Let's make this less abstract\n\nLet's say you're building an e-commerce experience. You know you'll have products in various categories. You know you'll have users, and shopping carts, and payment methods etc. You know that people will have to search for products, add them to a cart, and then checkout.\n\nSo, from a data perspective we'll have:\n\n1. Products\n2. Categories\n3. Carts\n4. Users\n\nFrom a process perspective:\n\n1. People will search\n2. They'll add to cart\n3. They'll checkout\n\n> > Simple, right?!\n\nSo, as developers and product managers we have some really clean, simple lines we can draw, right? We'll obviously need an API that returns collections of products as search results, and as items in your cart.\n\nSo when splitting up the work of building a UI, we kind of let the data types split the UI concerns too. Part of the UI will be all about searching for products. There's one clean boundary. Then we'll need a product detail view that pulls in relevant product data like full descriptions, images, and user reviews. Then we'll need a cart view, and a checkout view.\n\nThat all sounds good, **let's divide an conquer**! We can have one team focused on building the API, we'll have a product model with a search API. We'll have a set of categories which we can group products into. From the UI side of things we'll need a search page, an item detail page, a cart page, and a checkout page.\n\nLet's have a \"shopping cart\" team, a search page team, a homepage team, etc. All the pieces are cleanly separated. Because it was logically assumed that a user would cleanly jump from one part of the app to the other. Again, our bias toward simple solutions means we opt to split along easily identifiable major sections of the app. Great! The code is beautiful, teams are operating independently: everybody is feeling good about themselves.\n\nThen, a smart UX designer comes along and says:\n\n> > \"You know, we really ought to have customers be aware of their cart the whole time. It's like walking around in a store, you have your cart with you and you should be able to metaphorically glance down at it whenever you want without leaving your shopping experience.\"\n\nThis is hard to argue with. _Of course_ that's a better experience. So, now what? You already have a completely separate team managing the \"cart\" experience. They own everything that happens at the `yourstore.com/cart` page.\n\nIt's ok, we can hack this. Let's add this bit of logic to the persistent header that shares a bit of code that checks and show the cart count, no big deal, right? Well, it chips away a bit of architectural beauty. Now, we have to share some piece application logic for fetching and retrieving the shopping cart data in a way that can be used by the cart team, but also can be used by every other team. But, whatever, we deal with it. It produces customer value, let's ship it!\n\nThe UX designer is happy, the new feature is shipped and everybody feels good about themselves again.\n\nBut soon, when people get a taste for this ability they say \"well wouldn't it be awesome if we used our knowledge of what was in the cart to enhance and customize, well... _pretty much the whole experience_!\" It goes on and on:\n\n1. \"You know, we really ought to let users not just see how many items are in the cart, but also actually pop it open to see items from anywhere.\"\n2. \"Well, if we know what's in the cart, maybe we can use the home page to show related products to what you've already added.\"\n3. \"Oooh, what about if they re-visit the item detail page of an item that's _already_ in their cart, perhaps we should remind them that they've already added it.\"\n4. \"Well, if we're showing suggested items related to what's in the cart, we should have it update those suggestions each time they add something and then include those suggestions throughout their shopping experience.\"\n5. \"Oh, but what if they add something to their cart directly from the area of the app that is showing that list of suggested products? In that case, we don't want to refresh that list right away... just imagine if they're in the middle of adding two things and then it disappears from underneath their hovering fingertip. So, can we make sure we only refresh that list once it's out of view?\"\n\n> > Can't you just feel your internal barometer starting to build pressure?\n\nOur previous lines of separation break down. The idea of the item detail page showing a single product is no longer a standalone concept. Now we really care about that product _in the context of the cart_ and the context of other things we may want to search for, etc. This may seem annoying at first, but should not come as a surprise.\n\n> > Often times the entire purpose of an app / UI is to handle the intersection of the various types of data.\n\nA few examples off the top of my head:\n\n1. An e-commerce app is about combining products in different categories into shopping carts. Then connecting those shopping carts with customers with certain payment methods, order histories, and preferences.\n2. A \"contacts\" app is about organizing people you know into favorites, groups, and your interaction history with them.\n3. An anesthesia charting application is about combining a patient record with medications administered, vitals recorded, and people involved.\n\nI would argue that **UIs, by their very nature, are all about connecting disparate types of data!** Yet somehow, when building UIs our data structures often fail to account for this.\n\nSo what happens? Progress slows as engineers start to push back on what really would have been fairly simple change requests if it had been built differently.\n\n## What could we have done?\n\nWe can't anticipate what specific features we're going to be requested to add.\n\n1. But, perhaps we can avoid drawing such distinct lines to begin with?\n2. Perhaps we can increase our flexibility somehow?\n\nI'd like to make another observation here:\n\n> > Figuring out how to render stuff is not the hard part of building a rich, interactive UI!\n\nRegardless, of whether you use Vue, React, Preact, or whatever. Let's be clear, the difficulty is _not_ the how-to-generate-DOM part. The hard part is managing the intersection of interrelated but seemingly distinct state in a way that doesn't cause what I like to call \"state bugs\". Where something ends up in an odd state. For example, one part of the UI reflects state that is no longer true.\n\n> > What if our mental models are wrong?\n\nThe three predominant approaches we've seen to building stateful UIs on the Web in the last decade have essentially been:\n\n1. Model and Collection objects (think Backbone.js, Ember.js, etc.)\n2. Component all the things! (React state, very little code lives outside the files that defining components)\n3. State \"god objects\" paired with something that is a \"view layer\" this could be anything, but commonly Redux and React.\n\n**Option #1** is the embodiment of the first part of the shopping cart example I mentioned above. Apps that I've personally built this way (which is quite a few, I first wrote about [adopting backbone in 2010](https://blog.andyet.com/2010/10/29/building-a-single-page-app-with-backbonejs-undersc/)) always got messy when trying to share models between collections, or somehow associate models with one another. The one _really_ strong point in _favor_ of this model/collection approach is it often perfectly mimics the data structures we get from data APIs.\n\n**Option #2** works great for simpler stuff. In my option, one of the main reasons the React programming model is so successful is it solved the nested component problem. Before React we were always hacking together \"child views\" but we always had to manage them ourselves. But the shortcoming with using components for everything is that it doesn't directly address the problem of state that clearly is not directly tied to a single component. With React 16+ we have the new context API. This helps pass state around, but still doesn't directly help us solve the structuring and management of \"global app state.\" From what I've seen, attempting to do everything in components frequently leads to a giant interconnected mess of components that are hard to to reason about as a whole.\n\n**Option #3** has enabled some incredibly cool demos like time traveling, state rehydration, etc. But it has been problematic for many to implement in the real world. As it turns out, dealing with a single app-global state object comes with its own set of challenges. Gaps in functionality of Redux (and similar state tools) have been filled by third party libs and many times, the _core idea_ of having a \"god object\" is a bit at odds with other popular libraries. For example, redux and React-Router have not always played nicely together. And other perceived gaps in functionality have led to a large crop of supplemental libraries such as redux-saga, redux-loop, and Immutable.js. Also, the process of connecting redux to something like react has historically been a bit messy. After after writing a ton of `mapDispatchToProps`, `mapStateToProps` suddenly the idea feels a little less ideal.\n\nFrankly, that summary of the three options is a bit disappointing.\n\n> > Do all our models just suck?\n\nI don't think so. Perhaps we can combine the best ideas from all of them?\n\n1. Use the mental framework of \"collections\" to fetch data from APIs. We don't have much choice here, this is just kind of how data APIs have to be structured. But let's skip the whole \"turn each item into a model object\" part.\n2. Use a component hierarchy like React, or my favorite: Preact. But, let's use it for what it's best at, which is rendering a tree of visual components. Let's use local component state for things that are truly local to the component and its children. Usually local state is perfect for things like transient UI state, such as whether or not a particular line item in a list is temporarily in \"editing mode.\" Or for tracking form values and form field error states while the user is in the process of filling out a form.\n3. Use the \"god object\" approach to aggregate all the various data fetched by APIs as well as any other \"app state\" that needs to be shared between components.\n\nFrom my experience, plucking the best patterns from each is great. But, there are still shortcomings we have to make up for in the \"god object\" approach. Luckily, I've found that those things can be worked around. Unlike trying to hold strict boundaries between different data-types or \"pages\" within an app, there are other boundaries we can draw that are much more defensible because they're more structural instead of being linked to the app's feature set.\n\nThey are:\n\n1. **Don't introduce _any_ other sources of truth.** If you're doing the \"god object\" thing. By all means, don't have multiple \"gods.\" If you need data from something like a browser API write some glue code that mirrors the relevant state from the browser into your \"god object.\" This includes things like the current URL ([you can read more about how I do routing with redux here](https://read.reduxbook.com/markdown/part2/09-routing.html)).\n2. **_Always_ read state through an abstraction.** There's a concept called \"selectors\" that is essentially a function that takes the state from the \"god object\" and returns just the slice of state you care about for a given thing. By always reading state through selectors you can retain flexibility in how you choose to structure the \"raw\" data of the \"god object\". Also, selectors enable you to \"subscribe\" to a very specific subset of changes within your \"god object\" enabling efficient rendering. The most common example of this pattern is probably: [reselect](https://github.com/reduxjs/reselect).\n3. **Precisely _never_ store derived state in the \"god object.\"** Only store state in its rawest, purest form. You can decorate and enrich it as it's being read through selectors. This will save you a lot of headaches.\n4. **For extra credit: never use `componentDidMount`, or something similar to initiate data fetching.** Because, contrary to popular opinion, whether or not a particular component is mounted has very little to do with whether or not the app actually should consider fetching the data. The shopping cart example above is a good example of this. Regardless of whether the user is looking at their cart or not, we want to know what's in their cart because we can enhance the entire rest of the experience based on that data. Instead, ideally we want to be able to just declare a maximum stale age that we're ok with, and it should refresh the data behind the scenes whenever it's too old. To accomplish this we can use selectors to subscribe to our \"god object\" and look for conditions which should trigger other changes.\n\nIf you're able to follow those rules, just think about what you now have:\n\n1. You have a single source of truth containing everything your entire application needs to be aware of.\n2. You can easily combine state from completely disparate sources in whatever fashion you need, as you read it through selectors.\n3. You can write code that that responds dynamically to any possible condition that may need to be responded to.\n4. You can export and recreate this entire \"god object\" at will to recreate any state your app can be in.\n5. You can init and \"run\" an entire functional application _without any visual components having been built whatsoever_, this is analogous to running a browser in headless mode.\n6. You can build an entire data layer for an application before design has even decided how anything is going to look.\n\nTo be clear, these are not _hypotheticals_ these are the approaches I've used to build the last five apps I've been involved in.\n\n## Applying these ideas to our e-commerce example\n\n**note:** for brevity I'm glossing over some of the implementation details. [I've written a whole book that goes deeper](https://read.reduxbook.com) if you're interested.\n\n**Requirement #1:** The cart should be fetched and be available no matter where you are in the app.\n\nA top-level key in the \"god object\" tracks the current cart data. When the app boots up, the mere _lack_ of cart data is sufficient to trigger a fetch of cart items. Once fetched, it is stored along with a timestamp indicating when it was last successfully fetched.\n\nNow, let's say we want to show a cart count number in the header. We can now take that _raw_ cart items data (which is an array of objects) and write a selector to derive a cart number to show like this:\n\n```\n// select relevant slice of data from our \"god object\"\nselectCartItemsRaw: state => state.cartItems.data,\n\n// a selector that always returns a usable number\n// of cart items regardless of the state of cart\n// items. Even if we just haven't fetched the\n// cart items yet.\nselectCartItemCount: createSelector(\n  'selectCartItemsRaw',\n  items => items ? items.length : 0\n)\n```\n\nOk, so now we have a selector the header nav bar component can subscribe to, in order to always render a count. If we later determine that we want our total number of items to take into account multiple quantities of the same item, we can easily change our selector to now determine that value a little differently.\n\nThat's literally a one-line change:\n\n```\n// now we change the existing selector to\n// instead sum up the `quantity` attribute\n// of our cart items.\nselectCartItemCount: createSelector(\n  'selectCartItemsRaw',\n  items =>\n    items ?\n      items.reduce(\n        (total, item) => total + item.quantity, 0\n      )\n      : 0\n)\n```\n\n**Requirement #2:** we should fetch a list of suggested products every time the cart contents changes. If you were building it, how would you do this? If you're like most developers I've seen, you would create a \"fetch related products\" function that you manually called after each \"add to cart\" operation, right? But, that's super procedural, what if they added one more item of the same thing that the cart already had so the \"list of items\" didn't actually change. What if they remove something? Now you have to manually run it after that too, right? Soon, we're daisy chaining things and directly coupling one type of fetch with another.\n\nMaybe we can do this a little differently. First, maybe we just need to extract a list of product IDs in the cart, since that's what's sent to the recommendation API.\n\nNo big deal, we add another selector:\n\n```\nselectCartItemIds: createSelector(\n  'selectCartItemsRaw',\n  items => {\n    if (!items) {\n      return null\n    }\n    return items.map(item => item.id)\n  }\n)\n```\n\nNow, let's write something that triggers the fetch if we have cart item ids that we haven't already fetched, and we're not already in the process of fetching them.\n\nAgain, I'm glossing over some of the details, in order to focus on the ideas. But essentially this is a selector too, but it will just lead to trigger an action if certain conditions are met.\n\n```\nreactShouldFetchRelatedProducts: createSelector(\n  'selectCartItemIDs',\n  'selectRecommendedItemsRaw',\n  (cartItems, recommendedItems) => {\n    if (!cartItems) {\n      return\n    }\n    const idString = cartItemIds.join(',')\n    const idsHaveChanged = recommendedItems.lastFetchIdsString !== idString\n    if (idsHaveChanged && !recommendedItems.loading) {\n      // if this doesn't make sense to you, don't worry\n      // the point is we're triggering another action\n      // as a result of a set of conditions\n      return { actionCreator: 'doFetchRecommendedItems', args: [idString]}\n    }\n  }\n)\n```\n\nNow, anytime an item with a new item ID is added or removed from the cart it will update the recommended products list, sweet!\n\nOk, so now what?\n\nOh, right, we said we don't ever want to update the list of recommended products _while_ the user is looking at their cart, which is where those recommendations are shown.\n\nFortunately, our \"god object\" also knows the current URL pathname and we have a selector that returns just the pathname part of the URL.\n\nSo all we have to do is add one more condition:\n\n```\nreactShouldFetchRelatedProducts: createSelector(\n  'selectCartItemIDs',\n  'selectRecommendedItemsRaw',\n  'selectPathname', // <- This is new\n  (cartItems, recommendedItems, pathname) => {\n    // we now also check to make sure user is not looking at their cart\n    if (!cartItems && pathname !== '/cart') {\n      return\n    }\n    const idString = cartItemIds.join(',')\n    const idsHaveChanged = recommendedItems.lastFetchIdsString !== idString\n    if (idsHaveChanged && !recommendedItems.loading) {\n      // if this doesn't make sense to you, don't worry\n      // the point is we're triggering another action\n      // as a result of a set of conditions\n      return { actionCreator: 'doFetchRecommendedItems', args: [idString]}\n    }\n  }\n)\n```\n\nNow, our recommendations will magically fetch whenever cart item IDs change, but only if the cart page is not currently open.\n\n**Requirement #3**: modify the item detail page if the item is in the cart. Crap! Now we have another two, seemingly distinct, concerns that all of a sudden care about each other.\n\nAgain, our \"god object\" knows what URL they're on, so we can know which item page they're looking at because the item ID is in the URL. So, we can select the \"activeItemId\" (realistically we have already written this by the time new new requirement comes along, but it probably looks something like this:\n\n```\nselectActiveItemId: createSelector(\n  'selectPathname', // url pathname\n  'selectRouteParams',\n  (pathname, routeParams) => {\n    if (!pathname.startWith('/product')) {\n      return null\n    }\n    return routeParams.itemId\n  }\n)\n```\n\nOk, so let's assume we've also got a selector called `selectActiveItem` that actually returns the data we've fetched for that item.\n\nRead the code comments in this block carefully:\n\n```\nselectActiveItem: createSelector(\n  'selectItemDataById',  // grabs all item data we have\n  'selectActiveItemId',  // the one from above\n  'selectCartItems',     // the current items in cart\n  (itemDataById, activeItemId, cartItems) => {\n    const foundItem = itemDataById[activeItemId]\n\n    if (!foundItem) {\n      return null\n    }\n\n    // now if we want to mix in what we know about the cart\n    // we can do that without manipulating the \"raw\" state at all\n\n    // let's see if we have one\n    const cartItem = cartItems.find(item => item.id === activeItemId)\n\n    // now we can decorate our active item with the corresponding cart item\n    // if it exists.\n    return Object.assign({}, foundItem, {relatedCartItem: cartItem || null})\n  }\n)\n\n```\n\nHere you can see how we've successfully combined two _completely_ different types of data. Or to put it into MVC / Backbone.js terms, two models from two different collections are now merged without truly merging their sources.\n\nNow, the page that renders the item detail page just has to check for the existence of a `.cartItem` property to render something different in that scenario.\n\n> > You can start to see how mashing together seemingly disparate parts of state can now be done very arbitrarily. This is a huge strength of this approach!\n\nNow if some product manager decides that on the third tuesday of the month, and a user have more than 50 items in their cart, and if three or more of those items qualify for a warranty, then we need to render a congratulatory message. All of a sudden, with this type of approach, it doesn't really sound all that scary to implement.\n\n> > We just define a selector that answers each one of those questions. Then use those as inputs to another selector that checks if all those are met.\n\nWe haven't even had to mess around with manually firing data fetches. We've defined the conditions that should trigger a fetch, and we've seamlessly stitched it into the data that is already being used to render the item detail page.\n\n> > This also, very importantly, means that our view components, (React, Preact, View, Web-Components, etc.) can actually be quite simple. They just have to focus on rendering the right stuff, given the properties they're given.\n\n## Conclusion\n\nHopefully I've at lest helped illustrate at a high level, the benefits and flexibility that we can get by changing the boundaries we use when building UIs with complex and ever-evolving feature sets.\n\nYou may be thinking this all sounds nice, Henrik, but... does it scale?!?! In my experience on 5 different apps, Yes. Can I do SSR with these ideas? Yes, I'm doing this for a big client right now. Is it performant? That's a bit of an tangential question, because it's also possible to do really stupid things if you misuse these patterns, but yes, in my apps this has not prevented me from consistently building apps with lighthouse performance scores in the high 90s.\n\nThere are obviously still implementation details I'm completely ignoring here. To fully explain all those things and the tools and libraries I actually use to do all of this in practice I'd have to write a whole book, which I actually did and made available online for free: [read.reduxbook.com](https://read.reduxbook.com).\n\nHope I've at least given you something to think about. I'm just trying to share the ideas that are working well for me. I figure if we all keep doing that, everybody wins by learning from each other's experiences.\n\nLet me know what you think. Easiest way to reach me is on Twitter: [@HenrikJoreteg](https://twitter.com/henrikjoreteg). Thanks for reading!","outputFile":"/blog/architecting-uis-for-change.html","html":"<p><strong>Techniques for keeping your app code under control even when requirements shift dramatically.</strong></p><p>I&#39;ve had this pinned on my twitter for just about as long as &quot;tweet pinning&quot; has been a thing:</p><blockquote><blockquote><p>If you don&#39;t actively fight for simplicity in software, complexity will win... and it will suck.</p></blockquote></blockquote><p>It&#39;s a nice, pithy little quip, perhaps... but how do you actually accomplish this?</p><p>The way I see it, broadly speaking, you have three options:</p><ol><li><strong>Push back on any complex requirements.</strong> Just avoid the complex problems altogether by only building relatively simple things.</li><li><strong>Minimize entropy</strong> by trying to isolate areas of your app into distinct concerns and do whatever you can to hold those lines.</li><li><strong>Develop coping mechanisms</strong> for the inherent complexity we&#39;re bound to face and learn to manage it.</li></ol><p><strong>Option #1</strong> is untenable and frankly—boring. Yet, there are a surprising number of folks who seem to believe the web should still just be a set of linked static documents of content. But, some of us like to build more interesting things on the web that are truly app experiences. Not just documents, but document <em>editors</em>. Oh, and things like video editing suites, graphic design tools, <a href=\"https://www.soundslice.com/\">interactive sheet music for learning how to play guitar</a> and tools for <a href=https://app.anesthesiacharting.com>tracking and monitoring patients during surgery</a>.</p><p><strong>Option #2</strong> is well-intentioned and seems reasonable on the surface. I&#39;ve heard this desire expressed from management from the last two big corporate PWAs I&#39;ve worked on. There&#39;s a logical desire to have distinct teams that are able to develop, build, and deploy in isolation from one another. To be clear, I&#39;m all for separation of concerns. But the entire presentation layer of a nice cohesive &quot;app&quot; experience is, in fact, a shared concern and not something that can be divided so simply (more on this later).</p><p><strong>Options #3</strong> As you probably guessed, this is my preference and will the subject of this post. But, before we can develop coping mechanisms, we have to study the problem. Perhaps we can discern something about the source of complexity.</p><a name=identifying-the-source-of-complexity class=anchor href=#identifying-the-source-of-complexity><h2><span class=header-link></span>Identifying the source of complexity</h2></a><p>If you&#39;re a developer, I bet you&#39;re a little bit like me, you have an internal barometer that can sense how in-control the codebase is at any one time. I feel a sense of dread as we start to pile on features if I&#39;m feeling that the current patterns are not able to sustain the addition of more features without causing serious deterioration of the overall quality of the code. On the flip-side, I also feel a huge sense of relief when I refactor something that was starting to slip into disorder and then manage to create the right abstraction that lets us reign it in. Doing this can be downright euphoric.</p><p>But is there anything we can pinpoint about the source of the &quot;slippage&quot; to begin with? I think so.</p><p>I&#39;ve seen this in so many apps now, that I feel confident that it&#39;s a common source of many of these issues. For context, I&#39;ve built a wide range of what might be considered &quot;ambitious&quot; web apps. Real-time asset geo-location tracking systems, chat apps, video calling apps, the Starbucks PWA, apps that enable you to make and receive real phone calls in a browser, surgery tracking apps, and recently I&#39;ve been working on an e-commerce PWA for one of the world&#39;s largest retailers. These observations seem to hold true regardless of app or team size.</p><p>Early development tends to go something like this:</p><ol><li><p>Initial requirements are identified and a small team builds a tidy, small, simple prototype with no real tech debt based on their understanding of initial requirements.</p></li><li><p>Stakeholders and early users start using the prototype and quickly realize there were several scenarios that were not accounted for. In addition, they also start to generate a whole bunch of &quot;wouldn&#39;t it be awesome if we could&quot; feature suggestions.</p></li><li><p>Code tidiness (and often performance) goes to hell as developers scramble to connect previously cleanly isolated areas of the app in the attempt to build those &quot;wouldn&#39;t it be awesome if we could&quot; features. These type of features frequently involve connecting previous isolated logic because you realize there is value to be gained by doing so (example below).</p></li></ol><p>Later, when the app is launched to real users, steps 2 and 3 repeat, over and over. Or more precisely, they repeat until the developers working on it so dread their work that they either walk away, stop caring, or stop being able to actually deliver them in a timely manner.</p><p>2-5 years after the initial build someone comes along as says: &quot;this is all garbage, we need to re-write it.&quot;</p><p>And... the whole cycle starts again.</p><p>To some degree, this is inevitable, and not all bad because sometimes you just need a fresh start. But, perhaps if we did things a little differently we could at minimum <em>extend</em> this cycle a bit. So, if we look at the above sequence there is a precise moment where things seem to go off the rails.</p><blockquote><blockquote><p>It happens at the point where the original assumptions are challenged.</p></blockquote></blockquote><p>Can we perhaps define the point more clearly? I think so. As I hinted at above, more often than not, the precise point where &quot;loss of control&quot; over the app begins is when someone realizes the potential benefit of connecting logic from two previously disparate areas of the application. I&#39;ve seen this so often that I&#39;ve started to believe that most of us are drawing the wrong boundaries when we first build an app.</p><blockquote><blockquote><p>I think this happens because we&#39;re too focused on what data the app will <em>consume</em> instead of how the data will <em>interact</em> in our app.</p></blockquote></blockquote><p>This is a natural consequence of identifying the data we&#39;ll be fetching in our apps. But I think we tend to stop here for a couple of reasons:</p><ol><li>Our brains have a bias toward broad generalizations and simple solutions. We at least know what data models we&#39;re dealing with, so we build around that.</li><li>We don&#39;t fully understand what the real requirements should be until we try to build a solution so we build around what we _do_ know: the data models we can get from the data APIs.</li></ol><p>When we&#39;re first starting imagining a brand new application, it&#39;s relatively easily identify the <em>types</em> of data we&#39;ll have to keep track of and it often fits into neat little buckets. The trouble is:</p><blockquote><blockquote><p>The whole reason for building a UI in the first place, is often to enable us to manage the interactions between these different data types!</p></blockquote></blockquote><a name=let39s-make-this-less-abstract class=anchor href=#let39s-make-this-less-abstract><h2><span class=header-link></span>Let&#39;s make this less abstract</h2></a><p>Let&#39;s say you&#39;re building an e-commerce experience. You know you&#39;ll have products in various categories. You know you&#39;ll have users, and shopping carts, and payment methods etc. You know that people will have to search for products, add them to a cart, and then checkout.</p><p>So, from a data perspective we&#39;ll have:</p><ol><li>Products</li><li>Categories</li><li>Carts</li><li>Users</li></ol><p>From a process perspective:</p><ol><li>People will search</li><li>They&#39;ll add to cart</li><li>They&#39;ll checkout</li></ol><blockquote><blockquote><p>Simple, right?!</p></blockquote></blockquote><p>So, as developers and product managers we have some really clean, simple lines we can draw, right? We&#39;ll obviously need an API that returns collections of products as search results, and as items in your cart.</p><p>So when splitting up the work of building a UI, we kind of let the data types split the UI concerns too. Part of the UI will be all about searching for products. There&#39;s one clean boundary. Then we&#39;ll need a product detail view that pulls in relevant product data like full descriptions, images, and user reviews. Then we&#39;ll need a cart view, and a checkout view.</p><p>That all sounds good, <strong>let&#39;s divide an conquer</strong>! We can have one team focused on building the API, we&#39;ll have a product model with a search API. We&#39;ll have a set of categories which we can group products into. From the UI side of things we&#39;ll need a search page, an item detail page, a cart page, and a checkout page.</p><p>Let&#39;s have a &quot;shopping cart&quot; team, a search page team, a homepage team, etc. All the pieces are cleanly separated. Because it was logically assumed that a user would cleanly jump from one part of the app to the other. Again, our bias toward simple solutions means we opt to split along easily identifiable major sections of the app. Great! The code is beautiful, teams are operating independently: everybody is feeling good about themselves.</p><p>Then, a smart UX designer comes along and says:</p><blockquote><blockquote><p>&quot;You know, we really ought to have customers be aware of their cart the whole time. It&#39;s like walking around in a store, you have your cart with you and you should be able to metaphorically glance down at it whenever you want without leaving your shopping experience.&quot;</p></blockquote></blockquote><p>This is hard to argue with. <em>Of course</em> that&#39;s a better experience. So, now what? You already have a completely separate team managing the &quot;cart&quot; experience. They own everything that happens at the <code>yourstore.com/cart</code> page.</p><p>It&#39;s ok, we can hack this. Let&#39;s add this bit of logic to the persistent header that shares a bit of code that checks and show the cart count, no big deal, right? Well, it chips away a bit of architectural beauty. Now, we have to share some piece application logic for fetching and retrieving the shopping cart data in a way that can be used by the cart team, but also can be used by every other team. But, whatever, we deal with it. It produces customer value, let&#39;s ship it!</p><p>The UX designer is happy, the new feature is shipped and everybody feels good about themselves again.</p><p>But soon, when people get a taste for this ability they say &quot;well wouldn&#39;t it be awesome if we used our knowledge of what was in the cart to enhance and customize, well... <em>pretty much the whole experience</em>!&quot; It goes on and on:</p><ol><li>&quot;You know, we really ought to let users not just see how many items are in the cart, but also actually pop it open to see items from anywhere.&quot;</li><li>&quot;Well, if we know what&#39;s in the cart, maybe we can use the home page to show related products to what you&#39;ve already added.&quot;</li><li>&quot;Oooh, what about if they re-visit the item detail page of an item that&#39;s <em>already</em> in their cart, perhaps we should remind them that they&#39;ve already added it.&quot;</li><li>&quot;Well, if we&#39;re showing suggested items related to what&#39;s in the cart, we should have it update those suggestions each time they add something and then include those suggestions throughout their shopping experience.&quot;</li><li>&quot;Oh, but what if they add something to their cart directly from the area of the app that is showing that list of suggested products? In that case, we don&#39;t want to refresh that list right away... just imagine if they&#39;re in the middle of adding two things and then it disappears from underneath their hovering fingertip. So, can we make sure we only refresh that list once it&#39;s out of view?&quot;</li></ol><blockquote><blockquote><p>Can&#39;t you just feel your internal barometer starting to build pressure?</p></blockquote></blockquote><p>Our previous lines of separation break down. The idea of the item detail page showing a single product is no longer a standalone concept. Now we really care about that product <em>in the context of the cart</em> and the context of other things we may want to search for, etc. This may seem annoying at first, but should not come as a surprise.</p><blockquote><blockquote><p>Often times the entire purpose of an app / UI is to handle the intersection of the various types of data.</p></blockquote></blockquote><p>A few examples off the top of my head:</p><ol><li>An e-commerce app is about combining products in different categories into shopping carts. Then connecting those shopping carts with customers with certain payment methods, order histories, and preferences.</li><li>A &quot;contacts&quot; app is about organizing people you know into favorites, groups, and your interaction history with them.</li><li>An anesthesia charting application is about combining a patient record with medications administered, vitals recorded, and people involved.</li></ol><p>I would argue that <strong>UIs, by their very nature, are all about connecting disparate types of data!</strong> Yet somehow, when building UIs our data structures often fail to account for this.</p><p>So what happens? Progress slows as engineers start to push back on what really would have been fairly simple change requests if it had been built differently.</p><a name=what-could-we-have-done class=anchor href=#what-could-we-have-done><h2><span class=header-link></span>What could we have done?</h2></a><p>We can&#39;t anticipate what specific features we&#39;re going to be requested to add.</p><ol><li>But, perhaps we can avoid drawing such distinct lines to begin with?</li><li>Perhaps we can increase our flexibility somehow?</li></ol><p>I&#39;d like to make another observation here:</p><blockquote><blockquote><p>Figuring out how to render stuff is not the hard part of building a rich, interactive UI!</p></blockquote></blockquote><p>Regardless, of whether you use Vue, React, Preact, or whatever. Let&#39;s be clear, the difficulty is <em>not</em> the how-to-generate-DOM part. The hard part is managing the intersection of interrelated but seemingly distinct state in a way that doesn&#39;t cause what I like to call &quot;state bugs&quot;. Where something ends up in an odd state. For example, one part of the UI reflects state that is no longer true.</p><blockquote><blockquote><p>What if our mental models are wrong?</p></blockquote></blockquote><p>The three predominant approaches we&#39;ve seen to building stateful UIs on the Web in the last decade have essentially been:</p><ol><li>Model and Collection objects (think Backbone.js, Ember.js, etc.)</li><li>Component all the things! (React state, very little code lives outside the files that defining components)</li><li>State &quot;god objects&quot; paired with something that is a &quot;view layer&quot; this could be anything, but commonly Redux and React.</li></ol><p><strong>Option #1</strong> is the embodiment of the first part of the shopping cart example I mentioned above. Apps that I&#39;ve personally built this way (which is quite a few, I first wrote about <a href=\"https://blog.andyet.com/2010/10/29/building-a-single-page-app-with-backbonejs-undersc/\">adopting backbone in 2010</a>) always got messy when trying to share models between collections, or somehow associate models with one another. The one <em>really</em> strong point in <em>favor</em> of this model/collection approach is it often perfectly mimics the data structures we get from data APIs.</p><p><strong>Option #2</strong> works great for simpler stuff. In my option, one of the main reasons the React programming model is so successful is it solved the nested component problem. Before React we were always hacking together &quot;child views&quot; but we always had to manage them ourselves. But the shortcoming with using components for everything is that it doesn&#39;t directly address the problem of state that clearly is not directly tied to a single component. With React 16+ we have the new context API. This helps pass state around, but still doesn&#39;t directly help us solve the structuring and management of &quot;global app state.&quot; From what I&#39;ve seen, attempting to do everything in components frequently leads to a giant interconnected mess of components that are hard to to reason about as a whole.</p><p><strong>Option #3</strong> has enabled some incredibly cool demos like time traveling, state rehydration, etc. But it has been problematic for many to implement in the real world. As it turns out, dealing with a single app-global state object comes with its own set of challenges. Gaps in functionality of Redux (and similar state tools) have been filled by third party libs and many times, the <em>core idea</em> of having a &quot;god object&quot; is a bit at odds with other popular libraries. For example, redux and React-Router have not always played nicely together. And other perceived gaps in functionality have led to a large crop of supplemental libraries such as redux-saga, redux-loop, and Immutable.js. Also, the process of connecting redux to something like react has historically been a bit messy. After after writing a ton of <code>mapDispatchToProps</code>, <code>mapStateToProps</code> suddenly the idea feels a little less ideal.</p><p>Frankly, that summary of the three options is a bit disappointing.</p><blockquote><blockquote><p>Do all our models just suck?</p></blockquote></blockquote><p>I don&#39;t think so. Perhaps we can combine the best ideas from all of them?</p><ol><li>Use the mental framework of &quot;collections&quot; to fetch data from APIs. We don&#39;t have much choice here, this is just kind of how data APIs have to be structured. But let&#39;s skip the whole &quot;turn each item into a model object&quot; part.</li><li>Use a component hierarchy like React, or my favorite: Preact. But, let&#39;s use it for what it&#39;s best at, which is rendering a tree of visual components. Let&#39;s use local component state for things that are truly local to the component and its children. Usually local state is perfect for things like transient UI state, such as whether or not a particular line item in a list is temporarily in &quot;editing mode.&quot; Or for tracking form values and form field error states while the user is in the process of filling out a form.</li><li>Use the &quot;god object&quot; approach to aggregate all the various data fetched by APIs as well as any other &quot;app state&quot; that needs to be shared between components.</li></ol><p>From my experience, plucking the best patterns from each is great. But, there are still shortcomings we have to make up for in the &quot;god object&quot; approach. Luckily, I&#39;ve found that those things can be worked around. Unlike trying to hold strict boundaries between different data-types or &quot;pages&quot; within an app, there are other boundaries we can draw that are much more defensible because they&#39;re more structural instead of being linked to the app&#39;s feature set.</p><p>They are:</p><ol><li><strong>Don&#39;t introduce <em>any</em> other sources of truth.</strong> If you&#39;re doing the &quot;god object&quot; thing. By all means, don&#39;t have multiple &quot;gods.&quot; If you need data from something like a browser API write some glue code that mirrors the relevant state from the browser into your &quot;god object.&quot; This includes things like the current URL (<a href=https://read.reduxbook.com/markdown/part2/09-routing.html>you can read more about how I do routing with redux here</a>).</li><li><strong><em>Always</em> read state through an abstraction.</strong> There&#39;s a concept called &quot;selectors&quot; that is essentially a function that takes the state from the &quot;god object&quot; and returns just the slice of state you care about for a given thing. By always reading state through selectors you can retain flexibility in how you choose to structure the &quot;raw&quot; data of the &quot;god object&quot;. Also, selectors enable you to &quot;subscribe&quot; to a very specific subset of changes within your &quot;god object&quot; enabling efficient rendering. The most common example of this pattern is probably: <a href=https://github.com/reduxjs/reselect>reselect</a>.</li><li><strong>Precisely <em>never</em> store derived state in the &quot;god object.&quot;</strong> Only store state in its rawest, purest form. You can decorate and enrich it as it&#39;s being read through selectors. This will save you a lot of headaches.</li><li><strong>For extra credit: never use <code>componentDidMount</code>, or something similar to initiate data fetching.</strong> Because, contrary to popular opinion, whether or not a particular component is mounted has very little to do with whether or not the app actually should consider fetching the data. The shopping cart example above is a good example of this. Regardless of whether the user is looking at their cart or not, we want to know what&#39;s in their cart because we can enhance the entire rest of the experience based on that data. Instead, ideally we want to be able to just declare a maximum stale age that we&#39;re ok with, and it should refresh the data behind the scenes whenever it&#39;s too old. To accomplish this we can use selectors to subscribe to our &quot;god object&quot; and look for conditions which should trigger other changes.</li></ol><p>If you&#39;re able to follow those rules, just think about what you now have:</p><ol><li>You have a single source of truth containing everything your entire application needs to be aware of.</li><li>You can easily combine state from completely disparate sources in whatever fashion you need, as you read it through selectors.</li><li>You can write code that that responds dynamically to any possible condition that may need to be responded to.</li><li>You can export and recreate this entire &quot;god object&quot; at will to recreate any state your app can be in.</li><li>You can init and &quot;run&quot; an entire functional application <em>without any visual components having been built whatsoever</em>, this is analogous to running a browser in headless mode.</li><li>You can build an entire data layer for an application before design has even decided how anything is going to look.</li></ol><p>To be clear, these are not <em>hypotheticals</em> these are the approaches I&#39;ve used to build the last five apps I&#39;ve been involved in.</p><a name=applying-these-ideas-to-our-e-commerce-example class=anchor href=#applying-these-ideas-to-our-e-commerce-example><h2><span class=header-link></span>Applying these ideas to our e-commerce example</h2></a><p><strong>note:</strong> for brevity I&#39;m glossing over some of the implementation details. <a href=https://read.reduxbook.com>I&#39;ve written a whole book that goes deeper</a> if you&#39;re interested.</p><p><strong>Requirement #1:</strong> The cart should be fetched and be available no matter where you are in the app.</p><p>A top-level key in the &quot;god object&quot; tracks the current cart data. When the app boots up, the mere <em>lack</em> of cart data is sufficient to trigger a fetch of cart items. Once fetched, it is stored along with a timestamp indicating when it was last successfully fetched.</p><p>Now, let&#39;s say we want to show a cart count number in the header. We can now take that <em>raw</em> cart items data (which is an array of objects) and write a selector to derive a cart number to show like this:</p><pre><code>// select relevant slice of data from our &quot;god object&quot;\nselectCartItemsRaw: state =&gt; state.cartItems.data,\n\n// a selector that always returns a usable number\n// of cart items regardless of the state of cart\n// items. Even if we just haven&#39;t fetched the\n// cart items yet.\nselectCartItemCount: createSelector(\n  &#39;selectCartItemsRaw&#39;,\n  items =&gt; items ? items.length : 0\n)\n</code></pre><p>Ok, so now we have a selector the header nav bar component can subscribe to, in order to always render a count. If we later determine that we want our total number of items to take into account multiple quantities of the same item, we can easily change our selector to now determine that value a little differently.</p><p>That&#39;s literally a one-line change:</p><pre><code>// now we change the existing selector to\n// instead sum up the `quantity` attribute\n// of our cart items.\nselectCartItemCount: createSelector(\n  &#39;selectCartItemsRaw&#39;,\n  items =&gt;\n    items ?\n      items.reduce(\n        (total, item) =&gt; total + item.quantity, 0\n      )\n      : 0\n)\n</code></pre><p><strong>Requirement #2:</strong> we should fetch a list of suggested products every time the cart contents changes. If you were building it, how would you do this? If you&#39;re like most developers I&#39;ve seen, you would create a &quot;fetch related products&quot; function that you manually called after each &quot;add to cart&quot; operation, right? But, that&#39;s super procedural, what if they added one more item of the same thing that the cart already had so the &quot;list of items&quot; didn&#39;t actually change. What if they remove something? Now you have to manually run it after that too, right? Soon, we&#39;re daisy chaining things and directly coupling one type of fetch with another.</p><p>Maybe we can do this a little differently. First, maybe we just need to extract a list of product IDs in the cart, since that&#39;s what&#39;s sent to the recommendation API.</p><p>No big deal, we add another selector:</p><pre><code>selectCartItemIds: createSelector(\n  &#39;selectCartItemsRaw&#39;,\n  items =&gt; {\n    if (!items) {\n      return null\n    }\n    return items.map(item =&gt; item.id)\n  }\n)\n</code></pre><p>Now, let&#39;s write something that triggers the fetch if we have cart item ids that we haven&#39;t already fetched, and we&#39;re not already in the process of fetching them.</p><p>Again, I&#39;m glossing over some of the details, in order to focus on the ideas. But essentially this is a selector too, but it will just lead to trigger an action if certain conditions are met.</p><pre><code>reactShouldFetchRelatedProducts: createSelector(\n  &#39;selectCartItemIDs&#39;,\n  &#39;selectRecommendedItemsRaw&#39;,\n  (cartItems, recommendedItems) =&gt; {\n    if (!cartItems) {\n      return\n    }\n    const idString = cartItemIds.join(&#39;,&#39;)\n    const idsHaveChanged = recommendedItems.lastFetchIdsString !== idString\n    if (idsHaveChanged &amp;&amp; !recommendedItems.loading) {\n      // if this doesn&#39;t make sense to you, don&#39;t worry\n      // the point is we&#39;re triggering another action\n      // as a result of a set of conditions\n      return { actionCreator: &#39;doFetchRecommendedItems&#39;, args: [idString]}\n    }\n  }\n)\n</code></pre><p>Now, anytime an item with a new item ID is added or removed from the cart it will update the recommended products list, sweet!</p><p>Ok, so now what?</p><p>Oh, right, we said we don&#39;t ever want to update the list of recommended products <em>while</em> the user is looking at their cart, which is where those recommendations are shown.</p><p>Fortunately, our &quot;god object&quot; also knows the current URL pathname and we have a selector that returns just the pathname part of the URL.</p><p>So all we have to do is add one more condition:</p><pre><code>reactShouldFetchRelatedProducts: createSelector(\n  &#39;selectCartItemIDs&#39;,\n  &#39;selectRecommendedItemsRaw&#39;,\n  &#39;selectPathname&#39;, // &lt;- This is new\n  (cartItems, recommendedItems, pathname) =&gt; {\n    // we now also check to make sure user is not looking at their cart\n    if (!cartItems &amp;&amp; pathname !== &#39;/cart&#39;) {\n      return\n    }\n    const idString = cartItemIds.join(&#39;,&#39;)\n    const idsHaveChanged = recommendedItems.lastFetchIdsString !== idString\n    if (idsHaveChanged &amp;&amp; !recommendedItems.loading) {\n      // if this doesn&#39;t make sense to you, don&#39;t worry\n      // the point is we&#39;re triggering another action\n      // as a result of a set of conditions\n      return { actionCreator: &#39;doFetchRecommendedItems&#39;, args: [idString]}\n    }\n  }\n)\n</code></pre><p>Now, our recommendations will magically fetch whenever cart item IDs change, but only if the cart page is not currently open.</p><p><strong>Requirement #3</strong>: modify the item detail page if the item is in the cart. Crap! Now we have another two, seemingly distinct, concerns that all of a sudden care about each other.</p><p>Again, our &quot;god object&quot; knows what URL they&#39;re on, so we can know which item page they&#39;re looking at because the item ID is in the URL. So, we can select the &quot;activeItemId&quot; (realistically we have already written this by the time new new requirement comes along, but it probably looks something like this:</p><pre><code>selectActiveItemId: createSelector(\n  &#39;selectPathname&#39;, // url pathname\n  &#39;selectRouteParams&#39;,\n  (pathname, routeParams) =&gt; {\n    if (!pathname.startWith(&#39;/product&#39;)) {\n      return null\n    }\n    return routeParams.itemId\n  }\n)\n</code></pre><p>Ok, so let&#39;s assume we&#39;ve also got a selector called <code>selectActiveItem</code> that actually returns the data we&#39;ve fetched for that item.</p><p>Read the code comments in this block carefully:</p><pre><code>selectActiveItem: createSelector(\n  &#39;selectItemDataById&#39;,  // grabs all item data we have\n  &#39;selectActiveItemId&#39;,  // the one from above\n  &#39;selectCartItems&#39;,     // the current items in cart\n  (itemDataById, activeItemId, cartItems) =&gt; {\n    const foundItem = itemDataById[activeItemId]\n\n    if (!foundItem) {\n      return null\n    }\n\n    // now if we want to mix in what we know about the cart\n    // we can do that without manipulating the &quot;raw&quot; state at all\n\n    // let&#39;s see if we have one\n    const cartItem = cartItems.find(item =&gt; item.id === activeItemId)\n\n    // now we can decorate our active item with the corresponding cart item\n    // if it exists.\n    return Object.assign({}, foundItem, {relatedCartItem: cartItem || null})\n  }\n)\n\n</code></pre><p>Here you can see how we&#39;ve successfully combined two <em>completely</em> different types of data. Or to put it into MVC / Backbone.js terms, two models from two different collections are now merged without truly merging their sources.</p><p>Now, the page that renders the item detail page just has to check for the existence of a <code>.cartItem</code> property to render something different in that scenario.</p><blockquote><blockquote><p>You can start to see how mashing together seemingly disparate parts of state can now be done very arbitrarily. This is a huge strength of this approach!</p></blockquote></blockquote><p>Now if some product manager decides that on the third tuesday of the month, and a user have more than 50 items in their cart, and if three or more of those items qualify for a warranty, then we need to render a congratulatory message. All of a sudden, with this type of approach, it doesn&#39;t really sound all that scary to implement.</p><blockquote><blockquote><p>We just define a selector that answers each one of those questions. Then use those as inputs to another selector that checks if all those are met.</p></blockquote></blockquote><p>We haven&#39;t even had to mess around with manually firing data fetches. We&#39;ve defined the conditions that should trigger a fetch, and we&#39;ve seamlessly stitched it into the data that is already being used to render the item detail page.</p><blockquote><blockquote><p>This also, very importantly, means that our view components, (React, Preact, View, Web-Components, etc.) can actually be quite simple. They just have to focus on rendering the right stuff, given the properties they&#39;re given.</p></blockquote></blockquote><a name=conclusion class=anchor href=#conclusion><h2><span class=header-link></span>Conclusion</h2></a><p>Hopefully I&#39;ve at lest helped illustrate at a high level, the benefits and flexibility that we can get by changing the boundaries we use when building UIs with complex and ever-evolving feature sets.</p><p>You may be thinking this all sounds nice, Henrik, but... does it scale?!?! In my experience on 5 different apps, Yes. Can I do SSR with these ideas? Yes, I&#39;m doing this for a big client right now. Is it performant? That&#39;s a bit of an tangential question, because it&#39;s also possible to do really stupid things if you misuse these patterns, but yes, in my apps this has not prevented me from consistently building apps with lighthouse performance scores in the high 90s.</p><p>There are obviously still implementation details I&#39;m completely ignoring here. To fully explain all those things and the tools and libraries I actually use to do all of this in practice I&#39;d have to write a whole book, which I actually did and made available online for free: <a href=https://read.reduxbook.com>read.reduxbook.com</a>.</p><p>Hope I&#39;ve at least given you something to think about. I&#39;m just trying to share the ideas that are working well for me. I figure if we all keep doing that, everybody wins by learning from each other&#39;s experiences.</p><p>Let me know what you think. Easiest way to reach me is on Twitter: <a href=https://twitter.com/henrikjoreteg>@HenrikJoreteg</a>. Thanks for reading!</p>","preview":"<p><strong>Techniques for keeping your app code under control even when requirements shift dramatically.</strong></p><p>I&#39;ve had this pinned on my twitter for just about as long as &quot;tweet pinning&quot; has been a thing:</p><blockquote><blockquote><p>If you don&#39;t actively fight for simplicity in software, complexity will win... and it will suck.</p></blockquote></blockquote>"},{"title":"Building Honey Badger Web Apps","date":"2018-04-16T18:00:00.000Z","tags":"pwa, mobile, web, book, redux","slug":"honey-badger-web-apps","url":"/blog/honey-badger-web-apps","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2018/04/reliable-web-apps.md","markdown":"**This is a chapter from my new book [Human Redux](https://reduxbook.com/) which is now available!**\n\n# Chapter 11: Reliable apps\n\nAs a user, nothing will more quickly sour me on a piece of software than flakiness. When we try to get someone to use our software, to some degree, we're asking them to trust us. If they're going to enter their data, spend their precious time, or hope to get some value out of the app we've built, they have to trust that it's going to do what it's supposed to do.\n\nHow is trust built? Through experience, right? Consistent experiences over time lead to trust.\n\nHistorically, web developers haven't _really_ had to care about reliability quite to the same extent as folks building native applications, since the _web itself_ has always been a little untrustworthy. Our Internet connections are far from perfect, browsers have different quirks, and at the end of the day, our users can always just hit \"refresh\" if we end up in a broken state.\n\nTo this day, when I've written anything of significant length into a `<textarea>` I'll instinctively copy it to the clipboard before hitting \"submit\" because I don't trust that the developers will have taken care to make sure I don't lose my work if it fails to submit!\n\nSure, if you're building simple websites that level of inherent flakiness might be acceptable because users expect it. But, at the point where you're asking a user to use _your app_ to accomplish something that _matters to them_ all of a sudden this becomes unacceptable.\n\n## The Web has a trust problem\n\nWhen you type a URL into a browser and hit \"enter\" what level of confidence do you have that it will quickly load and get you what you're looking for?\n\nBy contrast, when you open Instagram on your phone what level of confidence do you have that it will open quickly and will at least show you what you saw last time you opened it even if you don't have an Internet connection?\n\nQuite a different level of trust, right?\n\nIt used to be that this difference could be attributed entirely to the differences between the platforms. On the one hand, The Web won't typically get you anything if your connection is failing, on the other hand, Instagram, the app, is already downloaded and installed locally and the data it has fetched is also stored locally. So it shouldn't be too surprising that Instagram can achieve a higher level of reliability, right?\n\nHere's the thing: **That excuse is gone**! Today's web platform allows us to build apps that can:\n\n1.  Be installed on the device\n2.  Be opened and run from cache first, before even trying the network\n3.  Fetch and store data locally\n\n**The inherent reliability advantages of native apps are gone.** But as a group, web developers haven't necessarily embraced that mindset. But, if we want to build trust with our users, it is downright irresponsible for us to assume we'll always have a fast, reliable connection. We simply cannot assume that we'll always be able to fetch what we need on demand.\n\nLet me say that again:\n\n> If we want to build trust with our users, it is downright irresponsible for us to assume we'll always have a fast, reliable connection.\n\nYou may have heard the phrase \"Offline first\" used to describe these types of approaches. But \"Offline first\" is somewhat confusing since many people read that think \"Oh, I don't need offline support.\" But, what I'm discussing here is reliability. _Everyone_ wants reliability. Consistent, reliable experiences build trust, and people spend their time (and money) with companies and services they trust.\n\n## Rebuilding trust\n\nIf I tap an icon on my phone, I expect that app to open. Period. Sure, it may not be able to connect to fetch what it needs but it damn well better open and at least tell me that it couldn't get what it needed.\n\nUsers have that expectation of things that are installed. In fact, that's arguably what the word \"installed\" actually means to a user. Sure, a modern web app that you open in a browser may have been built to be capable of working offline, and truly be run locally, as if it were installed. But, we're never in a million years going to teach users to open their browser, type in a URL and hit \"Enter\" when they know they don't have an Internet connection! It's simply not going to happen because in that scenario _our app_ isn't \"the app\" they're running; _the browser_ is the app they're running.\n\nAs a result, if we even want a shot at creating the same level of trust, we need our apps to exist outside of the browser. Users have to be able to install our web apps on their devices.\n\nFortunately, that's now possible with Progressive Web Apps. I won't get into the nitty-gritty of building PWAs here, but if you're not familiar with them, I'd urge you to read the \"Betting on the Web\" blog post that I've included in the Appendix.\n\nI would also argue, however, that at the point where we've recognized that we're building real apps, that realization should affect how we approach data fetching.\n\n## Trustworthy data fetching\n\nIf you've built web apps, you've no doubt fetched data from a server from JavaScript that's running on a web page. Back in the day, you may have done it like this:\n\n```js\n$.ajax('https://example.com/some.json', {\n  success: function(data) {\n    console.log(data)\n  }\n})\n```\n\nIf you were diligent, you'd also handle the error case. More often than not \"handling the error\" involves popping up a message to the user saying something like \"Sorry, there was an error fetching your data.\" I suppose this is _marginally_ better than doing nothing, but sheesh, in most cases you've essentially left your user at a dead-end street without a map; not exactly great for building trust.\n\nNot to mention, in a mobile world, a failed request should not be a surprise! It's _not an edge case_. It's not even strictly an _exception_ because frankly, it's not all that exceptional.\n\nAs we've discussed in previous chapters, if we want to build reliable applications we have to decouple the data from the views that show them. If we've coupled things so that displaying a component always causes a fetch that breaks the cache-first behavior. There are cases where that's sufficient, but often it sells users short.\n\nWhat's the problem with just fetching data when a view loads that needs the data? Imagine the following example:\n\n```js\nclass MyPage extends Component {\n  componentDidMount() {\n    this.setState({\n      loading: true\n    })\n    fetch('https://example.com/some.json')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          loading: false,\n          data: data\n        })\n      })\n  }\n  render() {\n    if (this.state.loading) {\n      return <p>Loading...</p>\n    }\n    return <div>{data.map(item => <p>{item.name}</p>)}</div>\n  }\n}\n```\n\nIn this case, anytime this component is added to the page it's going to immediately fetch data while showing a \"loading...\" message. The trouble is, if the component was added, removed, then quickly added back again it will _still_ show `loading...` even though we just successfully fetched the data 2 seconds ago!\n\nAnd sure, you can use various simple loader helpers that will mitigate the need to re-fetch. But they're usually quite simplistic and doesn't address the issue of coupling view and behavior.\n\nAs we've said, these simple approaches may have been OK for the old web, but if we're building real apps, we can do better.\n\n## A rather ambitious, yet real-life example\n\nWhile I was prototyping the PWA for Starbucks before it became a \"real\" project, I ran into an interesting feature in the mockup design. The goal was to show what song was currently playing in a given Starbucks store, that is if we thought you were in one.\n\nConceptually the various APIs required to pull this off were all available. But, the process was not exactly straightforward; quite the opposite, in fact. Here's what it had to do:\n\n1.  Call an API to return \"cards\" to be shown on the landing page of the app.\n2.  If we got a \"now-playing\" card back with sufficiently high priority, we'd attempt to fetch the song that was now playing.\n3.  First, we'd need to determine if we had permission to ask for geolocation.\n4.  If we didn't, we wanted to display a \"card\" in the UI casually explaining the cool feature we could provide if they would give us permission with a button they could use to grant us permission.\n5.  If we had permission, then we would trigger a geolocation request of the user behind the scenes and hope it was successful and sufficiently accurate (which is anything but guaranteed with this API).\n6.  If we had geolocation that was within our accuracy threshold and not too stale we could use that to trigger a request to the API that would give us the closest store to that geolocation.\n7.  If there was a store nearby and within distance threshold, we could _reasonably_ assume the user was probably in or at least near the store.\n8.  Now that we have a store ID we could attempt to call the API that told us what music was playing and use the result to show the right image and song info.\n\nThat's quite the cascade of things that need to occur, right? Plus, any number of them were known to be likely to fail.\n\n1.  Geolocation permission could be denied.\n2.  Geolocation could fail.\n3.  Geolocation could just not be accurate enough to trust.\n4.  There may not be any store nearby at all.\n5.  There may be a store returned but is often too far away to assume the user was inside.\n6.  We may have correctly guessed the user is in the store, but that particular store may not have \"now playing\" information available (not all stores did).\n7.  Also, often, when a customer enters a store, their phone will start to try to connect to the wifi. But, they may not have accepted terms of use. So if a customer is walking into a store, the network may be working outside, but stop working as they near wifi range.\n\nSo, by no fault of Starbucks', any number of things could go wrong here. How on earth do you even go about building something to handle this reliably?\n\n## How we tackled it\n\nFirst, as you probably guessed if you read the previous chapter, all the logic was contained in selector functions. Selectors could be used to inspect what point in the process we were. Unless all the prerequisite conditions were in place, the next actions would not be dispatched. This alone, was incredibly effective at just ensuring only the next possible thing would be triggered.\n\nAlso, at each point in the process where _any_ step of the process was successful the result would be persisted locally by means we'll discuss in the next chapter. Then, on startup, the application's initial data that we passed to `createStore` would always contain the contents of the reducers that had been successfully persisted. This meant we could march forward in this chain of events without ever needing to take a step back. It also meant that even if a user refreshed the browser or got disconnected because their phone was trying to jump to WiFi, the process would always be able to pick up where it left off, rather than having to start from the beginning.\n\n## Recovering from errors\n\nSince, as we stated, things were likely to go wrong I didn't want the whole thing to fail because part of it failed. Instead, I wanted it to wait a little bit then keep trying. In order to support this in addition to storing the result of the data fetches, I also kept track of the metadata _about_ the request. To be more specific, the reducers stored state that was structured like this:\n\n```js\nconst state = {\n  // the actual data, the payload of the\n  // successful requests\n  data: null,\n\n  // a flag to check whether currently loading\n  loading: false,\n\n  // timestamp of last successful fetch\n  lastFetch: null,\n\n  // timestamp of last error\n  lastError: null,\n\n  // The type of error that occurred\n  error: null\n}\n```\n\nThe reducers would then do this type of thing:\n\n```js\nconst reducer = (state, action) => {\n  if (action.type === 'SUCCESS') {\n    return Object.assign({}, data, {\n      data: action.payload,\n      // CAVEAT: Using Date.now() here\n      // makes the reducer impure. Personally,\n      // I don't mind, but it could certainly be\n      // argued that this value should be passed\n      // in as part of the action instead.\n      lastFetch: Date.now(),\n      loading: false,\n\n      // clear any previous error data\n      lastError: null,\n      error: null\n    })\n  }\n\n  // other conditions\n\n  return state\n}\n```\n\nIn this way, by tracking this _metadata_ along with the data itself, we had enough information in selectors to determine what the next step should be.\n\nIf sufficient time had passed since the last error, the data was too stale, and we weren't currently fetching, we could in a reactor compare those timestamps to the \"app time\" and dispatch an action creator that give it another try.\n\nWith all these pieces combined I could build a very robust solution that would:\n\n1.  Retry if there were network errors.\n2.  Give up if there were \"permanent\" failures such as the user blocking geolocation.\n3.  Persist any time it succeeded and automatically pick up where it left off.\n4.  Automatically determine what to do next based on how long it had been.\n\nEssentially, it was a \"honey badger.\" You could just let it start, then sit there and refresh the browser but it would still keep marching forward until it completed. I think this type of resilience should be the standard for PWAs.\n\nAt first it a problem like this sounds quite daunting, but by breaking down the problem into smaller pieces, we can tackle them one by one and ultimately it's quite doable.\n\n## Higher order reducers\n\nYou may have noticed in the example reducer where I just handled one `action.type` things get a little busy. Imagine if you have 4 or 5 different resources where you have to do this bookkeeping along with each reducer that needs these kinds of capabilities.\n\nHumans are inconsistent. Handling _each_ of those conditions and tracking all that metadata correctly in many different reducers in our app sounds like a recipe for lots of evil, subtle, hard-to-track-down bugs.\n\nWe're programmers, no? Let's solve this with some programming. Instead of handwriting these complex reducer functions, perhaps we can write a function that will generate a reducer for us? You could call this approach \"higher order reducers.\"\n\nTo do this, we need to write a function that will take a \"base\" action type and then return a reducer that handles the state changes for the error and success cases.\n\nLet's target an API like this:\n\n```js\nimport getMetadataReducer from 'get-metadata-reducer'\nimport { createStore, combineReducers } from 'redux'\n\nconst store = createStore(\n  combineReducers({\n    usersReducer: getMetadataReducer({\n      baseType: 'FETCH_USERS'\n    })\n    // ...\n    // ... other reducers\n    // ...\n  })\n)\n```\n\nBy using a convention for how our actions are named, we can write a function that supports that target API:\n\n`get-metadata-reducer.js`\n\n```js\nexport default ({ baseType }) => {\n  const START = `${baseType}_START`\n  const SUCCESS = `${baseType}_SUCCESS`\n  const ERROR = `${baseType}_ERROR`\n\n  const initialData = {\n    data: null,\n    lastError: null,\n    error: null,\n    lastFetch: null,\n    loading: false\n  }\n\n  // here we're returning our customized reducer\n  return (state, action) => {\n    if (action.type === START) {\n      return Object.assign({}, state, {\n        loading: true\n      })\n    }\n    if (action.type === SUCCESS) {\n      // if successful we store our data\n      // store the lastFetch timestamp\n      // clear out any errors\n      // and set loading to false\n      return Object.assign({}, state, {\n        data: action.payload,\n        lastFetch: Date.now(),\n        error: null,\n        lastError: null,\n        loading: false\n      })\n    }\n    if (action.type === ERROR) {\n      // we still want to leave existing\n      // data intact as well as \"last fetch\"\n      // which would let us determine if the\n      // data is stale or not\n      return Object.assign({}, state, {\n        lastError: Date.now(),\n        error: action.error,\n        loading: false\n      })\n    }\n\n    return state\n  }\n}\n```\n\nIn this way, we can take something that sounds tedious, complex, and error-prone and turn it into something we can isolate, write unit tests for and _know_ works consistently.\n\nSimilarly, we can create helpers for our selectors that can determine if we should fetch something based on this _now consistent_ data structure and the current app time.\n\nThe \"honey-badger\" example available at: [reduxbook.com/honey-badger](https://reduxbook.com/honey-badger) is built on these ideas but uses tools from redux-bundler to do it. The resilience of this approach enables us to build some of those \"riskier\" features in a way that is ultimately reliable.\n\n## Mixing higher-order reducers into your own reducer\n\nOne problem with generating reducers it that reducers are not always so generic. You may well end up in a scenario where you have a reducer where you want to do this type of metadata tracking, but you also need to handle additional action types.\n\nAs it turns out, we can manually compose the generated reducer with our own to accomplish this. If you recall from Chapter 3 on updating state, we can use `combineReducers` to nest reducers however we wish. Using `combineReducers` to keep our generated reducer separate from our customizations is probably cleaner, but that's not our only option.\n\nLet's manually use our generated reducer inside a custom one to extend it with the ability to handle other action types as well:\n\n```js\n// just using the file we defined above\nimport getMetadataReducer from './get-metadata-reducer'\nimport { createStore, combineReducers } from 'redux'\n\nconst generatedReducer = getMetadataReducer({\n  baseType: 'FETCH_USERS'\n})\n\n// we will write our own reducer here\nconst userReducer = (state, action) => {\n  // we can just pass our state and action\n  // through the generated reducer first.\n  state = generatedReducer(state, action)\n\n  if (action.type === 'SOME_OTHER_ACTION') {\n    return Object.assign({}, state, {\n      otherThing: true\n    })\n  }\n\n  return state\n}\n\nconst store = createStore(\n  combineReducers({\n    usersReducer\n    // ...\n    // ... other reducers\n    // ...\n  })\n)\n```\n\nAs you can see, since we're just dealing with simple functions here we can combine them however we wish.\n\n**Note**: If you needed to add something to the `initialState` inside the generated reducer that can also be done. We would change our `getMetadataReducer` helper to return an object containing both a generated `initialState` object _and_ the `reducer`.\n\nThen, when we used it, we'd grab the resulting `initialState` along with the reducer. We can modify that and use it as part of our reducer too as shown below:\n\n```js\n// again grabbing the file from above, that now has\n// has been modified to also return `initialState`.\nimport getMetadataReducer from 'get-metadata-reducer'\nimport { createStore, combineReducers } from 'redux'\n\n// now this would be an object with both initial\n// and reducer, so we could grab them as variables\nconst { initialState, reducer } = getMetadataReducer({\n  baseType: 'FETCH_USERS'\n})\n\n// here we can modify the initial state returned from\n// our helper.\nconst initialUserState = Object.assign({}, initialState, {\n  otherThing: false\n})\n\n// Now we'd pass our updated initial state\n// as the initial state here:\nconst userReducer = (state = initialUserState, action) => {\n  // remember `reducer` here is the one\n  // generated by our helper above.\n  state = reducer(state, action)\n\n  // Here we can handle additional action types\n  if (action.type === 'SOME_OTHER_ACTION') {\n    return Object.assign({}, state, {\n      otherThing: true\n    })\n  }\n\n  return state\n}\n```\n\n## Chapter recap\n\n1.  Reliability is not the default on the web, this needs to change with PWAs, or we will continue to have a trust problem on The Web.\n1.  Coupling data fetching to components doesn't allow for the reliability we're aiming for.\n1.  I provided a real-world example of trying to show the \"now playing\" card in the Starbucks PWA powered by very seemingly complicated waterfall of things that had to occur reliably.\n1.  I showed how to store metadata along with your data in reducers to enable your app to recover from errors.\n1.  Higher-order reducers can be used to tackle tedious \"bookkeeping\" problems while significantly reducing the surface area for bugs.\n1.  We can compose the generated reducer function into another reducer to customize behavior to support handling other action types as well.\n1.  For an example of what you can do with this approach see: [reduxbook.com/honey-badger](https://reduxbook.com/honey-badger)\n\n**If you enjoyed this the whole book is now available. It's called Human Redux buy it at [https://reduxbook.com](https://reduxbook.com)!**","outputFile":"/blog/honey-badger-web-apps.html","html":"<p><strong>This is a chapter from my new book <a href=\"https://reduxbook.com/\">Human Redux</a> which is now available!</strong></p><a name=chapter-11-reliable-apps class=anchor href=#chapter-11-reliable-apps><h1><span class=header-link></span>Chapter 11: Reliable apps</h1></a><p>As a user, nothing will more quickly sour me on a piece of software than flakiness. When we try to get someone to use our software, to some degree, we&#39;re asking them to trust us. If they&#39;re going to enter their data, spend their precious time, or hope to get some value out of the app we&#39;ve built, they have to trust that it&#39;s going to do what it&#39;s supposed to do.</p><p>How is trust built? Through experience, right? Consistent experiences over time lead to trust.</p><p>Historically, web developers haven&#39;t <em>really</em> had to care about reliability quite to the same extent as folks building native applications, since the <em>web itself</em> has always been a little untrustworthy. Our Internet connections are far from perfect, browsers have different quirks, and at the end of the day, our users can always just hit &quot;refresh&quot; if we end up in a broken state.</p><p>To this day, when I&#39;ve written anything of significant length into a <code>&lt;textarea&gt;</code> I&#39;ll instinctively copy it to the clipboard before hitting &quot;submit&quot; because I don&#39;t trust that the developers will have taken care to make sure I don&#39;t lose my work if it fails to submit!</p><p>Sure, if you&#39;re building simple websites that level of inherent flakiness might be acceptable because users expect it. But, at the point where you&#39;re asking a user to use <em>your app</em> to accomplish something that <em>matters to them</em> all of a sudden this becomes unacceptable.</p><a name=the-web-has-a-trust-problem class=anchor href=#the-web-has-a-trust-problem><h2><span class=header-link></span>The Web has a trust problem</h2></a><p>When you type a URL into a browser and hit &quot;enter&quot; what level of confidence do you have that it will quickly load and get you what you&#39;re looking for?</p><p>By contrast, when you open Instagram on your phone what level of confidence do you have that it will open quickly and will at least show you what you saw last time you opened it even if you don&#39;t have an Internet connection?</p><p>Quite a different level of trust, right?</p><p>It used to be that this difference could be attributed entirely to the differences between the platforms. On the one hand, The Web won&#39;t typically get you anything if your connection is failing, on the other hand, Instagram, the app, is already downloaded and installed locally and the data it has fetched is also stored locally. So it shouldn&#39;t be too surprising that Instagram can achieve a higher level of reliability, right?</p><p>Here&#39;s the thing: <strong>That excuse is gone</strong>! Today&#39;s web platform allows us to build apps that can:</p><ol><li>Be installed on the device</li><li>Be opened and run from cache first, before even trying the network</li><li>Fetch and store data locally</li></ol><p><strong>The inherent reliability advantages of native apps are gone.</strong> But as a group, web developers haven&#39;t necessarily embraced that mindset. But, if we want to build trust with our users, it is downright irresponsible for us to assume we&#39;ll always have a fast, reliable connection. We simply cannot assume that we&#39;ll always be able to fetch what we need on demand.</p><p>Let me say that again:</p><blockquote><p>If we want to build trust with our users, it is downright irresponsible for us to assume we&#39;ll always have a fast, reliable connection.</p></blockquote><p>You may have heard the phrase &quot;Offline first&quot; used to describe these types of approaches. But &quot;Offline first&quot; is somewhat confusing since many people read that think &quot;Oh, I don&#39;t need offline support.&quot; But, what I&#39;m discussing here is reliability. <em>Everyone</em> wants reliability. Consistent, reliable experiences build trust, and people spend their time (and money) with companies and services they trust.</p><a name=rebuilding-trust class=anchor href=#rebuilding-trust><h2><span class=header-link></span>Rebuilding trust</h2></a><p>If I tap an icon on my phone, I expect that app to open. Period. Sure, it may not be able to connect to fetch what it needs but it damn well better open and at least tell me that it couldn&#39;t get what it needed.</p><p>Users have that expectation of things that are installed. In fact, that&#39;s arguably what the word &quot;installed&quot; actually means to a user. Sure, a modern web app that you open in a browser may have been built to be capable of working offline, and truly be run locally, as if it were installed. But, we&#39;re never in a million years going to teach users to open their browser, type in a URL and hit &quot;Enter&quot; when they know they don&#39;t have an Internet connection! It&#39;s simply not going to happen because in that scenario <em>our app</em> isn&#39;t &quot;the app&quot; they&#39;re running; <em>the browser</em> is the app they&#39;re running.</p><p>As a result, if we even want a shot at creating the same level of trust, we need our apps to exist outside of the browser. Users have to be able to install our web apps on their devices.</p><p>Fortunately, that&#39;s now possible with Progressive Web Apps. I won&#39;t get into the nitty-gritty of building PWAs here, but if you&#39;re not familiar with them, I&#39;d urge you to read the &quot;Betting on the Web&quot; blog post that I&#39;ve included in the Appendix.</p><p>I would also argue, however, that at the point where we&#39;ve recognized that we&#39;re building real apps, that realization should affect how we approach data fetching.</p><a name=trustworthy-data-fetching class=anchor href=#trustworthy-data-fetching><h2><span class=header-link></span>Trustworthy data fetching</h2></a><p>If you&#39;ve built web apps, you&#39;ve no doubt fetched data from a server from JavaScript that&#39;s running on a web page. Back in the day, you may have done it like this:</p><pre><code class=undefinedjs>$.ajax(&#39;https://example.com/some.json&#39;, {\n  success: function(data) {\n    console.log(data)\n  }\n})\n</code></pre><p>If you were diligent, you&#39;d also handle the error case. More often than not &quot;handling the error&quot; involves popping up a message to the user saying something like &quot;Sorry, there was an error fetching your data.&quot; I suppose this is <em>marginally</em> better than doing nothing, but sheesh, in most cases you&#39;ve essentially left your user at a dead-end street without a map; not exactly great for building trust.</p><p>Not to mention, in a mobile world, a failed request should not be a surprise! It&#39;s <em>not an edge case</em>. It&#39;s not even strictly an <em>exception</em> because frankly, it&#39;s not all that exceptional.</p><p>As we&#39;ve discussed in previous chapters, if we want to build reliable applications we have to decouple the data from the views that show them. If we&#39;ve coupled things so that displaying a component always causes a fetch that breaks the cache-first behavior. There are cases where that&#39;s sufficient, but often it sells users short.</p><p>What&#39;s the problem with just fetching data when a view loads that needs the data? Imagine the following example:</p><pre><code class=undefinedjs>class MyPage extends Component {\n  componentDidMount() {\n    this.setState({\n      loading: true\n    })\n    fetch(&#39;https://example.com/some.json&#39;)\n      .then(res =&gt; res.json())\n      .then(data =&gt; {\n        this.setState({\n          loading: false,\n          data: data\n        })\n      })\n  }\n  render() {\n    if (this.state.loading) {\n      return &lt;p&gt;Loading...&lt;/p&gt;\n    }\n    return &lt;div&gt;{data.map(item =&gt; &lt;p&gt;{item.name}&lt;/p&gt;)}&lt;/div&gt;\n  }\n}\n</code></pre><p>In this case, anytime this component is added to the page it&#39;s going to immediately fetch data while showing a &quot;loading...&quot; message. The trouble is, if the component was added, removed, then quickly added back again it will <em>still</em> show <code>loading...</code> even though we just successfully fetched the data 2 seconds ago!</p><p>And sure, you can use various simple loader helpers that will mitigate the need to re-fetch. But they&#39;re usually quite simplistic and doesn&#39;t address the issue of coupling view and behavior.</p><p>As we&#39;ve said, these simple approaches may have been OK for the old web, but if we&#39;re building real apps, we can do better.</p><a name=a-rather-ambitious-yet-real-life-example class=anchor href=#a-rather-ambitious-yet-real-life-example><h2><span class=header-link></span>A rather ambitious, yet real-life example</h2></a><p>While I was prototyping the PWA for Starbucks before it became a &quot;real&quot; project, I ran into an interesting feature in the mockup design. The goal was to show what song was currently playing in a given Starbucks store, that is if we thought you were in one.</p><p>Conceptually the various APIs required to pull this off were all available. But, the process was not exactly straightforward; quite the opposite, in fact. Here&#39;s what it had to do:</p><ol><li>Call an API to return &quot;cards&quot; to be shown on the landing page of the app.</li><li>If we got a &quot;now-playing&quot; card back with sufficiently high priority, we&#39;d attempt to fetch the song that was now playing.</li><li>First, we&#39;d need to determine if we had permission to ask for geolocation.</li><li>If we didn&#39;t, we wanted to display a &quot;card&quot; in the UI casually explaining the cool feature we could provide if they would give us permission with a button they could use to grant us permission.</li><li>If we had permission, then we would trigger a geolocation request of the user behind the scenes and hope it was successful and sufficiently accurate (which is anything but guaranteed with this API).</li><li>If we had geolocation that was within our accuracy threshold and not too stale we could use that to trigger a request to the API that would give us the closest store to that geolocation.</li><li>If there was a store nearby and within distance threshold, we could <em>reasonably</em> assume the user was probably in or at least near the store.</li><li>Now that we have a store ID we could attempt to call the API that told us what music was playing and use the result to show the right image and song info.</li></ol><p>That&#39;s quite the cascade of things that need to occur, right? Plus, any number of them were known to be likely to fail.</p><ol><li>Geolocation permission could be denied.</li><li>Geolocation could fail.</li><li>Geolocation could just not be accurate enough to trust.</li><li>There may not be any store nearby at all.</li><li>There may be a store returned but is often too far away to assume the user was inside.</li><li>We may have correctly guessed the user is in the store, but that particular store may not have &quot;now playing&quot; information available (not all stores did).</li><li>Also, often, when a customer enters a store, their phone will start to try to connect to the wifi. But, they may not have accepted terms of use. So if a customer is walking into a store, the network may be working outside, but stop working as they near wifi range.</li></ol><p>So, by no fault of Starbucks&#39;, any number of things could go wrong here. How on earth do you even go about building something to handle this reliably?</p><a name=how-we-tackled-it class=anchor href=#how-we-tackled-it><h2><span class=header-link></span>How we tackled it</h2></a><p>First, as you probably guessed if you read the previous chapter, all the logic was contained in selector functions. Selectors could be used to inspect what point in the process we were. Unless all the prerequisite conditions were in place, the next actions would not be dispatched. This alone, was incredibly effective at just ensuring only the next possible thing would be triggered.</p><p>Also, at each point in the process where <em>any</em> step of the process was successful the result would be persisted locally by means we&#39;ll discuss in the next chapter. Then, on startup, the application&#39;s initial data that we passed to <code>createStore</code> would always contain the contents of the reducers that had been successfully persisted. This meant we could march forward in this chain of events without ever needing to take a step back. It also meant that even if a user refreshed the browser or got disconnected because their phone was trying to jump to WiFi, the process would always be able to pick up where it left off, rather than having to start from the beginning.</p><a name=recovering-from-errors class=anchor href=#recovering-from-errors><h2><span class=header-link></span>Recovering from errors</h2></a><p>Since, as we stated, things were likely to go wrong I didn&#39;t want the whole thing to fail because part of it failed. Instead, I wanted it to wait a little bit then keep trying. In order to support this in addition to storing the result of the data fetches, I also kept track of the metadata <em>about</em> the request. To be more specific, the reducers stored state that was structured like this:</p><pre><code class=undefinedjs>const state = {\n  // the actual data, the payload of the\n  // successful requests\n  data: null,\n\n  // a flag to check whether currently loading\n  loading: false,\n\n  // timestamp of last successful fetch\n  lastFetch: null,\n\n  // timestamp of last error\n  lastError: null,\n\n  // The type of error that occurred\n  error: null\n}\n</code></pre><p>The reducers would then do this type of thing:</p><pre><code class=undefinedjs>const reducer = (state, action) =&gt; {\n  if (action.type === &#39;SUCCESS&#39;) {\n    return Object.assign({}, data, {\n      data: action.payload,\n      // CAVEAT: Using Date.now() here\n      // makes the reducer impure. Personally,\n      // I don&#39;t mind, but it could certainly be\n      // argued that this value should be passed\n      // in as part of the action instead.\n      lastFetch: Date.now(),\n      loading: false,\n\n      // clear any previous error data\n      lastError: null,\n      error: null\n    })\n  }\n\n  // other conditions\n\n  return state\n}\n</code></pre><p>In this way, by tracking this <em>metadata</em> along with the data itself, we had enough information in selectors to determine what the next step should be.</p><p>If sufficient time had passed since the last error, the data was too stale, and we weren&#39;t currently fetching, we could in a reactor compare those timestamps to the &quot;app time&quot; and dispatch an action creator that give it another try.</p><p>With all these pieces combined I could build a very robust solution that would:</p><ol><li>Retry if there were network errors.</li><li>Give up if there were &quot;permanent&quot; failures such as the user blocking geolocation.</li><li>Persist any time it succeeded and automatically pick up where it left off.</li><li>Automatically determine what to do next based on how long it had been.</li></ol><p>Essentially, it was a &quot;honey badger.&quot; You could just let it start, then sit there and refresh the browser but it would still keep marching forward until it completed. I think this type of resilience should be the standard for PWAs.</p><p>At first it a problem like this sounds quite daunting, but by breaking down the problem into smaller pieces, we can tackle them one by one and ultimately it&#39;s quite doable.</p><a name=higher-order-reducers class=anchor href=#higher-order-reducers><h2><span class=header-link></span>Higher order reducers</h2></a><p>You may have noticed in the example reducer where I just handled one <code>action.type</code> things get a little busy. Imagine if you have 4 or 5 different resources where you have to do this bookkeeping along with each reducer that needs these kinds of capabilities.</p><p>Humans are inconsistent. Handling <em>each</em> of those conditions and tracking all that metadata correctly in many different reducers in our app sounds like a recipe for lots of evil, subtle, hard-to-track-down bugs.</p><p>We&#39;re programmers, no? Let&#39;s solve this with some programming. Instead of handwriting these complex reducer functions, perhaps we can write a function that will generate a reducer for us? You could call this approach &quot;higher order reducers.&quot;</p><p>To do this, we need to write a function that will take a &quot;base&quot; action type and then return a reducer that handles the state changes for the error and success cases.</p><p>Let&#39;s target an API like this:</p><pre><code class=undefinedjs>import getMetadataReducer from &#39;get-metadata-reducer&#39;\nimport { createStore, combineReducers } from &#39;redux&#39;\n\nconst store = createStore(\n  combineReducers({\n    usersReducer: getMetadataReducer({\n      baseType: &#39;FETCH_USERS&#39;\n    })\n    // ...\n    // ... other reducers\n    // ...\n  })\n)\n</code></pre><p>By using a convention for how our actions are named, we can write a function that supports that target API:</p><p><code>get-metadata-reducer.js</code></p><pre><code class=undefinedjs>export default ({ baseType }) =&gt; {\n  const START = `${baseType}_START`\n  const SUCCESS = `${baseType}_SUCCESS`\n  const ERROR = `${baseType}_ERROR`\n\n  const initialData = {\n    data: null,\n    lastError: null,\n    error: null,\n    lastFetch: null,\n    loading: false\n  }\n\n  // here we&#39;re returning our customized reducer\n  return (state, action) =&gt; {\n    if (action.type === START) {\n      return Object.assign({}, state, {\n        loading: true\n      })\n    }\n    if (action.type === SUCCESS) {\n      // if successful we store our data\n      // store the lastFetch timestamp\n      // clear out any errors\n      // and set loading to false\n      return Object.assign({}, state, {\n        data: action.payload,\n        lastFetch: Date.now(),\n        error: null,\n        lastError: null,\n        loading: false\n      })\n    }\n    if (action.type === ERROR) {\n      // we still want to leave existing\n      // data intact as well as &quot;last fetch&quot;\n      // which would let us determine if the\n      // data is stale or not\n      return Object.assign({}, state, {\n        lastError: Date.now(),\n        error: action.error,\n        loading: false\n      })\n    }\n\n    return state\n  }\n}\n</code></pre><p>In this way, we can take something that sounds tedious, complex, and error-prone and turn it into something we can isolate, write unit tests for and <em>know</em> works consistently.</p><p>Similarly, we can create helpers for our selectors that can determine if we should fetch something based on this <em>now consistent</em> data structure and the current app time.</p><p>The &quot;honey-badger&quot; example available at: <a href=https://reduxbook.com/honey-badger>reduxbook.com/honey-badger</a> is built on these ideas but uses tools from redux-bundler to do it. The resilience of this approach enables us to build some of those &quot;riskier&quot; features in a way that is ultimately reliable.</p><a name=mixing-higher-order-reducers-into-your-own-reducer class=anchor href=#mixing-higher-order-reducers-into-your-own-reducer><h2><span class=header-link></span>Mixing higher-order reducers into your own reducer</h2></a><p>One problem with generating reducers it that reducers are not always so generic. You may well end up in a scenario where you have a reducer where you want to do this type of metadata tracking, but you also need to handle additional action types.</p><p>As it turns out, we can manually compose the generated reducer with our own to accomplish this. If you recall from Chapter 3 on updating state, we can use <code>combineReducers</code> to nest reducers however we wish. Using <code>combineReducers</code> to keep our generated reducer separate from our customizations is probably cleaner, but that&#39;s not our only option.</p><p>Let&#39;s manually use our generated reducer inside a custom one to extend it with the ability to handle other action types as well:</p><pre><code class=undefinedjs>// just using the file we defined above\nimport getMetadataReducer from &#39;./get-metadata-reducer&#39;\nimport { createStore, combineReducers } from &#39;redux&#39;\n\nconst generatedReducer = getMetadataReducer({\n  baseType: &#39;FETCH_USERS&#39;\n})\n\n// we will write our own reducer here\nconst userReducer = (state, action) =&gt; {\n  // we can just pass our state and action\n  // through the generated reducer first.\n  state = generatedReducer(state, action)\n\n  if (action.type === &#39;SOME_OTHER_ACTION&#39;) {\n    return Object.assign({}, state, {\n      otherThing: true\n    })\n  }\n\n  return state\n}\n\nconst store = createStore(\n  combineReducers({\n    usersReducer\n    // ...\n    // ... other reducers\n    // ...\n  })\n)\n</code></pre><p>As you can see, since we&#39;re just dealing with simple functions here we can combine them however we wish.</p><p><strong>Note</strong>: If you needed to add something to the <code>initialState</code> inside the generated reducer that can also be done. We would change our <code>getMetadataReducer</code> helper to return an object containing both a generated <code>initialState</code> object <em>and</em> the <code>reducer</code>.</p><p>Then, when we used it, we&#39;d grab the resulting <code>initialState</code> along with the reducer. We can modify that and use it as part of our reducer too as shown below:</p><pre><code class=undefinedjs>// again grabbing the file from above, that now has\n// has been modified to also return `initialState`.\nimport getMetadataReducer from &#39;get-metadata-reducer&#39;\nimport { createStore, combineReducers } from &#39;redux&#39;\n\n// now this would be an object with both initial\n// and reducer, so we could grab them as variables\nconst { initialState, reducer } = getMetadataReducer({\n  baseType: &#39;FETCH_USERS&#39;\n})\n\n// here we can modify the initial state returned from\n// our helper.\nconst initialUserState = Object.assign({}, initialState, {\n  otherThing: false\n})\n\n// Now we&#39;d pass our updated initial state\n// as the initial state here:\nconst userReducer = (state = initialUserState, action) =&gt; {\n  // remember `reducer` here is the one\n  // generated by our helper above.\n  state = reducer(state, action)\n\n  // Here we can handle additional action types\n  if (action.type === &#39;SOME_OTHER_ACTION&#39;) {\n    return Object.assign({}, state, {\n      otherThing: true\n    })\n  }\n\n  return state\n}\n</code></pre><a name=chapter-recap class=anchor href=#chapter-recap><h2><span class=header-link></span>Chapter recap</h2></a><ol><li>Reliability is not the default on the web, this needs to change with PWAs, or we will continue to have a trust problem on The Web.</li><li>Coupling data fetching to components doesn&#39;t allow for the reliability we&#39;re aiming for.</li><li>I provided a real-world example of trying to show the &quot;now playing&quot; card in the Starbucks PWA powered by very seemingly complicated waterfall of things that had to occur reliably.</li><li>I showed how to store metadata along with your data in reducers to enable your app to recover from errors.</li><li>Higher-order reducers can be used to tackle tedious &quot;bookkeeping&quot; problems while significantly reducing the surface area for bugs.</li><li>We can compose the generated reducer function into another reducer to customize behavior to support handling other action types as well.</li><li>For an example of what you can do with this approach see: <a href=https://reduxbook.com/honey-badger>reduxbook.com/honey-badger</a></li></ol><p><strong>If you enjoyed this the whole book is now available. It&#39;s called Human Redux buy it at <a href=https://reduxbook.com>https://reduxbook.com</a>!</strong></p>","preview":"<p><strong>This is a chapter from my new book <a href=\"https://reduxbook.com/\">Human Redux</a> which is now available!</strong></p><a name=chapter-11-reliable-apps class=anchor href=#chapter-11-reliable-apps><h1><span class=header-link></span>Chapter 11: Reliable apps</h1></a><p>As a user, nothing will more quickly sour me on a piece of software than flakiness. When we try to get someone to use our software, to some degree, we&#39;re asking them to trust us. If they&#39;re going to enter their data, spend their precious time, or hope to get some value out of the app we&#39;ve built, they have to trust that it&#39;s going to do what it&#39;s supposed to do.</p>"},{"title":"A PWA that Spawns PWAs, Oh My!","date":"2018-01-22T20:00:00.000Z","tags":"pwa, mobile, web, speedy","slug":"pwa-spawns-pwas","url":"/blog/pwa-spawns-pwas","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2018/01/pwa-inception.md","markdown":"**TLDR; The ability to build apps with web technology isn't just another way to build the same thing. It enables a whole new category of services that didn't make financial sense previously. As proof, I also introduce a real service that I've built for non-profits called [Speedy](https://speedy.gift) that generates PWAs on the fly and is built on these ideas.**\n\nIf you've seen any of my writing about PWAs (Progressive Web Apps), you already know that I'm a fan.\n\nThat is because I believe that the core idea of building ad-hoc, app-like experiences that don't require an install step is transformative to how we use our Fancy Pocket Computer Thingies™️. If you want to get a background on PWAs and _why_ I think they're such a big deal read or watch my [\"Betting on the Web\"](/blog/betting-on-the-web) post/talk.\n\nBut, the short version is that The Web has finally gotten \"good enough\" for making first-class app experiences.\n\n## A few quick supporting anecdotes\n\nI've been happily using the [Twitter Lite](https://mobile.twitter.com) as my only Twitter client on my phone since it was first launched. I recently I did the same for Instagram, their PWA is coming along nicely and even though it may lack a few features for the time being, I've made the switch.\n\nI also recently helped Starbucks build/ship [their PWA](https://app.starbucks.com) (U.S.-only for the time being).\n\nThere are many, many more, examples of companies investing in PWAs. All this to say this isn't theoretical; it's already happening.\n\n## That's nice Henrik, but users don't care how the app was built!\n\n**You're absolutely right**. Once it's on their device, they don't care whether it's powered by web tech or is running native code for their platform. But, that's actually kind of the point! We can now build the same experience and deliver it in less time than it takes to load the typical boring ol' website. I would argue that users _do_ care about whether or not they have to go install stuff from an app store or not, but I digress. For the purposes of this post **let's assume users don't care at all.**\n\n> > What this _does_, however, is change the types of things that make sense for us to build as developers.\n\nLet's take an example of a local bike shop. Should they have an app? If we're talking about an app in the traditional sense: absolutely not.\n\nThere's a very low chance that a bike shop owner could justify dropping $30k+ to a software company to build a custom native app for her. I mean, why would she?! Realistically, unless there's some _serious_ value or incentive she can offer to customers for installing it, they're simply not going to do it.\n\n> > It is _extremely_ unlikely that it investing in custom app development would be a wise investment for her.\n\nBut that's not to say that there aren't aspects of her business where she could benefit from providing _a greater level of interactivity with her customers_. What if instead of her bike shop website just being a simple page with contact details and a pic of the shop it was… wait for it… ✨a PWA!✨\n\nIt could load just as fast as a simple site, but also let her do more. It could show off current inventory, highlight sale items, and maybe let loyal customers track their purchases over time to earn rewards? Or let folks track status of their bike repair. Perhaps there are a few of her most loyal customers who would actually want to add her shop's PWA to their home screens? Or maybe she could have a way to do push notifications about special events, or group rides.\n\nFor many small businesses, keeping loyal customers engaged and coming back is their life-blood. Therefore, anything that helps them do that is _hugely_ valuable.\n\n> > There are so many use-cases that don't justify the cost of custom software development but could still benefit from a an app-like experience!\n\n## So what are we supposed to do with this information?\n\nPerhaps we can use the inherently dynamic nature of the web to make PWAs for things that previously didn't justify the investment?\n\nWhat I mean is that \"bike shop software\" can likely be reduced into a fairly constrained and generic set of potential requirements.\n\n> > If she could pay ~$100/mo for a service made for bike shops where she could customize, configure, and publish a PWA that helped her better engage her customers that'd be a no-brainer!\n\nThere ya go, free business idea: build the _ultimate bike shop_ management tool and make it so each bike shop customer can generate/configure a PWA for their customers.\n\nA few more businesses off the top of my head that could benefit from something like this:\n\n* Hair salons\n  * Appointment bookings\n  * Push notification reminders\n  * Loyalty programs\n* Auto repair shops\n  * Tracking status of repair\n  * Authorizing proposed fixes\n* Lawyer's offices\n  * Scheduling appointments\n  * Delivering consultations via WebRTC video\n* Cities\n  * Payment of public utilities\n  * Public parking, fees and fines\n* Doctor clinics\n  * Appointment scheduling\n  * Requesting a call back for a medical question\n  * Viewing medical records\n  * Viewing/paying medical bills\n* Churches\n  * Member directories\n  * Online giving\n  * Publishing events\n* Schools\n  * Updates/notifications\n  * Parent teacher communication and scheduling\n* Coffee shops\n  * Order-ahead functionality (a. la. Starbucks, but for any coffee shop)\n  * Location-based info, what music is playing, etc.\n  * In-store ordering via tablets on tables\n\nIf you build one of these, and make a lot of money I'd gladly accept 1% of your profits 🤓 .\n\n## This isn't actually new, Henrik\n\nI suppose you're right, you could argue it's just a content management system with some industry-specific functionality baked in. But, doing this with PWAs takes it to a different level because it actually makes it relevant to our mobile lives.\n\nThere's an entire class of problems that could arguably be solved once for a given industry and PWA tech ensures they can integrate into our mobile experiences.\n\nThis basic idea has intrigued me for a very long time. That is, the concept of using a web app to essentially generate customized apps for everyone in a certain niche. I first built something like this _[8 years ago](https://vimeo.com/8254856)_ using jQTouch and Django.\n\n**Site note:** Some of you will note that there are people doing this type of thing with native apps, they're sometimes referred to as \"templated apps\". I would argue, however, that most of these really shouldn't be native apps at all because without the automatic delivery and discovery via the company's website it's not likely that many people will download, install, and actually use these.\n\n## Ok that's a nice theory, but is it doable?\n\nWell, umm… so I did this. I've quietly built a business that does exactly what I've been describing. Don't worry, unless you're involved with a non-profit you're not the target audience.\n\nThe service has been in private beta for some time, but is now open to public as of last week. It's called [Speedy](https://speedy.gift) if you're interested you can read more about what it provides here: [https://speedy.gift](https://speedy.gift). But, for our purposes in this post, it lets non-profits configure their own PWAs for giving them money online using Apple Pay, Google Pay, or credit cards. The whole thing is optimized for removing barriers to giving with a smartphone.\n\n<img class='border' src='/images/3/projects.jpg' width='560' alt='screenshot of admin tool for configuring fundraising projects'/>\n\nIf you're a U.S. based non-profit organization I'm not aware of any faster or easier way to start accepting online donations. It's simply a dynamically generated PWA served on a sub-domain of their choosing (unfortunately, for the time being it's limited to the U.S. for legal reasons).\n\nThe very first bit of setup for a new organization in Speedy is to pick a sub-domain. From the instant they complete that step they are now the proud owners of a PWA for their organization. They can literally start to collect donations through their own PWA in less than 5 minutes of setup. **This would not even be possible with templated native apps**.\n\nAlso, just to make things interesting, everything in the generated app and the admin itself, for that matter, _updates in real-time_. This means as you use the admin tool to configure your PWA you can have another device open to your donation app and watch changes being applied to your app as you change them in the admin tool.\n\n> > As anyone donates, all the charts, graphs, and lists in both the donation PWA and the admin site update in real-time.\n\n## So you configure a PWA with an admin tool?\n\nYep, and obviously, it's a PWA too! I mean, why wouldn't it be?!\n\nWe use an iframe to embed the PWA you're configuring _into_ the admin tool so you can see your changes applied in real-time. There's no need for us to build a preview of the app, instead we just show you the PWA itself _inside_ the other PWA!\n\nSo it's not just a PWA spawning PWAs…\n\n> > It's PWA inception!\n\nHere's another screenshot showing the admin tool where you can configure the icon and app name:\n\n<img class='border' src='/images/3/app-icon.jpg' width='560' alt='screenshot of admin tool for configuring the donation app icon'/>\n\nIf you're familiar with PWAs you know that these details are configured using a [Web App Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest) which is just a JSON file. So, that part is pretty straightforward to generate on the fly.\n\n## This is all just silly, Henrik!\n\nMaybe. But, is it though?! So far, in a small private beta we've helped a handful or organizations collect over $60,000 in donations through those generated PWAs and the feedback has been overwhelmingly positive from both the orgs and the donors.\n\nAs it turns out, the combination of making it incredibly easy to donate and being able to see progress toward the fundraising goals animate in real-time as donations come in is _highly_ motivating for donors.\n\nIn addition we also have a view of the fundraising project designed for display on large screens. So, it can put it up on a projector as a live dashboard in front of an audience:\n\n<img class='border' src='/images/3/projector.jpg' width='560' alt='projector showing speedy in front of live audience'/>\n\nOr a TV in a public space:\n\n<img class='border' src='/images/3/tv.jpg' width='560' alt='man donating with phone while standing in front of TV with speedy displayed'/>\n\nThis view is also just a page on the PWA that includes support for going into full-screen mode. This means it's super simple to put it on a projector or just use an inexpensive [Chromecast](https://store.google.com/product/chromecast_2015) to show it on a TV.\n\nThe web is so versatile! Same app can be used on the phone or on a huge projector. Pretty sweet, right?! Anyway, If you're involved with a non-profit you should probably go [sign up for Speedy](https://speedy.gift) to try it out.\n\n_But_, remember how I said this whole approach enables new business models? Speedy is a case in point. If we were generating native app builds, there's no possible way we could let organizations start with zero up-front costs like we do.\n\n## How does it all work?\n\nReally well, thanks! 😜 If you're a dev you're probably wondering how it's built.\n\nI'll do more technical breakdowns in other posts, but at a high level it's built with:\n\n* Preact\n* Redux\n* Redux Bundler (a soon-to-be open sourced thing I made for minimizing redux boilerplate)\n* Firebase\n* Stripe Connect, Stripe Elements\n* GraphQL API for faster-than-Firebase initial fetches\n* The Web App Manifest is served dynamically by the API\n* sw-toolbox for service worker stuff (will likely update to Workbox soon-ish)\n\n## What's next?\n\nThere's still a lot I want to do to build on these ideas and techniques. But at this point I've at least proven the core concept to myself. That's why I figured it was time to share it.\n\nI'll be blogging more about some of the technical aspects of this stuff in the future and I'm also in the process of writing a second book. The book is about Redux patterns that I've found really helpful in building Speedy and the work I did for Starbucks.\n\nObviously, if you're involved with a non-profit in any way, I'd love to hear your thoughts on [Speedy](https://speedy.gift) itself.\n\nIf you have questions or whatnot feel free to email me: [henrik@joreteg.com](mailto:henrik@joreteg.com) or follow me on Twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg).\n\nSee ya on the Interwebz ❤️","outputFile":"/blog/pwa-spawns-pwas.html","html":"<p><strong>TLDR; The ability to build apps with web technology isn&#39;t just another way to build the same thing. It enables a whole new category of services that didn&#39;t make financial sense previously. As proof, I also introduce a real service that I&#39;ve built for non-profits called <a href=https://speedy.gift>Speedy</a> that generates PWAs on the fly and is built on these ideas.</strong></p><p>If you&#39;ve seen any of my writing about PWAs (Progressive Web Apps), you already know that I&#39;m a fan.</p><p>That is because I believe that the core idea of building ad-hoc, app-like experiences that don&#39;t require an install step is transformative to how we use our Fancy Pocket Computer Thingies™️. If you want to get a background on PWAs and <em>why</em> I think they&#39;re such a big deal read or watch my <a href=/blog/betting-on-the-web>&quot;Betting on the Web&quot;</a> post/talk.</p><p>But, the short version is that The Web has finally gotten &quot;good enough&quot; for making first-class app experiences.</p><a name=a-few-quick-supporting-anecdotes class=anchor href=#a-few-quick-supporting-anecdotes><h2><span class=header-link></span>A few quick supporting anecdotes</h2></a><p>I&#39;ve been happily using the <a href=https://mobile.twitter.com>Twitter Lite</a> as my only Twitter client on my phone since it was first launched. I recently I did the same for Instagram, their PWA is coming along nicely and even though it may lack a few features for the time being, I&#39;ve made the switch.</p><p>I also recently helped Starbucks build/ship <a href=https://app.starbucks.com>their PWA</a> (U.S.-only for the time being).</p><p>There are many, many more, examples of companies investing in PWAs. All this to say this isn&#39;t theoretical; it&#39;s already happening.</p><a name=that39s-nice-henrik-but-users-don39t-care-how-the-app-was-built class=anchor href=#that39s-nice-henrik-but-users-don39t-care-how-the-app-was-built><h2><span class=header-link></span>That&#39;s nice Henrik, but users don&#39;t care how the app was built!</h2></a><p><strong>You&#39;re absolutely right</strong>. Once it&#39;s on their device, they don&#39;t care whether it&#39;s powered by web tech or is running native code for their platform. But, that&#39;s actually kind of the point! We can now build the same experience and deliver it in less time than it takes to load the typical boring ol&#39; website. I would argue that users _do_ care about whether or not they have to go install stuff from an app store or not, but I digress. For the purposes of this post <strong>let&#39;s assume users don&#39;t care at all.</strong></p><blockquote><blockquote><p>What this <em>does</em>, however, is change the types of things that make sense for us to build as developers.</p></blockquote></blockquote><p>Let&#39;s take an example of a local bike shop. Should they have an app? If we&#39;re talking about an app in the traditional sense: absolutely not.</p><p>There&#39;s a very low chance that a bike shop owner could justify dropping $30k+ to a software company to build a custom native app for her. I mean, why would she?! Realistically, unless there&#39;s some <em>serious</em> value or incentive she can offer to customers for installing it, they&#39;re simply not going to do it.</p><blockquote><blockquote><p>It is <em>extremely</em> unlikely that it investing in custom app development would be a wise investment for her.</p></blockquote></blockquote><p>But that&#39;s not to say that there aren&#39;t aspects of her business where she could benefit from providing <em>a greater level of interactivity with her customers</em>. What if instead of her bike shop website just being a simple page with contact details and a pic of the shop it was… wait for it… ✨a PWA!✨</p><p>It could load just as fast as a simple site, but also let her do more. It could show off current inventory, highlight sale items, and maybe let loyal customers track their purchases over time to earn rewards? Or let folks track status of their bike repair. Perhaps there are a few of her most loyal customers who would actually want to add her shop&#39;s PWA to their home screens? Or maybe she could have a way to do push notifications about special events, or group rides.</p><p>For many small businesses, keeping loyal customers engaged and coming back is their life-blood. Therefore, anything that helps them do that is <em>hugely</em> valuable.</p><blockquote><blockquote><p>There are so many use-cases that don&#39;t justify the cost of custom software development but could still benefit from a an app-like experience!</p></blockquote></blockquote><a name=so-what-are-we-supposed-to-do-with-this-information class=anchor href=#so-what-are-we-supposed-to-do-with-this-information><h2><span class=header-link></span>So what are we supposed to do with this information?</h2></a><p>Perhaps we can use the inherently dynamic nature of the web to make PWAs for things that previously didn&#39;t justify the investment?</p><p>What I mean is that &quot;bike shop software&quot; can likely be reduced into a fairly constrained and generic set of potential requirements.</p><blockquote><blockquote><p>If she could pay ~$100/mo for a service made for bike shops where she could customize, configure, and publish a PWA that helped her better engage her customers that&#39;d be a no-brainer!</p></blockquote></blockquote><p>There ya go, free business idea: build the <em>ultimate bike shop</em> management tool and make it so each bike shop customer can generate/configure a PWA for their customers.</p><p>A few more businesses off the top of my head that could benefit from something like this:</p><ul><li>Hair salons<ul><li>Appointment bookings</li><li>Push notification reminders</li><li>Loyalty programs</li></ul></li><li>Auto repair shops<ul><li>Tracking status of repair</li><li>Authorizing proposed fixes</li></ul></li><li>Lawyer&#39;s offices<ul><li>Scheduling appointments</li><li>Delivering consultations via WebRTC video</li></ul></li><li>Cities<ul><li>Payment of public utilities</li><li>Public parking, fees and fines</li></ul></li><li>Doctor clinics<ul><li>Appointment scheduling</li><li>Requesting a call back for a medical question</li><li>Viewing medical records</li><li>Viewing/paying medical bills</li></ul></li><li>Churches<ul><li>Member directories</li><li>Online giving</li><li>Publishing events</li></ul></li><li>Schools<ul><li>Updates/notifications</li><li>Parent teacher communication and scheduling</li></ul></li><li>Coffee shops<ul><li>Order-ahead functionality (a. la. Starbucks, but for any coffee shop)</li><li>Location-based info, what music is playing, etc.</li><li>In-store ordering via tablets on tables</li></ul></li></ul><p>If you build one of these, and make a lot of money I&#39;d gladly accept 1% of your profits 🤓 .</p><a name=this-isn39t-actually-new-henrik class=anchor href=#this-isn39t-actually-new-henrik><h2><span class=header-link></span>This isn&#39;t actually new, Henrik</h2></a><p>I suppose you&#39;re right, you could argue it&#39;s just a content management system with some industry-specific functionality baked in. But, doing this with PWAs takes it to a different level because it actually makes it relevant to our mobile lives.</p><p>There&#39;s an entire class of problems that could arguably be solved once for a given industry and PWA tech ensures they can integrate into our mobile experiences.</p><p>This basic idea has intrigued me for a very long time. That is, the concept of using a web app to essentially generate customized apps for everyone in a certain niche. I first built something like this <em><a href=https://vimeo.com/8254856>8 years ago</a></em> using jQTouch and Django.</p><p><strong>Site note:</strong> Some of you will note that there are people doing this type of thing with native apps, they&#39;re sometimes referred to as &quot;templated apps&quot;. I would argue, however, that most of these really shouldn&#39;t be native apps at all because without the automatic delivery and discovery via the company&#39;s website it&#39;s not likely that many people will download, install, and actually use these.</p><a name=ok-that39s-a-nice-theory-but-is-it-doable class=anchor href=#ok-that39s-a-nice-theory-but-is-it-doable><h2><span class=header-link></span>Ok that&#39;s a nice theory, but is it doable?</h2></a><p>Well, umm… so I did this. I&#39;ve quietly built a business that does exactly what I&#39;ve been describing. Don&#39;t worry, unless you&#39;re involved with a non-profit you&#39;re not the target audience.</p><p>The service has been in private beta for some time, but is now open to public as of last week. It&#39;s called <a href=https://speedy.gift>Speedy</a> if you&#39;re interested you can read more about what it provides here: <a href=https://speedy.gift>https://speedy.gift</a>. But, for our purposes in this post, it lets non-profits configure their own PWAs for giving them money online using Apple Pay, Google Pay, or credit cards. The whole thing is optimized for removing barriers to giving with a smartphone.</p><p><img class=border src=/images/3/projects.jpg width=560 alt=\"screenshot of admin tool for configuring fundraising projects\"></p><p>If you&#39;re a U.S. based non-profit organization I&#39;m not aware of any faster or easier way to start accepting online donations. It&#39;s simply a dynamically generated PWA served on a sub-domain of their choosing (unfortunately, for the time being it&#39;s limited to the U.S. for legal reasons).</p><p>The very first bit of setup for a new organization in Speedy is to pick a sub-domain. From the instant they complete that step they are now the proud owners of a PWA for their organization. They can literally start to collect donations through their own PWA in less than 5 minutes of setup. <strong>This would not even be possible with templated native apps</strong>.</p><p>Also, just to make things interesting, everything in the generated app and the admin itself, for that matter, <em>updates in real-time</em>. This means as you use the admin tool to configure your PWA you can have another device open to your donation app and watch changes being applied to your app as you change them in the admin tool.</p><blockquote><blockquote><p>As anyone donates, all the charts, graphs, and lists in both the donation PWA and the admin site update in real-time.</p></blockquote></blockquote><a name=so-you-configure-a-pwa-with-an-admin-tool class=anchor href=#so-you-configure-a-pwa-with-an-admin-tool><h2><span class=header-link></span>So you configure a PWA with an admin tool?</h2></a><p>Yep, and obviously, it&#39;s a PWA too! I mean, why wouldn&#39;t it be?!</p><p>We use an iframe to embed the PWA you&#39;re configuring <em>into</em> the admin tool so you can see your changes applied in real-time. There&#39;s no need for us to build a preview of the app, instead we just show you the PWA itself <em>inside</em> the other PWA!</p><p>So it&#39;s not just a PWA spawning PWAs…</p><blockquote><blockquote><p>It&#39;s PWA inception!</p></blockquote></blockquote><p>Here&#39;s another screenshot showing the admin tool where you can configure the icon and app name:</p><p><img class=border src=/images/3/app-icon.jpg width=560 alt=\"screenshot of admin tool for configuring the donation app icon\"></p><p>If you&#39;re familiar with PWAs you know that these details are configured using a <a href=https://developer.mozilla.org/en-US/docs/Web/Manifest>Web App Manifest</a> which is just a JSON file. So, that part is pretty straightforward to generate on the fly.</p><a name=this-is-all-just-silly-henrik class=anchor href=#this-is-all-just-silly-henrik><h2><span class=header-link></span>This is all just silly, Henrik!</h2></a><p>Maybe. But, is it though?! So far, in a small private beta we&#39;ve helped a handful or organizations collect over $60,000 in donations through those generated PWAs and the feedback has been overwhelmingly positive from both the orgs and the donors.</p><p>As it turns out, the combination of making it incredibly easy to donate and being able to see progress toward the fundraising goals animate in real-time as donations come in is <em>highly</em> motivating for donors.</p><p>In addition we also have a view of the fundraising project designed for display on large screens. So, it can put it up on a projector as a live dashboard in front of an audience:</p><p><img class=border src=/images/3/projector.jpg width=560 alt=\"projector showing speedy in front of live audience\"></p><p>Or a TV in a public space:</p><p><img class=border src=/images/3/tv.jpg width=560 alt=\"man donating with phone while standing in front of TV with speedy displayed\"></p><p>This view is also just a page on the PWA that includes support for going into full-screen mode. This means it&#39;s super simple to put it on a projector or just use an inexpensive <a href=https://store.google.com/product/chromecast_2015>Chromecast</a> to show it on a TV.</p><p>The web is so versatile! Same app can be used on the phone or on a huge projector. Pretty sweet, right?! Anyway, If you&#39;re involved with a non-profit you should probably go <a href=https://speedy.gift>sign up for Speedy</a> to try it out.</p><p><em>But</em>, remember how I said this whole approach enables new business models? Speedy is a case in point. If we were generating native app builds, there&#39;s no possible way we could let organizations start with zero up-front costs like we do.</p><a name=how-does-it-all-work class=anchor href=#how-does-it-all-work><h2><span class=header-link></span>How does it all work?</h2></a><p>Really well, thanks! 😜 If you&#39;re a dev you&#39;re probably wondering how it&#39;s built.</p><p>I&#39;ll do more technical breakdowns in other posts, but at a high level it&#39;s built with:</p><ul><li>Preact</li><li>Redux</li><li>Redux Bundler (a soon-to-be open sourced thing I made for minimizing redux boilerplate)</li><li>Firebase</li><li>Stripe Connect, Stripe Elements</li><li>GraphQL API for faster-than-Firebase initial fetches</li><li>The Web App Manifest is served dynamically by the API</li><li>sw-toolbox for service worker stuff (will likely update to Workbox soon-ish)</li></ul><a name=what39s-next class=anchor href=#what39s-next><h2><span class=header-link></span>What&#39;s next?</h2></a><p>There&#39;s still a lot I want to do to build on these ideas and techniques. But at this point I&#39;ve at least proven the core concept to myself. That&#39;s why I figured it was time to share it.</p><p>I&#39;ll be blogging more about some of the technical aspects of this stuff in the future and I&#39;m also in the process of writing a second book. The book is about Redux patterns that I&#39;ve found really helpful in building Speedy and the work I did for Starbucks.</p><p>Obviously, if you&#39;re involved with a non-profit in any way, I&#39;d love to hear your thoughts on <a href=https://speedy.gift>Speedy</a> itself.</p><p>If you have questions or whatnot feel free to email me: <a href=mailto:henrik@joreteg.com>henrik@joreteg.com</a> or follow me on Twitter: <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a>.</p><p>See ya on the Interwebz ❤️</p>","preview":"<p><strong>TLDR; The ability to build apps with web technology isn&#39;t just another way to build the same thing. It enables a whole new category of services that didn&#39;t make financial sense previously. As proof, I also introduce a real service that I&#39;ve built for non-profits called <a href=https://speedy.gift>Speedy</a> that generates PWAs on the fly and is built on these ideas.</strong></p>"},{"title":"Betting on the Web","date":"2017-09-08T17:00:00.000Z","tags":"pwa, mobile, web","slug":"betting-on-the-web","url":"/blog/betting-on-the-web","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2017/09/betting-on-the-web.md","markdown":"*Note: I just spoke at [Coldfront 2017](https://2017.coldfront.co) about why I’m such a big proponent of the Web. What follows is essentially that talk as a blog post (I’ll add a link to the video once it is published).*\n\n*Also: the Starbucks PWA mentioned in the talk has shipped! 🎉*\n\nI’m *not* going to tell you what to do. Instead, I’m going to explain why I’ve chosen to bet my whole career on this crazy Web thing. \"Betting\" sounds a bit haphazard, it’s more calculated than that. It would probably be better described as \"investing.\"\n\nInvesting what? Our time and attention.\n\nMany of us only have maybe 6 or so *really* productive hours per day when we’re capable of being super focused and doing our absolute best work. So how we chose to invest that very limited time is kind of a big deal. Even though I really enjoy programming I rarely do it aimlessly just for the pure joy of it. Ultimately, I’m investing that productive time expecting to get *some kind of return* even if it’s just mastering something or solving a difficult problem.\n\n## \"So what, what’s your point?\"\n\n>> More than most of us realize we are *constantly* investing\n\nSure, someone may be paying for our time directly but there’s more to it than just trading hours for money. In the long run, what we chose to invest our professional efforts into has other effects:\n\n**1. Building Expertise:** We learn as we work and gain valuable experience in the technologies and platform we’re investing in. That expertise impacts our future earning potential and what types of products we’re capable of building.\n\n**2. Building Equity:** Hopefully we’re generating equity and adding value to whatever product we’re building.\n\n**3. Shaping tomorrow’s job market:** We’re building tomorrow’s legacy code today™. Today’s new hotness is tomorrow’s maintenance burden. In many cases the people that initially build a product or service are not the ones that ultimately maintain it. This means the technology choices we make when building a new product or service, determine whether or not there will be jobs later that require expertise in that particular platform/technology. So, those tech choices *literally shape tomorrow’s job market!*\n\n**4. Body of knowledge:** As developers, we’re pretty good at sharing what we learn. We blog, we \"Stack-Overflow\", etc. These things all contribute to the corpus of knowledge available about that given platform which adds significant value by making it easier/faster for others to build things using these tools.\n\n**5. Open Source:** We solve problems and share our work. When lots of developers do this it adds *tremendous value* to the technologies and platforms these tools are for. The sheer volume of work that we *don’t have to do* because we can use someone else’s library that already does it is mind-boggling. Millions and millions of hours of development work are available to us for free with a simple `npm install`.\n\n**6. Building apps for users on that platform:** Last but not least, without apps there is no platform. By making more software available to end users, we’re contributing significant value to the platforms that run our apps.\n\nLooking at that list, the last four items are not about *us* at all. They represent other significant long-term impacts.\n\n>> We often have a broader impact than we realize\n\nWe’re not just investing time into a job, we're also shaping the platform, community, and technologies we use.\n\nWe’re going to come back to this, but hopefully, recognizing that greater impact can help us make better investments.\n\n## With all investing comes *risk*\n\nWe can’t talk about investing without talking about risk. So what are some of the potential risks?\n\n## Are we building for the right platform?\n\nPlatform stability is indeed A Thing™. Just ask a Flash developer, Windows Phone developer, or Blackberry developer. Platforms *can* go away.\n\nIf we look at those three platforms, what do they have in common? They’re *closed* platforms. What I mean is there’s a single controlling interest. When you build for them, you’re building for a specific operating system and coding against a particular implementation as opposed to coding against a set of *open standards*. You could argue, that at least to some degree, Flash died because of its \"closed-ness\". Regardless, one thing is clear from a risk mitigation perspective: open is better than closed.\n\nthe Web is *incredibly* open. It would be quite difficult for any one entity to kill it off.\n\nNow, for Windows Phone/Blackberry it failed due to a lack of interested users... or was it lack of interested developers??\n\n<div class=\"center\">\n  <img src=\"/images/2/ballmer.jpg\" width=\"320\" height=\"180\" />\n</div>\n\nMaybe if Ballmer ☝️ has just yelled \"developers\" *one more time* we’d all have Windows Phones in our pockets right now 😜.\n\nFrom a risk mitigation perspective, two things are clear with regard to platform stability:\n\n1. Having *many users* is better than having few users\n2. Having *more developers* building for the platform is better than having few developers\n\n>> There is no bigger more popular open platform than\n>> the Web\n\n## Are we building the right software?\n\nMany of us are building apps. Well, we used to build \"applications\" but that wasn’t nearly cool enough. So now we build \"apps\" instead 😎.\n\nWhat does \"app\" mean to a user? This is important because I think it’s changed a bit over the years. To a user, I would suggest it basically means: \"a thing I put on my phone.\"\n\nBut for our purposes I want to get a bit more specific. I’d propose that an app is really:\n\n1. An \"ad hoc\" user interface\n2. That is local(ish) to the device\n\nThe term \"ad hoc\" is Latin and translates to **\"for this\"**. This actually matches pretty closely with what Apple’s marketing campaigns have been teaching the masses:\n\n> There’s an app **for that**\n>\n> – Apple\n\nThe point is it helps you *do* something. The emphasis is on action. I happen to think this is largely the difference between a \"site\" and an \"app\". A news site for example has articles that are resources in and of themselves. Where a news app is software that runs on the device that helps you consume news articles.\n\nAnother way to put it would be that site is more like a book, while an app is a tool.\n\n## Should we be building apps at all?!\n\nRemember when chatbots were supposed to take over the world? Or perhaps we’ll all be walking around with augmented reality glasses and that’s how we’ll interact with the world?\n\nI’ve heard it said that \"the future app is *no* app\" and virtual assistants will take over everything.\n\n<div class=\"center\">\n  <img src=\"/images/2/echo.png\" width=\"360\" height=\"372\" />\n</div>\n\nI’ve had one of these sitting in my living room for a couple of years, but I find it all but useless. It’s just a nice bluetooth speaker that I can yell at to play me music.\n\nBut I find it very interesting that:\n\n>> Even Alexa has an app!\n\nWhy? Because there’s no screen! As it turns out these \"ad hoc visual interfaces\" are extremely efficient.\n\nSure, I can yell out \"Alexa, what’s the weather going to be like today\" and I’ll hear a reply with high and low and whether it’s cloudy, rainy, or sunny. But in that same amount of time, I can pull my phone out tap the weather app and before Alexa can finish telling me those 3 pieces of data, I can visually scan the entire week’s worth of data, air quality, sunrise/sunset times, etc. It’s just *so much more* efficient as a mechanism for consuming this type of data.\n\nAs a result of that natural efficiency, I believe that having a visual interface is going to continue to be useful for all sorts of things for a long time to come.\n\nThat’s *not* to say virtual assistants aren’t useful! Google Assistant on my Pixel is quite useful in part because it can show me answers and can tolerate vagueness in a way that an app with a fixed set of buttons never could.\n\nBut, as is so often the case with new useful tech, rarely does it complete replace everything that came before it, instead, it augments what we already have.\n\n## If apps are so great why are we so \"apped out\"?\n\nHow do we explain that supposed efficiency when there’s data like this?\n\n- [65% of smartphone users download zero apps per month](https://qz.com/253618/most-smartphone-users-download-zero-apps-per-month/)\n- [More than 75% of app downloads open an app once and never come back](http://fortune.com/2016/05/19/app-economy/)\n\nI think to answer that we have to really look at what isn’t working well.\n\n## What sucks about apps?\n\n1. **Downloading them certainly sucks.** No one wants to open an app store, search for the app they’re trying to find, then wait to download the huge file. These days a 50mb app is pretty small. Facebook for iOS 346MB, Twitter iOS 212MB.\n2. **Updating them sucks.** Every night I plug in my phone I download a whole slew of app updates that I, as a user, **could not possibly care less about**. In addition, many of these apps are things I installed *once* and will **never open again, ever!**. I’d love to know the global stats on how much bandwidth has been wasted on app updates for apps that were never opened again.\n3. **Managing them sucks.** Sure, when I first got an iPhone ages ago and could first download apps my home screen was impeccable. Then when we got folders!! Wow... what an amazing development! Now I could finally put all those pesky uninstallable Apple apps in a folder called \"💩\" and pretend they didn’t exist. But now, my home screen is a bit of a disaster. Sitting there dragging apps around is not my idea of a good time. So eventually things get all cluttered up again.\n\nThe thing I’ve come to realize, is this:\n\n>> We don’t care how they got there.\n>> We only care that they’re *there* when we need them.\n\nFor example, I love to go mountain biking and I enjoy tracking my rides with an app called Strava. I get all geared up for my ride, get on my bike and then go, \"Oh right, gotta start Strava.\" So I pull out my phone *with my gloves on* and go: \"Ok Google, open Strava\".\n\nI *could not care less* about where that app was or where it came from when I said that.\n\nI don’t care if it was already installed, I don’t care if it never existed on my home screen, or if it was generated out of thin air on the spot.\n\n>> Context is *everything*!\n\nIf I’m at a parking meter, I want the app *for that*.\nIf I’m visiting Portland, I want their public transit app.\n\nBut I certainly *do not* want it as soon as I’ve left.\n\nIf I’m at a conference, I might want a conference app to see the schedule, post questions to speakers, or whatnot. But wow, talk about something that quickly becomes worthless as soon as that conference is over!\n\nAs it turns out the more \"ad hoc\" these things are, the better! The more *disposable* and *re-inflatable* the better!\n\nWhich also reminds me of something that I feel like we often forget. We always assume people want our shiny apps and we measure things like \"engagement\" and \"time spent in the app\" when really, and there certainly are exceptions to this such as apps that are essentially entertainment, but often...\n\n>> People don’t want to use your app.\n>> They want *to be done* using your app.\n\n## Enter PWAs\n\nI’ve been contracting with Starbucks for the past 18 months. They’ve taken on the ambitious project of essentially re-building a lot of their web stuff in Node.js and React. One of the things I’ve helped them with (and pushed hard for) was to build a PWA (Progressive Web App) that could provide similar functionality as their native apps. Coincidentally it was launched today: [https://preview.starbucks.com](https://preview.starbucks.com)!\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">My team at <a href=\"https://twitter.com/Starbucks\">@Starbucks</a> has been building a PWA, and it&#39;s now in beta! Check it out at <a href=\"https://t.co/tEUXM8BLgP\">https://t.co/tEUXM8BLgP</a> if you&#39;re an existing customer! <a href=\"https://t.co/b9IJ3HbGpx\">pic.twitter.com/b9IJ3HbGpx</a></p>&mdash; David Brunelle (@davidbrunelle) <a href=\"https://twitter.com/davidbrunelle/status/905931990444244995\">September 7, 2017</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nThis gives is a nice real world example:\n\n- Starbucks iOS: 146MB\n- Starbucks PWA: ~600KB\n\nThe point is there’s a *tremendous* size difference.\n\nIt’s 0.4% of the size. To put it differently, I could download the PWA **243 times** in the same amount of time it would take to download the iOS app. Then, of course on iOS it then also still has to install and boot up!\n\nPersonally, I’d have loved it if the app ended up even smaller and there are plans to shrink it further. But even still, they’re *not even on the same planet* in terms of file-size!\n\nMarket forces are *strongly* aligned with PWAs here:\n\n- Few app downloads\n- User acquisition is *hard*\n- User acquisition is *expensive*\n\nIf the goal is to get people to sign up for the rewards program, that type of size difference could very well make the difference of getting someone signed up and using the app experience (via PWA) by the time they reach the front of the line at Starbucks or not.\n\nUser acquisition is hard enough already, the more time and barriers that can be removed from that process, the better.\n\n## Quick PWA primer\n\nAs mentioned, PWA stands for \"Progressive Web Apps\" or, as I like to call them: \"Web Apps\" 😄\n\nPersonally I’ve been trying to build what a user would define as an \"app\" with web technology for *years*. But until PWAs came along, as hard as we tried, you couldn’t quite build a *real app* with just web tech. Honestly, I kinda hate myself for saying that, but in terms of something that a user would understand as an \"app\" I’m afraid that statement has probably true until very recently.\n\nSo what’s a PWA? As one of its primary contributors put it:\n\n> It’s just a website that took all the right vitamins.\n>\n> – Alex Russell\n\nIt involves a few specific technologies, namely:\n\n- Service Worker. Which enable true reliability on the web. What I mean by that is I can build an app that as long as you loaded it while you were online, from then on it will *always* open, even if you’re not. This puts it on equal footing with other apps.\n- HTTPS. Requires encrypted connections\n- Web App Manifest. A simple JSON file that describes your application. What icons to use is someone adds it to their home screen, what its name is, etc.\n\nThere are plenty of other resources about PWAs on the web. The point for my purposes is:\n\n>> It is now possible to build PWAs that are *indistinguishable* from their native counter parts\n\nThey can be up and running in a fraction of the time whether or not they were already \"installed\" and unlike \"apps\" can be saved as an app on the device *at the user’s discretion!*\n\nEssentially they’re really great for creating \"ad hoc\" experiences that can be \"cold started\" on a whim nearly as fast as if it were already installed.\n\nI’ve said it before and I’ll say it again:\n\n> PWAs are the biggest thing to happen to the mobile web since the iPhone.\n>\n> – Um... that was me\n\n## Let’s talk Internet of things\n\nI happen to think that PWAs + IoT = ✨ MAGIC ✨. As several smart folks have pointed out.\n\nThe one-app-per-device approach to smart devices probably isn’t particularly smart.\n\nIt doesn’t scale well and it completely fails in terms of \"ad hoc\"-ness. Sure, if I have a Nest thermostat and Phillips Hue lightbulbs, it’s reasonable to have two apps installed. But even that sucks as soon as I want someone else to be able to use control them. If *I just let you into my house*, trust me... I’m perfectly happy to let you flip a light switch, you’re in my house, after all. But for the vast majority of these things there’s no concept of \"nearby apps\" and, it’s silly for my guest (or a house-sitter) to download an app they don’t actually want, just so I can let them control my lights.\n\nThe whole \"nearby apps\" thing has so many uses:\n\n- thermostat\n- lights\n- locks\n- garage doors\n- parking meter\n- setting refrigerator temp\n- conference apps\n\nToday there are lots of new capabilities being added to the web to enable web apps to interact with physical devices in the real world. Things like WebUSB, WebBluetooth, WebNFC, and efforts like [Physical Web](https://google.github.io/physical-web/). Even for things like Augmented (and Virtual) reality, the idea of the items we want to interact with having URLs makes so much sense and I can’t imagine a better, more flexible use of those URLs than for them to point to a PWA that lets you interact with that device!\n\n## Forward looking statements...\n\nI’ve been talking about all this in terms of investing. If you’ve ever read any company statement that discusses the future you always see this line explaining that things that are about to be discussed contains \"forward looking statements\" that may or may not ultimately happen.\n\nSo, here are *my* forward looking statements.\n\n### 1. PWA-only startups\n\nGiven the cost (and challenge) of user-acquisition and the quality of app you can build with PWAs these days, I feel like this is inevitable. If you’re trying to get something off the ground, it just isn’t very efficient to spin up *three whole teams* to build for iOS, Android, and the Web.\n\n### 2. PWAs listed in App Stores\n\nSo, there’s a problem with \"web only\" which is that for the good part of a decade we’ve been training users to look for apps in the app store for their given platform. So if you’re already a recognized brand, especially if you already have a native app that you’re trying to replace, it simply isn’t smart for you *not to exist* in the app stores.\n\nSo, some of this isn’t all that \"forward looking\" as it turns out [Microsoft has already committed to listing PWAs in the Windows Store](https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/), more than once!\n\n**They haven’t even finished implementing Service Worker in Edge yet!** But they’re already committing hard to PWAs. In addition to post linked above, one of their lead Developer Relations folks, Aaron Gustafson just [wrote an article for A List Apart](https://alistapart.com/article/yes-that-web-project-should-be-a-pwa) telling everyone to build PWAs.\n\nBut if you think about it from their perspective, of course they should do that! As I said earlier they’ve struggled to attract developer to build for their mobile phones. In fact, they’ve at times *paid* companies to write apps for them simply to make sure apps exist so that users will be able to have apps they want when using a Windows Phone. Remember how I said developer time is a scarce resource and without apps, the platform is worthless? So *of course* they should add first class support for PWAs. If you build a PWA like a lot of folks are doing then TADA!!! 🎉  You just made a Windows/Windows Phone app!\n\nI’m of the opinion that the writing is on the wall for Google to do the same thing. It’s pure speculation, but it certainly seems like they are taking steps that suggest they may be planning on listing PWAs too. Namely that the Chrome folks recently shipped a feature referred to as \"WebAPKs\" for Chrome stable on Android (yep, everyone). In the past I’ve [explained in more detail](https://joreteg.com/blog/installing-web-apps-for-real) why I think this is a big deal. But a shorted version would be that before this change, sure you could save a PWA to your home screen... *But*, in reality it was actually a glorified bookmark. That’s what changes with WebAPKs. Instead, when you add a PWA to your home screen it generates and \"side loads\" an actual `.apk` file on the fly. This allows that PWA to enjoy some privileges that were simply impossible until the operating system recognized it as \"an app.\" For example:\n\n- You can now mute push notifications for a specific PWA without muting it for all of Chrome.\n- The PWA is listed in the \"app tray\" that shows all installed apps (previously it was just the home screen).\n- You can see power usage, and permissions granted to the PWA just like any other app.\n- The app developer can now update the icon for the app by publishing an update to the app manifest. Before, there was no way to updated the icon once it had been added.\n- And a slew of other similar benefits...\n\nIf you’ve ever installed an Android app from a source other than the Play Store (or carriers/OEMs store) you know that you have to flip a switch in settings to allow installs from \"untrusted sources\". So, how then, you might ask, can they generate and install an actual `.apk` file for a PWA without requiring that you change that setting? As it turns out the answer is quite simple: Use a trusted source!\n\n>> As it turns out WebAPKs are managed through Google Play Services!\n\nI’m no rocket scientist, but based on their natural business alignment with the web, their promotion of PWAs, the lengths they’ve gone to to grant PWAs equal status on the operating system as native apps, it only seems natural that they’d eventually *list them in the store*.\n\nAdditionally, if Google did start listing PWAs in the Play Store both them and Microsoft would be doing it *leaving Apple sticking out like a sore thumb and looking like the laggard*. Essentially, app developers would be able to target a *massive* number of users on a range of platforms with a single well-built PWA. But, just like developers grew to despise IE for not keeping up with the times and forcing them to jump through extra hoops to support it, the same thing would happen here. Apple does *not* want to be the next IE and I’ve already seen many prominent developers suggesting they already are.\n\nWhich bring us to another forward-looking statement:\n\n## 3. PWAs on iOS\n\nJust a few weeks ago the Safari folks announced that Service Worker is now [officially under development](https://webkit.org/status/#specification-service-workers).\n\n## 4. PWAs everywhere\n\nI really think we’ll start seeing them everywhere:\n\n- Inside VR/AR/MR experiences\n- Inside chat bots (again, pulling up an ad-hoc interface is so much more efficient).\n- Inside Xbox?!\n\nAs it turns out, if you look at Microsoft’s status page for Edge about Service Worker you see this:\n\n<div class=\"center\">\n  <img src=\"/images/2/edge.png\" width=\"360\" height=\"175\" />\n</div>\n\nI hinted at this already, but I also think PWAs pair very nicely with virtual assistants being able to pull up an PWA on a whim without requiring it to already be installed would add tremendous power to the virtual assistant. Incidentally, this also becomes easier if there’s a known \"registered\" name of a PWA listed in an app store.\n\nSome other fun use cases:\n\n- Apparently the new digital menu displays in McDonald’s Restaurants (at least in the U.S.) are actually a web app built with Polymer ([source](https://twitter.com/AJStacy06/status/857628546507968512)). I don’t know if there’s a Service Worker or not, but it would make sense for there to be.\n- Sports score boards!? I’m a [independent consultant](http://consulting.joreteg.com/), and someone approached me about potentially using a set of TVs and web apps to build a score keeping system at an arena. Point is, there are so many cool examples!\n\nThe web really is the universal platform!\n\n## For those who think PWAs are just a Google thing\n\nFirst off, I’m pretty sure Microsoft, Opera, Firefox, and Samsung folks would want to punch you for that. It [simply isn’t true](https://jakearchibald.github.io/isserviceworkerready/) and increasingly we’re seeing a lot more compatibility efforts between browser vendors.\n\nFor example: check out the [Web Platform Tests](http://wpt.fyi) which is essentially Continuous Integration for web features that are run against new releases of major browsers. Some folks will recall that when Apple first claimed they implemented IndexedDb in Safari, the version they shipped was essentially unusable because it had major shortcomings and bugs.\n\nNow, with the WPTs, you can drill into these features (to quite some detail) and see whether a given browser passes or fails. No more claiming \"we shipped!\" but not actually shipping.\n\n## What about feature \"x\" on platform \"y\" that we need?\n\nIt could well be that you have a need that isn’t yet covered by the web platform. In reality, that list is getting shorter and shorter, also... HAVE YOU ASKED?! Despite what it may feel like, browser vendors eagerly want to know what you’re trying to do that you can’t. If there are missing features, be loud, be nice, but from my experience it’s worth making your desires known.\n\nAlso, it doesn’t take much to wrap a web view and add hooks into the native OS that your JavaScript can call to do things that aren’t *quite* possible yet.\n\nBut that also brings me to another point, in terms of investing, as the world’s greatest hockey player said:\n\n> Skate to where the puck is going, not where it has been.\n>\n> – Wayne Gretzky\n\nBased on what I’ve outlined thus far, it could be more risky to building an entire application for a whole other platform that you ultimately may not need than to at least exhaust your options seeing what you can do with the Web first.\n\nSo to line ’em up in terms of PWA support:\n\n- Chrome: yup\n- Firefox: yup\n- Opera: yup\n- Samsung Internet ([the 3rd largest browser surprise!](https://medium.com/samsung-internet-dev/think-you-know-the-top-web-browsers-458a0a070175)): yup\n- Microsoft: huge public commitment\n- Safari: at least implementing Service Worker\n\n## Ask them add your feature!\n\nSure, it may not happen, it may take a long time but *at least* try. Remember, developers have a lot more influence over platforms than we typically realize. Make. your. voice. heard.\n\n## Side note about React-Native/Expo\n\nThese projects are run by awesome people, the tech is incredibly impressive. If you’re Facebook and you’re trying to consolidate your development efforts, for the same basic reasons as why it makes sense for them to create their on [VM for running PHP](http://hhvm.com/). They have realities to deal with at a scale that most of us will never have to deal with. Personally, I’m not Facebook.\n\nAs a side note, I find it interesting that building native apps and having as many people do that as possible, plays nicely into their advertising competition with Google.\n\nIt just so happens that Google is well positioned to capitalize off of people using the Web. Inversely, I’m fairly certain Facebook wouldn’t mind that ad revenue *not* going Google. Facebook, seemingly would much rather *be* your web, that be part of the Web.\n\nAnyway, all that aside, for me it’s also about investing well.\n\nBy building a native app you’re volunteering for a 30% app-store tax. Plus, like we covered earlier odds are that no one wants to go download your app. Also, though it seems incredibly unlikely, I feel compelled to point out that in terms of \"openness\" Apple’s App Store is very clearly *anything* but that. Apple could decide one day that they really don’t like how it’s possible to essentially circumvent their normal update/review process when you use Expo. One day they could just decide to reject all React Native apps. I really don’t think they would because of the uproar it would cause. I’m simply pointing out that it’s *their* platform and they would have *every* right to do so.\n\n## So is it all about investing for your own gain?\n\nSo far, I’ve presented all this from kind of a cold, heartless investor perspective: getting the most for your time.\n\nBut, that’s not the whole story is it?\n\nLife isn’t all about me.\nLife isn’t all about us.\n\nI want to invest in platforms that increase opportunities **for others**. Personally, I really hope the next friggin’ Mark Zuckerburg isn’t an ivy-league dude. Wouldn’t it be amazing if instead the next huge success was, I don’t know, perhaps a young woman in Nairobi or something? The thing is, if owning an iPhone is a prerequisite for building apps, it *dramatically* decreases the odds of something like that happening. I feel like the Web really is the closest thing we have to a level playing field.\n\n**I want to invest in and improve *that* platform!**\n\nThis quote really struck me and has stayed with me when thinking about these things:\n\n> If you’re the kind of person who tends to succeed in what you start,\n>\n> changing what you start could be *the most extraordinary thing* you could do.\n>\n> – Anand Giridharadas\n\nThanks for your valuable attention ❤️. I’ve presented the facts as I see them and I’ve done my best not to \"should on you.\"\n\nUltimately though, no matter how prepared we are or how much research we’ve done; investing is always a bit of a gamble.\n\nSo I guess the only thing left to say is:\n\n>> I’m all in.\n\n*Big thanks to [Addy Osmani](https://twitter.com/addyosmani) for his super helpful feedback on this post.*","outputFile":"/blog/betting-on-the-web.html","html":"<p><em>Note: I just spoke at <a href=https://2017.coldfront.co>Coldfront 2017</a> about why I’m such a big proponent of the Web. What follows is essentially that talk as a blog post (I’ll add a link to the video once it is published).</em></p><p><em>Also: the Starbucks PWA mentioned in the talk has shipped! 🎉</em></p><p>I’m <em>not</em> going to tell you what to do. Instead, I’m going to explain why I’ve chosen to bet my whole career on this crazy Web thing. &quot;Betting&quot; sounds a bit haphazard, it’s more calculated than that. It would probably be better described as &quot;investing.&quot;</p><p>Investing what? Our time and attention.</p><p>Many of us only have maybe 6 or so <em>really</em> productive hours per day when we’re capable of being super focused and doing our absolute best work. So how we chose to invest that very limited time is kind of a big deal. Even though I really enjoy programming I rarely do it aimlessly just for the pure joy of it. Ultimately, I’m investing that productive time expecting to get <em>some kind of return</em> even if it’s just mastering something or solving a difficult problem.</p><a name=quotso-what-whats-your-pointquot class=anchor href=#quotso-what-whats-your-pointquot><h2><span class=header-link></span>&quot;So what, what’s your point?&quot;</h2></a><blockquote><blockquote><p>More than most of us realize we are <em>constantly</em> investing</p></blockquote></blockquote><p>Sure, someone may be paying for our time directly but there’s more to it than just trading hours for money. In the long run, what we chose to invest our professional efforts into has other effects:</p><p><strong>1. Building Expertise:</strong> We learn as we work and gain valuable experience in the technologies and platform we’re investing in. That expertise impacts our future earning potential and what types of products we’re capable of building.</p><p><strong>2. Building Equity:</strong> Hopefully we’re generating equity and adding value to whatever product we’re building.</p><p><strong>3. Shaping tomorrow’s job market:</strong> We’re building tomorrow’s legacy code today™. Today’s new hotness is tomorrow’s maintenance burden. In many cases the people that initially build a product or service are not the ones that ultimately maintain it. This means the technology choices we make when building a new product or service, determine whether or not there will be jobs later that require expertise in that particular platform/technology. So, those tech choices <em>literally shape tomorrow’s job market!</em></p><p><strong>4. Body of knowledge:</strong> As developers, we’re pretty good at sharing what we learn. We blog, we &quot;Stack-Overflow&quot;, etc. These things all contribute to the corpus of knowledge available about that given platform which adds significant value by making it easier/faster for others to build things using these tools.</p><p><strong>5. Open Source:</strong> We solve problems and share our work. When lots of developers do this it adds <em>tremendous value</em> to the technologies and platforms these tools are for. The sheer volume of work that we <em>don’t have to do</em> because we can use someone else’s library that already does it is mind-boggling. Millions and millions of hours of development work are available to us for free with a simple <code>npm install</code>.</p><p><strong>6. Building apps for users on that platform:</strong> Last but not least, without apps there is no platform. By making more software available to end users, we’re contributing significant value to the platforms that run our apps.</p><p>Looking at that list, the last four items are not about <em>us</em> at all. They represent other significant long-term impacts.</p><blockquote><blockquote><p>We often have a broader impact than we realize</p></blockquote></blockquote><p>We’re not just investing time into a job, we&#39;re also shaping the platform, community, and technologies we use.</p><p>We’re going to come back to this, but hopefully, recognizing that greater impact can help us make better investments.</p><a name=with-all-investing-comes class=anchor href=#with-all-investing-comes><h2><span class=header-link></span>With all investing comes <em>risk</em></h2></a><p>We can’t talk about investing without talking about risk. So what are some of the potential risks?</p><a name=are-we-building-for-the-right-platform class=anchor href=#are-we-building-for-the-right-platform><h2><span class=header-link></span>Are we building for the right platform?</h2></a><p>Platform stability is indeed A Thing™. Just ask a Flash developer, Windows Phone developer, or Blackberry developer. Platforms <em>can</em> go away.</p><p>If we look at those three platforms, what do they have in common? They’re <em>closed</em> platforms. What I mean is there’s a single controlling interest. When you build for them, you’re building for a specific operating system and coding against a particular implementation as opposed to coding against a set of <em>open standards</em>. You could argue, that at least to some degree, Flash died because of its &quot;closed-ness&quot;. Regardless, one thing is clear from a risk mitigation perspective: open is better than closed.</p><p>the Web is <em>incredibly</em> open. It would be quite difficult for any one entity to kill it off.</p><p>Now, for Windows Phone/Blackberry it failed due to a lack of interested users... or was it lack of interested developers??</p><div class=center><img src=/images/2/ballmer.jpg width=320 height=180></div><p>Maybe if Ballmer ☝️ has just yelled &quot;developers&quot; <em>one more time</em> we’d all have Windows Phones in our pockets right now 😜.</p><p>From a risk mitigation perspective, two things are clear with regard to platform stability:</p><ol><li>Having <em>many users</em> is better than having few users</li><li>Having <em>more developers</em> building for the platform is better than having few developers</li></ol><blockquote><blockquote><p>There is no bigger more popular open platform than the Web</p></blockquote></blockquote><a name=are-we-building-the-right-software class=anchor href=#are-we-building-the-right-software><h2><span class=header-link></span>Are we building the right software?</h2></a><p>Many of us are building apps. Well, we used to build &quot;applications&quot; but that wasn’t nearly cool enough. So now we build &quot;apps&quot; instead 😎.</p><p>What does &quot;app&quot; mean to a user? This is important because I think it’s changed a bit over the years. To a user, I would suggest it basically means: &quot;a thing I put on my phone.&quot;</p><p>But for our purposes I want to get a bit more specific. I’d propose that an app is really:</p><ol><li>An &quot;ad hoc&quot; user interface</li><li>That is local(ish) to the device</li></ol><p>The term &quot;ad hoc&quot; is Latin and translates to <strong>&quot;for this&quot;</strong>. This actually matches pretty closely with what Apple’s marketing campaigns have been teaching the masses:</p><blockquote><p>There’s an app <strong>for that</strong></p><p>– Apple</p></blockquote><p>The point is it helps you <em>do</em> something. The emphasis is on action. I happen to think this is largely the difference between a &quot;site&quot; and an &quot;app&quot;. A news site for example has articles that are resources in and of themselves. Where a news app is software that runs on the device that helps you consume news articles.</p><p>Another way to put it would be that site is more like a book, while an app is a tool.</p><a name=should-we-be-building-apps-at-all class=anchor href=#should-we-be-building-apps-at-all><h2><span class=header-link></span>Should we be building apps at all?!</h2></a><p>Remember when chatbots were supposed to take over the world? Or perhaps we’ll all be walking around with augmented reality glasses and that’s how we’ll interact with the world?</p><p>I’ve heard it said that &quot;the future app is <em>no</em> app&quot; and virtual assistants will take over everything.</p><div class=center><img src=/images/2/echo.png width=360 height=372></div><p>I’ve had one of these sitting in my living room for a couple of years, but I find it all but useless. It’s just a nice bluetooth speaker that I can yell at to play me music.</p><p>But I find it very interesting that:</p><blockquote><blockquote><p>Even Alexa has an app!</p></blockquote></blockquote><p>Why? Because there’s no screen! As it turns out these &quot;ad hoc visual interfaces&quot; are extremely efficient.</p><p>Sure, I can yell out &quot;Alexa, what’s the weather going to be like today&quot; and I’ll hear a reply with high and low and whether it’s cloudy, rainy, or sunny. But in that same amount of time, I can pull my phone out tap the weather app and before Alexa can finish telling me those 3 pieces of data, I can visually scan the entire week’s worth of data, air quality, sunrise/sunset times, etc. It’s just <em>so much more</em> efficient as a mechanism for consuming this type of data.</p><p>As a result of that natural efficiency, I believe that having a visual interface is going to continue to be useful for all sorts of things for a long time to come.</p><p>That’s <em>not</em> to say virtual assistants aren’t useful! Google Assistant on my Pixel is quite useful in part because it can show me answers and can tolerate vagueness in a way that an app with a fixed set of buttons never could.</p><p>But, as is so often the case with new useful tech, rarely does it complete replace everything that came before it, instead, it augments what we already have.</p><a name=if-apps-are-so-great-why-are-we-so-quotapped-outquot class=anchor href=#if-apps-are-so-great-why-are-we-so-quotapped-outquot><h2><span class=header-link></span>If apps are so great why are we so &quot;apped out&quot;?</h2></a><p>How do we explain that supposed efficiency when there’s data like this?</p><ul><li><a href=\"https://qz.com/253618/most-smartphone-users-download-zero-apps-per-month/\">65% of smartphone users download zero apps per month</a></li><li><a href=\"http://fortune.com/2016/05/19/app-economy/\">More than 75% of app downloads open an app once and never come back</a></li></ul><p>I think to answer that we have to really look at what isn’t working well.</p><a name=what-sucks-about-apps class=anchor href=#what-sucks-about-apps><h2><span class=header-link></span>What sucks about apps?</h2></a><ol><li><strong>Downloading them certainly sucks.</strong> No one wants to open an app store, search for the app they’re trying to find, then wait to download the huge file. These days a 50mb app is pretty small. Facebook for iOS 346MB, Twitter iOS 212MB.</li><li><strong>Updating them sucks.</strong> Every night I plug in my phone I download a whole slew of app updates that I, as a user, <strong>could not possibly care less about</strong>. In addition, many of these apps are things I installed <em>once</em> and will <strong>never open again, ever!</strong>. I’d love to know the global stats on how much bandwidth has been wasted on app updates for apps that were never opened again.</li><li><strong>Managing them sucks.</strong> Sure, when I first got an iPhone ages ago and could first download apps my home screen was impeccable. Then when we got folders!! Wow... what an amazing development! Now I could finally put all those pesky uninstallable Apple apps in a folder called &quot;💩&quot; and pretend they didn’t exist. But now, my home screen is a bit of a disaster. Sitting there dragging apps around is not my idea of a good time. So eventually things get all cluttered up again.</li></ol><p>The thing I’ve come to realize, is this:</p><blockquote><blockquote><p>We don’t care how they got there. We only care that they’re <em>there</em> when we need them.</p></blockquote></blockquote><p>For example, I love to go mountain biking and I enjoy tracking my rides with an app called Strava. I get all geared up for my ride, get on my bike and then go, &quot;Oh right, gotta start Strava.&quot; So I pull out my phone <em>with my gloves on</em> and go: &quot;Ok Google, open Strava&quot;.</p><p>I <em>could not care less</em> about where that app was or where it came from when I said that.</p><p>I don’t care if it was already installed, I don’t care if it never existed on my home screen, or if it was generated out of thin air on the spot.</p><blockquote><blockquote><p>Context is <em>everything</em>!</p></blockquote></blockquote><p>If I’m at a parking meter, I want the app <em>for that</em>. If I’m visiting Portland, I want their public transit app.</p><p>But I certainly <em>do not</em> want it as soon as I’ve left.</p><p>If I’m at a conference, I might want a conference app to see the schedule, post questions to speakers, or whatnot. But wow, talk about something that quickly becomes worthless as soon as that conference is over!</p><p>As it turns out the more &quot;ad hoc&quot; these things are, the better! The more <em>disposable</em> and <em>re-inflatable</em> the better!</p><p>Which also reminds me of something that I feel like we often forget. We always assume people want our shiny apps and we measure things like &quot;engagement&quot; and &quot;time spent in the app&quot; when really, and there certainly are exceptions to this such as apps that are essentially entertainment, but often...</p><blockquote><blockquote><p>People don’t want to use your app. They want <em>to be done</em> using your app.</p></blockquote></blockquote><a name=enter-pwas class=anchor href=#enter-pwas><h2><span class=header-link></span>Enter PWAs</h2></a><p>I’ve been contracting with Starbucks for the past 18 months. They’ve taken on the ambitious project of essentially re-building a lot of their web stuff in Node.js and React. One of the things I’ve helped them with (and pushed hard for) was to build a PWA (Progressive Web App) that could provide similar functionality as their native apps. Coincidentally it was launched today: <a href=https://preview.starbucks.com>https://preview.starbucks.com</a>!</p><p><blockquote class=twitter-tweet data-lang=en><p lang=en dir=ltr>My team at <a href=https://twitter.com/Starbucks>@Starbucks</a> has been building a PWA, and it&#39;s now in beta! Check it out at <a href=https://t.co/tEUXM8BLgP>https://t.co/tEUXM8BLgP</a> if you&#39;re an existing customer! <a href=https://t.co/b9IJ3HbGpx>pic.twitter.com/b9IJ3HbGpx</a></p>&mdash; David Brunelle (@davidbrunelle) <a href=https://twitter.com/davidbrunelle/status/905931990444244995>September 7, 2017</a></blockquote></p><script async src=//platform.twitter.com/widgets.js charset=utf-8></script><p>This gives is a nice real world example:</p><ul><li>Starbucks iOS: 146MB</li><li>Starbucks PWA: ~600KB</li></ul><p>The point is there’s a <em>tremendous</em> size difference.</p><p>It’s 0.4% of the size. To put it differently, I could download the PWA <strong>243 times</strong> in the same amount of time it would take to download the iOS app. Then, of course on iOS it then also still has to install and boot up!</p><p>Personally, I’d have loved it if the app ended up even smaller and there are plans to shrink it further. But even still, they’re <em>not even on the same planet</em> in terms of file-size!</p><p>Market forces are <em>strongly</em> aligned with PWAs here:</p><ul><li>Few app downloads</li><li>User acquisition is <em>hard</em></li><li>User acquisition is <em>expensive</em></li></ul><p>If the goal is to get people to sign up for the rewards program, that type of size difference could very well make the difference of getting someone signed up and using the app experience (via PWA) by the time they reach the front of the line at Starbucks or not.</p><p>User acquisition is hard enough already, the more time and barriers that can be removed from that process, the better.</p><a name=quick-pwa-primer class=anchor href=#quick-pwa-primer><h2><span class=header-link></span>Quick PWA primer</h2></a><p>As mentioned, PWA stands for &quot;Progressive Web Apps&quot; or, as I like to call them: &quot;Web Apps&quot; 😄</p><p>Personally I’ve been trying to build what a user would define as an &quot;app&quot; with web technology for <em>years</em>. But until PWAs came along, as hard as we tried, you couldn’t quite build a <em>real app</em> with just web tech. Honestly, I kinda hate myself for saying that, but in terms of something that a user would understand as an &quot;app&quot; I’m afraid that statement has probably true until very recently.</p><p>So what’s a PWA? As one of its primary contributors put it:</p><blockquote><p>It’s just a website that took all the right vitamins.</p><p>– Alex Russell</p></blockquote><p>It involves a few specific technologies, namely:</p><ul><li>Service Worker. Which enable true reliability on the web. What I mean by that is I can build an app that as long as you loaded it while you were online, from then on it will <em>always</em> open, even if you’re not. This puts it on equal footing with other apps.</li><li>HTTPS. Requires encrypted connections</li><li>Web App Manifest. A simple JSON file that describes your application. What icons to use is someone adds it to their home screen, what its name is, etc.</li></ul><p>There are plenty of other resources about PWAs on the web. The point for my purposes is:</p><blockquote><blockquote><p>It is now possible to build PWAs that are <em>indistinguishable</em> from their native counter parts</p></blockquote></blockquote><p>They can be up and running in a fraction of the time whether or not they were already &quot;installed&quot; and unlike &quot;apps&quot; can be saved as an app on the device <em>at the user’s discretion!</em></p><p>Essentially they’re really great for creating &quot;ad hoc&quot; experiences that can be &quot;cold started&quot; on a whim nearly as fast as if it were already installed.</p><p>I’ve said it before and I’ll say it again:</p><blockquote><p>PWAs are the biggest thing to happen to the mobile web since the iPhone.</p><p>– Um... that was me</p></blockquote><a name=lets-talk-internet-of-things class=anchor href=#lets-talk-internet-of-things><h2><span class=header-link></span>Let’s talk Internet of things</h2></a><p>I happen to think that PWAs + IoT = ✨ MAGIC ✨. As several smart folks have pointed out.</p><p>The one-app-per-device approach to smart devices probably isn’t particularly smart.</p><p>It doesn’t scale well and it completely fails in terms of &quot;ad hoc&quot;-ness. Sure, if I have a Nest thermostat and Phillips Hue lightbulbs, it’s reasonable to have two apps installed. But even that sucks as soon as I want someone else to be able to use control them. If <em>I just let you into my house</em>, trust me... I’m perfectly happy to let you flip a light switch, you’re in my house, after all. But for the vast majority of these things there’s no concept of &quot;nearby apps&quot; and, it’s silly for my guest (or a house-sitter) to download an app they don’t actually want, just so I can let them control my lights.</p><p>The whole &quot;nearby apps&quot; thing has so many uses:</p><ul><li>thermostat</li><li>lights</li><li>locks</li><li>garage doors</li><li>parking meter</li><li>setting refrigerator temp</li><li>conference apps</li></ul><p>Today there are lots of new capabilities being added to the web to enable web apps to interact with physical devices in the real world. Things like WebUSB, WebBluetooth, WebNFC, and efforts like <a href=\"https://google.github.io/physical-web/\">Physical Web</a>. Even for things like Augmented (and Virtual) reality, the idea of the items we want to interact with having URLs makes so much sense and I can’t imagine a better, more flexible use of those URLs than for them to point to a PWA that lets you interact with that device!</p><a name=forward-looking-statements class=anchor href=#forward-looking-statements><h2><span class=header-link></span>Forward looking statements...</h2></a><p>I’ve been talking about all this in terms of investing. If you’ve ever read any company statement that discusses the future you always see this line explaining that things that are about to be discussed contains &quot;forward looking statements&quot; that may or may not ultimately happen.</p><p>So, here are <em>my</em> forward looking statements.</p><a name=1-pwa-only-startups class=anchor href=#1-pwa-only-startups><h3><span class=header-link></span>1. PWA-only startups</h3></a><p>Given the cost (and challenge) of user-acquisition and the quality of app you can build with PWAs these days, I feel like this is inevitable. If you’re trying to get something off the ground, it just isn’t very efficient to spin up <em>three whole teams</em> to build for iOS, Android, and the Web.</p><a name=2-pwas-listed-in-app-stores class=anchor href=#2-pwas-listed-in-app-stores><h3><span class=header-link></span>2. PWAs listed in App Stores</h3></a><p>So, there’s a problem with &quot;web only&quot; which is that for the good part of a decade we’ve been training users to look for apps in the app store for their given platform. So if you’re already a recognized brand, especially if you already have a native app that you’re trying to replace, it simply isn’t smart for you <em>not to exist</em> in the app stores.</p><p>So, some of this isn’t all that &quot;forward looking&quot; as it turns out <a href=\"https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/\">Microsoft has already committed to listing PWAs in the Windows Store</a>, more than once!</p><p><strong>They haven’t even finished implementing Service Worker in Edge yet!</strong> But they’re already committing hard to PWAs. In addition to post linked above, one of their lead Developer Relations folks, Aaron Gustafson just <a href=https://alistapart.com/article/yes-that-web-project-should-be-a-pwa>wrote an article for A List Apart</a> telling everyone to build PWAs.</p><p>But if you think about it from their perspective, of course they should do that! As I said earlier they’ve struggled to attract developer to build for their mobile phones. In fact, they’ve at times <em>paid</em> companies to write apps for them simply to make sure apps exist so that users will be able to have apps they want when using a Windows Phone. Remember how I said developer time is a scarce resource and without apps, the platform is worthless? So <em>of course</em> they should add first class support for PWAs. If you build a PWA like a lot of folks are doing then TADA!!! 🎉 You just made a Windows/Windows Phone app!</p><p>I’m of the opinion that the writing is on the wall for Google to do the same thing. It’s pure speculation, but it certainly seems like they are taking steps that suggest they may be planning on listing PWAs too. Namely that the Chrome folks recently shipped a feature referred to as &quot;WebAPKs&quot; for Chrome stable on Android (yep, everyone). In the past I’ve <a href=https://joreteg.com/blog/installing-web-apps-for-real>explained in more detail</a> why I think this is a big deal. But a shorted version would be that before this change, sure you could save a PWA to your home screen... <em>But</em>, in reality it was actually a glorified bookmark. That’s what changes with WebAPKs. Instead, when you add a PWA to your home screen it generates and &quot;side loads&quot; an actual <code>.apk</code> file on the fly. This allows that PWA to enjoy some privileges that were simply impossible until the operating system recognized it as &quot;an app.&quot; For example:</p><ul><li>You can now mute push notifications for a specific PWA without muting it for all of Chrome.</li><li>The PWA is listed in the &quot;app tray&quot; that shows all installed apps (previously it was just the home screen).</li><li>You can see power usage, and permissions granted to the PWA just like any other app.</li><li>The app developer can now update the icon for the app by publishing an update to the app manifest. Before, there was no way to updated the icon once it had been added.</li><li>And a slew of other similar benefits...</li></ul><p>If you’ve ever installed an Android app from a source other than the Play Store (or carriers/OEMs store) you know that you have to flip a switch in settings to allow installs from &quot;untrusted sources&quot;. So, how then, you might ask, can they generate and install an actual <code>.apk</code> file for a PWA without requiring that you change that setting? As it turns out the answer is quite simple: Use a trusted source!</p><blockquote><blockquote><p>As it turns out WebAPKs are managed through Google Play Services!</p></blockquote></blockquote><p>I’m no rocket scientist, but based on their natural business alignment with the web, their promotion of PWAs, the lengths they’ve gone to to grant PWAs equal status on the operating system as native apps, it only seems natural that they’d eventually <em>list them in the store</em>.</p><p>Additionally, if Google did start listing PWAs in the Play Store both them and Microsoft would be doing it <em>leaving Apple sticking out like a sore thumb and looking like the laggard</em>. Essentially, app developers would be able to target a <em>massive</em> number of users on a range of platforms with a single well-built PWA. But, just like developers grew to despise IE for not keeping up with the times and forcing them to jump through extra hoops to support it, the same thing would happen here. Apple does <em>not</em> want to be the next IE and I’ve already seen many prominent developers suggesting they already are.</p><p>Which bring us to another forward-looking statement:</p><a name=3-pwas-on-ios class=anchor href=#3-pwas-on-ios><h2><span class=header-link></span>3. PWAs on iOS</h2></a><p>Just a few weeks ago the Safari folks announced that Service Worker is now <a href=https://webkit.org/status/#specification-service-workers>officially under development</a>.</p><a name=4-pwas-everywhere class=anchor href=#4-pwas-everywhere><h2><span class=header-link></span>4. PWAs everywhere</h2></a><p>I really think we’ll start seeing them everywhere:</p><ul><li>Inside VR/AR/MR experiences</li><li>Inside chat bots (again, pulling up an ad-hoc interface is so much more efficient).</li><li>Inside Xbox?!</li></ul><p>As it turns out, if you look at Microsoft’s status page for Edge about Service Worker you see this:</p><div class=center><img src=/images/2/edge.png width=360 height=175></div><p>I hinted at this already, but I also think PWAs pair very nicely with virtual assistants being able to pull up an PWA on a whim without requiring it to already be installed would add tremendous power to the virtual assistant. Incidentally, this also becomes easier if there’s a known &quot;registered&quot; name of a PWA listed in an app store.</p><p>Some other fun use cases:</p><ul><li>Apparently the new digital menu displays in McDonald’s Restaurants (at least in the U.S.) are actually a web app built with Polymer (<a href=https://twitter.com/AJStacy06/status/857628546507968512>source</a>). I don’t know if there’s a Service Worker or not, but it would make sense for there to be.</li><li>Sports score boards!? I’m a <a href=\"http://consulting.joreteg.com/\">independent consultant</a>, and someone approached me about potentially using a set of TVs and web apps to build a score keeping system at an arena. Point is, there are so many cool examples!</li></ul><p>The web really is the universal platform!</p><a name=for-those-who-think-pwas-are-just-a-google-thing class=anchor href=#for-those-who-think-pwas-are-just-a-google-thing><h2><span class=header-link></span>For those who think PWAs are just a Google thing</h2></a><p>First off, I’m pretty sure Microsoft, Opera, Firefox, and Samsung folks would want to punch you for that. It <a href=\"https://jakearchibald.github.io/isserviceworkerready/\">simply isn’t true</a> and increasingly we’re seeing a lot more compatibility efforts between browser vendors.</p><p>For example: check out the <a href=http://wpt.fyi>Web Platform Tests</a> which is essentially Continuous Integration for web features that are run against new releases of major browsers. Some folks will recall that when Apple first claimed they implemented IndexedDb in Safari, the version they shipped was essentially unusable because it had major shortcomings and bugs.</p><p>Now, with the WPTs, you can drill into these features (to quite some detail) and see whether a given browser passes or fails. No more claiming &quot;we shipped!&quot; but not actually shipping.</p><a name=what-about-feature-quotxquot-on-platform-quotyquot-that-we-need class=anchor href=#what-about-feature-quotxquot-on-platform-quotyquot-that-we-need><h2><span class=header-link></span>What about feature &quot;x&quot; on platform &quot;y&quot; that we need?</h2></a><p>It could well be that you have a need that isn’t yet covered by the web platform. In reality, that list is getting shorter and shorter, also... HAVE YOU ASKED?! Despite what it may feel like, browser vendors eagerly want to know what you’re trying to do that you can’t. If there are missing features, be loud, be nice, but from my experience it’s worth making your desires known.</p><p>Also, it doesn’t take much to wrap a web view and add hooks into the native OS that your JavaScript can call to do things that aren’t <em>quite</em> possible yet.</p><p>But that also brings me to another point, in terms of investing, as the world’s greatest hockey player said:</p><blockquote><p>Skate to where the puck is going, not where it has been.</p><p>– Wayne Gretzky</p></blockquote><p>Based on what I’ve outlined thus far, it could be more risky to building an entire application for a whole other platform that you ultimately may not need than to at least exhaust your options seeing what you can do with the Web first.</p><p>So to line ’em up in terms of PWA support:</p><ul><li>Chrome: yup</li><li>Firefox: yup</li><li>Opera: yup</li><li>Samsung Internet (<a href=https://medium.com/samsung-internet-dev/think-you-know-the-top-web-browsers-458a0a070175>the 3rd largest browser surprise!</a>): yup</li><li>Microsoft: huge public commitment</li><li>Safari: at least implementing Service Worker</li></ul><a name=ask-them-add-your-feature class=anchor href=#ask-them-add-your-feature><h2><span class=header-link></span>Ask them add your feature!</h2></a><p>Sure, it may not happen, it may take a long time but <em>at least</em> try. Remember, developers have a lot more influence over platforms than we typically realize. Make. your. voice. heard.</p><a name=side-note-about-react-nativeexpo class=anchor href=#side-note-about-react-nativeexpo><h2><span class=header-link></span>Side note about React-Native/Expo</h2></a><p>These projects are run by awesome people, the tech is incredibly impressive. If you’re Facebook and you’re trying to consolidate your development efforts, for the same basic reasons as why it makes sense for them to create their on <a href=\"http://hhvm.com/\">VM for running PHP</a>. They have realities to deal with at a scale that most of us will never have to deal with. Personally, I’m not Facebook.</p><p>As a side note, I find it interesting that building native apps and having as many people do that as possible, plays nicely into their advertising competition with Google.</p><p>It just so happens that Google is well positioned to capitalize off of people using the Web. Inversely, I’m fairly certain Facebook wouldn’t mind that ad revenue <em>not</em> going Google. Facebook, seemingly would much rather <em>be</em> your web, that be part of the Web.</p><p>Anyway, all that aside, for me it’s also about investing well.</p><p>By building a native app you’re volunteering for a 30% app-store tax. Plus, like we covered earlier odds are that no one wants to go download your app. Also, though it seems incredibly unlikely, I feel compelled to point out that in terms of &quot;openness&quot; Apple’s App Store is very clearly <em>anything</em> but that. Apple could decide one day that they really don’t like how it’s possible to essentially circumvent their normal update/review process when you use Expo. One day they could just decide to reject all React Native apps. I really don’t think they would because of the uproar it would cause. I’m simply pointing out that it’s <em>their</em> platform and they would have <em>every</em> right to do so.</p><a name=so-is-it-all-about-investing-for-your-own-gain class=anchor href=#so-is-it-all-about-investing-for-your-own-gain><h2><span class=header-link></span>So is it all about investing for your own gain?</h2></a><p>So far, I’ve presented all this from kind of a cold, heartless investor perspective: getting the most for your time.</p><p>But, that’s not the whole story is it?</p><p>Life isn’t all about me. Life isn’t all about us.</p><p>I want to invest in platforms that increase opportunities <strong>for others</strong>. Personally, I really hope the next friggin’ Mark Zuckerburg isn’t an ivy-league dude. Wouldn’t it be amazing if instead the next huge success was, I don’t know, perhaps a young woman in Nairobi or something? The thing is, if owning an iPhone is a prerequisite for building apps, it <em>dramatically</em> decreases the odds of something like that happening. I feel like the Web really is the closest thing we have to a level playing field.</p><p><strong>I want to invest in and improve <em>that</em> platform!</strong></p><p>This quote really struck me and has stayed with me when thinking about these things:</p><blockquote><p>If you’re the kind of person who tends to succeed in what you start,</p><p>changing what you start could be <em>the most extraordinary thing</em> you could do.</p><p>– Anand Giridharadas</p></blockquote><p>Thanks for your valuable attention ❤️. I’ve presented the facts as I see them and I’ve done my best not to &quot;should on you.&quot;</p><p>Ultimately though, no matter how prepared we are or how much research we’ve done; investing is always a bit of a gamble.</p><p>So I guess the only thing left to say is:</p><blockquote><blockquote><p>I’m all in.</p></blockquote></blockquote><p><em>Big thanks to <a href=https://twitter.com/addyosmani>Addy Osmani</a> for his super helpful feedback on this post.</em></p>","preview":"<p><em>Note: I just spoke at <a href=https://2017.coldfront.co>Coldfront 2017</a> about why I’m such a big proponent of the Web. What follows is essentially that talk as a blog post (I’ll add a link to the video once it is published).</em></p><p><em>Also: the Starbucks PWA mentioned in the talk has shipped! 🎉</em></p>"},{"title":"Installing web apps on phones (for real)","date":"2016-12-02T06:40:00.000Z","tags":"pwa, mobile, web, android, chrome","slug":"installing-web-apps-for-real","url":"/blog/installing-web-apps-for-real","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2016/12/installing-web-apps-for-real.md","markdown":"If you're building for the web, you've likely heard the term \"Progressive Web App\" by now.\n\nIts definition is a bit vague and somewhat contentious perhaps, but generally the idea is that it's a web page that has \"taken all the right vitamins\" so it can behave more like an app you installed from the app store. It starts as a normal tab in your browser and if it has all the *right stuff* the browser will prompt visitors if they'd like to \"Add to Homescreen\", which up to this point has largely equated to being a glorified bookmark.\n\nOnce opened from the Homescreen it hides the browser UI and appears as its own app when switching apps, etc.\n\n**This is huge!**\n\nIf you're not familiar with the challenges currently facing native app developers, here are a few:\n\n1. It's nearly impossible to break into the small group of 5 - 8 apps users use regularly.\n2. On average, in the US, smartphone owners install [*zero* new apps per month](http://qz.com/253618/most-smartphone-users-download-zero-apps-per-month/).\n3. You have no control over the approval process.\n4. Paid apps obviously require paying fees to the app store.\n\nPWAs are an attempt to hit the sweet spot balance between web and native. Fast, native-app-like experiences without the list of problems above. The simple act of opening one of these *Webpages With Special Sauce™* means you've already downloaded \"the app\" so there's no need for an App Store run-around where you ask users to download a 50mb binary over their flaky mobile connections just so they can read your web content. Arguably, it's really more like \"saving experiences\" you're currently having in your browser for easy access later, even if you're offline. This ability for a web page to graduate to becoming a full app-like experience appears, by all measures and case studies that have come out so far to be pure magic juice for businesses who care about you know, those silly little useless metrics like conversions or retention or whatnot. My professional interpretation of the data I've seen on this so far is: OMG.\n\nBut don't take my word for it, [watch this instead](https://youtu.be/eI3B6x0fw9s?t=14m3s).\n\nPWAs are the entire reason I switched to Android after being on iOS for 7-some years. The [blog post I wrote about why I switched](https://joreteg.com/blog/why-i-switched-to-android) apparently struck a nerve. It had 80k+ uniques in the first two weeks and led to several response posts by folks like [Jeremy Keith](https://adactio.com/journal/10410), et. al. I'm not saying this to brag (well, maybe just a little), but the point is, this stuff is a big friggin' deal and we have good reason to be excited about it!\n\nFor me personally, building web apps that feel like native apps is something I've been trying to do for ages. Exhibit A: this screen cap [I made about something I built for this](https://vimeo.com/8254856) *seven* years ago!\n\nLet's just say the concept has just always made a lot of sense to me. However...\n\n## The implementations have historically fallen short\n\nOf course, building app-like websites are hardly a new idea. This is how Steve Jobs originally proposed folks build for the iPhone! But as I explained in more detail in my post. I don't believe the incentives made sense for platforms to do this kind of thing at the time.\n\nI'll spare you repeating my other post, you can [just go read it if that sounds interesting](https://joreteg.com/blog/why-i-switched-to-android).\n\n## The time has come\n\nPWAs have already come *a long* way even without the changes I'm discussing here. They're already solidly in the \"very likely a much better investment than building native apps\" category for most companies considering building mobile apps.\n\nBut, as awesome as PWAs are on Android, they still have had a few annoyances that keep them from being truly \"first class citizens\" on the platform.\n\nFor example:\n\n1. PWAs added to Homescreen are not listed in the \"all apps\" panel on Android. This also means it isn't possible to have PWAs that are \"installed\" but not on a Homescreen somewhere like you can with other Android apps.\n2. Once it's added to your Homescreen, the app developer can't later decide to change the name or the icon. Changing the published [Web App Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest) has no impact on previous \"Add to Homescreen\"-ed apps.\n3. When you migrate from one Android phone to another, as I recently did when I got a Pixel, my \"installed\" PWAs lost their full-screen-ness and didn't run in standalone mode until I removed and re-added them.\n4. Even though App Store discovery has proven very challenging certainly users have been trained to look for apps in app stores. So if you tell your users you built an app the reaction is probably going to be to go search for it in the app store. But, as of right now, they're not listed in app stores (though [Microsoft is changing that](https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/#clsLLk1RvqTVvAyK.97)).\n5. The phrasing of \"Add to Homescreen\" is pretty weak. It doesn't imply that you're doing more than adding a bookmark. For better or worse we've taught users that apps are to be \"installed\". As a developer of PWAs, I can tell you that the phrase \"Add to Homescreen\" feels like it's selling what I built short. I know users won't quite get this, whereas they certainly know what \"installing an app\" means.\n6. An installed native app can \"own\" a \"url scope\", which means its possible to create a link that opens an installed application. This may not seem like a big deal, but say you're building a password-less login system where a magic login link is emailed to you that logs you into the application. As it stands right now, there's no way for me to tell the OS to open that link in the installed PWA, instead they'll always open in the default browser.\n7. Web push notifications as implemented right now, come from Chrome, not the PWA. This also means that if you block notifications, it's kind of all or nothing. Because the OS is blocking *Chrome* from notifying users.\n8. Stuff like storage usage and battery consumption get bundled in with Chrome rather than being presented as isolated apps to the user.\n\nSo here's the interesting thing about all these problems: **most, if not all of them, stem from the fact that \"installed PWAs\" are *not truly apps* in the eyes of the operating system!**\n\n## That's what's changing!\n\nSoon \"installed PWAs\" will actually be APKs, as in *real* Android apps will be **created and side-loaded** into the OS by Chrome. This means they won't be websites that have been \"Add to Homescreen\"-ed they'll be **actually generated and installed** on the fly, and with the language to match.\n\nIt was rather subtly announced by [Paul Kinlan](https://twitter.com/paul_kinlan), please watch his talk from Chrome Dev Summit the specific part I'm referring to [starts right here](https://youtu.be/YJwrBbze_Ec?t=21m33s). It seemed like not a lot of people even caught it. Personally, I erupted into spontaneous applause (in fact, you can hear me on the video right [here](https://youtu.be/YJwrBbze_Ec?t=24m25s)), but I think, given that this was the last talk of the conference and a lot of folks were kinda zoning out I felt like perhaps the implications of this were a bit lost.\n\nSo, let me be clear: I think this is a **BIG FRIGGIN' DEAL** for the web and worth being very excited about!\n\n## What happens?\n\nBeware, I'm told the way it's implemented as I will describe below is not its final state. Apparently the whole \"side-loading\" bit will be smoothed over and be more seamless. There's a [list of bugs](https://bugs.chromium.org/p/chromium/issues/list?can=2&q=component%3AMobile) related to all of this stuff, you're curious.\n\nIt's not landed yet, it's currently behind a flag in Canary so details are sure to change, but you can try it today if you've got an up-to-date copy of Android and Chrome Canary installed.\n\n### 1. Turn on the flag\n\nGo to `chrome://flags` and enable \"Improved add to Home screen\":\n\n<img src=\"/images/1/chrome-flag.png\" width=\"270\" height=\"480\" />\n\n### 2. Open a sweet PWA and install it...\n\nI'd recommend something like [paperplanes.world](https://paperplanes.world/) and select \"add to Homescreen\" from the menu. You'll see this:\n\n<img src=\"/images/1/prompt.png\" width=\"270\" height=\"480\" />\n\n**Note:** The language is all about \"installing this application\" because you're actually side-loading an Android APK here!\n\nNext you get this \"app installed\" language:\n\n<img src=\"/images/1/installed.png\" width=\"270\" height=\"480\" />\n\nAnd now, you've actually got an APK installed for this web app!\n\nWhich means it's also listed in my \"all apps\" view:\n\n<img src=\"/images/1/all-apps.png\" width=\"270\" height=\"480\" />\n\nYou can even view app info like other apps:\n\n<img src=\"/images/1/app-info.png\" width=\"270\" height=\"480\" />\n\n### 3. Why does any of this matter?\n\nA platform with over 1 billion monthly active mobile is working to make web apps first class citizens on that platform in every way they can. This is a *huge* deal. But, to be clear this isn't about Google and Chrome, sure the term Progressive Web App may have been [coined](https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/) and promoted by Googlers. But, don't confuse this with just being a Google Thing™.\n\nI'm pretty sure the folks at Microsoft, Mozilla, and Opera would take that personally. Friggin' Steve Jobs promoted the basic idea. Microsoft has [committed to listing PWAs in their store](https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/#clsLLk1RvqTVvAyK.97)! Which is actually more than Google has committed to doing though, if I were a betting man, I'd say this little APK tweak is a step they're taking in that direction. But regardless, the point is this isn't about Google, it's a Web Thing™.\n\nRight now the Google folks are definitely among the group pushing the envelope with this concept the hardest. But none of this would get me excited if it were not based on extending the reach of standards-based web applications onto their host systems.\n\nAs someone who's been working in this space for a long time I'm super excited to see metrics support and economic forces all finally seem to be aligning behind this idea, its time seems to finally have come.\n\nIt's a good time to go all in on the web. I can't wait to see what the next few years bring. Personally, I feel like the web is well poised to replace the majority of apps we now get from app stores.\n\nOh, and for those of you worried about Apple, don't be. They don't like to be the laggard and there are positive signs that they're coming around to the idea. I think the best way to make that happen is to building amazing web experiences that make choosing to invest in building native apps for App Stores seem arduous and unnecessary. Apple certainly don't want Safari to be [the new IE](https://nolanlawson.com/2015/06/30/safari-is-the-new-ie/), so watch them closely and help speak out where you can.\n\nIf you want to (nicely) disagree with me or if you just think there may be something to this whole Web Thing™ I'm [@HenrikJoreteg](https://twitter.com/henrikjoreteg) on twitter you can hit me up there.","outputFile":"/blog/installing-web-apps-for-real.html","html":"<p>If you&#39;re building for the web, you&#39;ve likely heard the term &quot;Progressive Web App&quot; by now.</p><p>Its definition is a bit vague and somewhat contentious perhaps, but generally the idea is that it&#39;s a web page that has &quot;taken all the right vitamins&quot; so it can behave more like an app you installed from the app store. It starts as a normal tab in your browser and if it has all the <em>right stuff</em> the browser will prompt visitors if they&#39;d like to &quot;Add to Homescreen&quot;, which up to this point has largely equated to being a glorified bookmark.</p><p>Once opened from the Homescreen it hides the browser UI and appears as its own app when switching apps, etc.</p><p><strong>This is huge!</strong></p><p>If you&#39;re not familiar with the challenges currently facing native app developers, here are a few:</p><ol><li>It&#39;s nearly impossible to break into the small group of 5 - 8 apps users use regularly.</li><li>On average, in the US, smartphone owners install <a href=\"http://qz.com/253618/most-smartphone-users-download-zero-apps-per-month/\"><em>zero</em> new apps per month</a>.</li><li>You have no control over the approval process.</li><li>Paid apps obviously require paying fees to the app store.</li></ol><p>PWAs are an attempt to hit the sweet spot balance between web and native. Fast, native-app-like experiences without the list of problems above. The simple act of opening one of these <em>Webpages With Special Sauce™</em> means you&#39;ve already downloaded &quot;the app&quot; so there&#39;s no need for an App Store run-around where you ask users to download a 50mb binary over their flaky mobile connections just so they can read your web content. Arguably, it&#39;s really more like &quot;saving experiences&quot; you&#39;re currently having in your browser for easy access later, even if you&#39;re offline. This ability for a web page to graduate to becoming a full app-like experience appears, by all measures and case studies that have come out so far to be pure magic juice for businesses who care about you know, those silly little useless metrics like conversions or retention or whatnot. My professional interpretation of the data I&#39;ve seen on this so far is: OMG.</p><p>But don&#39;t take my word for it, <a href=\"https://youtu.be/eI3B6x0fw9s?t=14m3s\">watch this instead</a>.</p><p>PWAs are the entire reason I switched to Android after being on iOS for 7-some years. The <a href=https://joreteg.com/blog/why-i-switched-to-android>blog post I wrote about why I switched</a> apparently struck a nerve. It had 80k+ uniques in the first two weeks and led to several response posts by folks like <a href=https://adactio.com/journal/10410>Jeremy Keith</a>, et. al. I&#39;m not saying this to brag (well, maybe just a little), but the point is, this stuff is a big friggin&#39; deal and we have good reason to be excited about it!</p><p>For me personally, building web apps that feel like native apps is something I&#39;ve been trying to do for ages. Exhibit A: this screen cap <a href=https://vimeo.com/8254856>I made about something I built for this</a> <em>seven</em> years ago!</p><p>Let&#39;s just say the concept has just always made a lot of sense to me. However...</p><a name=the-implementations-have-historically-fallen-short class=anchor href=#the-implementations-have-historically-fallen-short><h2><span class=header-link></span>The implementations have historically fallen short</h2></a><p>Of course, building app-like websites are hardly a new idea. This is how Steve Jobs originally proposed folks build for the iPhone! But as I explained in more detail in my post. I don&#39;t believe the incentives made sense for platforms to do this kind of thing at the time.</p><p>I&#39;ll spare you repeating my other post, you can <a href=https://joreteg.com/blog/why-i-switched-to-android>just go read it if that sounds interesting</a>.</p><a name=the-time-has-come class=anchor href=#the-time-has-come><h2><span class=header-link></span>The time has come</h2></a><p>PWAs have already come <em>a long</em> way even without the changes I&#39;m discussing here. They&#39;re already solidly in the &quot;very likely a much better investment than building native apps&quot; category for most companies considering building mobile apps.</p><p>But, as awesome as PWAs are on Android, they still have had a few annoyances that keep them from being truly &quot;first class citizens&quot; on the platform.</p><p>For example:</p><ol><li>PWAs added to Homescreen are not listed in the &quot;all apps&quot; panel on Android. This also means it isn&#39;t possible to have PWAs that are &quot;installed&quot; but not on a Homescreen somewhere like you can with other Android apps.</li><li>Once it&#39;s added to your Homescreen, the app developer can&#39;t later decide to change the name or the icon. Changing the published <a href=https://developer.mozilla.org/en-US/docs/Web/Manifest>Web App Manifest</a> has no impact on previous &quot;Add to Homescreen&quot;-ed apps.</li><li>When you migrate from one Android phone to another, as I recently did when I got a Pixel, my &quot;installed&quot; PWAs lost their full-screen-ness and didn&#39;t run in standalone mode until I removed and re-added them.</li><li>Even though App Store discovery has proven very challenging certainly users have been trained to look for apps in app stores. So if you tell your users you built an app the reaction is probably going to be to go search for it in the app store. But, as of right now, they&#39;re not listed in app stores (though <a href=https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/#clsLLk1RvqTVvAyK.97>Microsoft is changing that</a>).</li><li>The phrasing of &quot;Add to Homescreen&quot; is pretty weak. It doesn&#39;t imply that you&#39;re doing more than adding a bookmark. For better or worse we&#39;ve taught users that apps are to be &quot;installed&quot;. As a developer of PWAs, I can tell you that the phrase &quot;Add to Homescreen&quot; feels like it&#39;s selling what I built short. I know users won&#39;t quite get this, whereas they certainly know what &quot;installing an app&quot; means.</li><li>An installed native app can &quot;own&quot; a &quot;url scope&quot;, which means its possible to create a link that opens an installed application. This may not seem like a big deal, but say you&#39;re building a password-less login system where a magic login link is emailed to you that logs you into the application. As it stands right now, there&#39;s no way for me to tell the OS to open that link in the installed PWA, instead they&#39;ll always open in the default browser.</li><li>Web push notifications as implemented right now, come from Chrome, not the PWA. This also means that if you block notifications, it&#39;s kind of all or nothing. Because the OS is blocking <em>Chrome</em> from notifying users.</li><li>Stuff like storage usage and battery consumption get bundled in with Chrome rather than being presented as isolated apps to the user.</li></ol><p>So here&#39;s the interesting thing about all these problems: <strong>most, if not all of them, stem from the fact that &quot;installed PWAs&quot; are <em>not truly apps</em> in the eyes of the operating system!</strong></p><a name=that39s-what39s-changing class=anchor href=#that39s-what39s-changing><h2><span class=header-link></span>That&#39;s what&#39;s changing!</h2></a><p>Soon &quot;installed PWAs&quot; will actually be APKs, as in <em>real</em> Android apps will be <strong>created and side-loaded</strong> into the OS by Chrome. This means they won&#39;t be websites that have been &quot;Add to Homescreen&quot;-ed they&#39;ll be <strong>actually generated and installed</strong> on the fly, and with the language to match.</p><p>It was rather subtly announced by <a href=https://twitter.com/paul_kinlan>Paul Kinlan</a>, please watch his talk from Chrome Dev Summit the specific part I&#39;m referring to <a href=\"https://youtu.be/YJwrBbze_Ec?t=21m33s\">starts right here</a>. It seemed like not a lot of people even caught it. Personally, I erupted into spontaneous applause (in fact, you can hear me on the video right <a href=\"https://youtu.be/YJwrBbze_Ec?t=24m25s\">here</a>), but I think, given that this was the last talk of the conference and a lot of folks were kinda zoning out I felt like perhaps the implications of this were a bit lost.</p><p>So, let me be clear: I think this is a <strong>BIG FRIGGIN&#39; DEAL</strong> for the web and worth being very excited about!</p><a name=what-happens class=anchor href=#what-happens><h2><span class=header-link></span>What happens?</h2></a><p>Beware, I&#39;m told the way it&#39;s implemented as I will describe below is not its final state. Apparently the whole &quot;side-loading&quot; bit will be smoothed over and be more seamless. There&#39;s a <a href=\"https://bugs.chromium.org/p/chromium/issues/list?can=2&amp;q=component%3AMobile\">list of bugs</a> related to all of this stuff, you&#39;re curious.</p><p>It&#39;s not landed yet, it&#39;s currently behind a flag in Canary so details are sure to change, but you can try it today if you&#39;ve got an up-to-date copy of Android and Chrome Canary installed.</p><a name=1-turn-on-the-flag class=anchor href=#1-turn-on-the-flag><h3><span class=header-link></span>1. Turn on the flag</h3></a><p>Go to <code>chrome://flags</code> and enable &quot;Improved add to Home screen&quot;:</p><p><img src=/images/1/chrome-flag.png width=270 height=480></p><a name=2-open-a-sweet-pwa-and-install-it class=anchor href=#2-open-a-sweet-pwa-and-install-it><h3><span class=header-link></span>2. Open a sweet PWA and install it...</h3></a><p>I&#39;d recommend something like <a href=\"https://paperplanes.world/\">paperplanes.world</a> and select &quot;add to Homescreen&quot; from the menu. You&#39;ll see this:</p><p><img src=/images/1/prompt.png width=270 height=480></p><p><strong>Note:</strong> The language is all about &quot;installing this application&quot; because you&#39;re actually side-loading an Android APK here!</p><p>Next you get this &quot;app installed&quot; language:</p><p><img src=/images/1/installed.png width=270 height=480></p><p>And now, you&#39;ve actually got an APK installed for this web app!</p><p>Which means it&#39;s also listed in my &quot;all apps&quot; view:</p><p><img src=/images/1/all-apps.png width=270 height=480></p><p>You can even view app info like other apps:</p><p><img src=/images/1/app-info.png width=270 height=480></p><a name=3-why-does-any-of-this-matter class=anchor href=#3-why-does-any-of-this-matter><h3><span class=header-link></span>3. Why does any of this matter?</h3></a><p>A platform with over 1 billion monthly active mobile is working to make web apps first class citizens on that platform in every way they can. This is a <em>huge</em> deal. But, to be clear this isn&#39;t about Google and Chrome, sure the term Progressive Web App may have been <a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\">coined</a> and promoted by Googlers. But, don&#39;t confuse this with just being a Google Thing™.</p><p>I&#39;m pretty sure the folks at Microsoft, Mozilla, and Opera would take that personally. Friggin&#39; Steve Jobs promoted the basic idea. Microsoft has <a href=https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/#clsLLk1RvqTVvAyK.97>committed to listing PWAs in their store</a>! Which is actually more than Google has committed to doing though, if I were a betting man, I&#39;d say this little APK tweak is a step they&#39;re taking in that direction. But regardless, the point is this isn&#39;t about Google, it&#39;s a Web Thing™.</p><p>Right now the Google folks are definitely among the group pushing the envelope with this concept the hardest. But none of this would get me excited if it were not based on extending the reach of standards-based web applications onto their host systems.</p><p>As someone who&#39;s been working in this space for a long time I&#39;m super excited to see metrics support and economic forces all finally seem to be aligning behind this idea, its time seems to finally have come.</p><p>It&#39;s a good time to go all in on the web. I can&#39;t wait to see what the next few years bring. Personally, I feel like the web is well poised to replace the majority of apps we now get from app stores.</p><p>Oh, and for those of you worried about Apple, don&#39;t be. They don&#39;t like to be the laggard and there are positive signs that they&#39;re coming around to the idea. I think the best way to make that happen is to building amazing web experiences that make choosing to invest in building native apps for App Stores seem arduous and unnecessary. Apple certainly don&#39;t want Safari to be <a href=\"https://nolanlawson.com/2015/06/30/safari-is-the-new-ie/\">the new IE</a>, so watch them closely and help speak out where you can.</p><p>If you want to (nicely) disagree with me or if you just think there may be something to this whole Web Thing™ I&#39;m <a href=https://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on twitter you can hit me up there.</p>","preview":"<p>If you&#39;re building for the web, you&#39;ve likely heard the term &quot;Progressive Web App&quot; by now.</p><p>Its definition is a bit vague and somewhat contentious perhaps, but generally the idea is that it&#39;s a web page that has &quot;taken all the right vitamins&quot; so it can behave more like an app you installed from the app store. It starts as a normal tab in your browser and if it has all the <em>right stuff</em> the browser will prompt visitors if they&#39;d like to &quot;Add to Homescreen&quot;, which up to this point has largely equated to being a glorified bookmark.</p>"},{"title":"Why I switched to Android after 7 years of iOS","date":"2016-03-22T19:40:00.000Z","tags":"mobile, web, ios, android, chrome","slug":"why-i-switched-to-android","url":"/blog/why-i-switched-to-android","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2016/03/why-i-switched-to-android.md","markdown":"Monday of last week I was all excited. I had just gotten the green light to start prototyping a new [Progressive Web App](https://developers.google.com/web/progressive-web-apps?hl=en) for a client I've been working with.\n\nI pulled out an older Android phone that I keep around for development. Then I also got my sleek, new, shiny iPhone 6s out of my pocket, with its smooth curves and speedy OS. But as I looked at my iPhone I was kind of bummed out.\n\nI realized that this slick piece of Apple hardware was *less* capable as a platform for web applications than my dusty old Android dev phone.\n\nAt that point I knew I was over iOS.\n\nSo, instead of opening my text editor I placed an order for a Nexus 6P and signed up for [Google fi phone service](http://fi.google.com/) (which is awesome, btw).\n\nJust like that, after 7-some years, bye bye iOS.\n\n## What!? What’s wrong with iOS?\n\nRemember the original iPhone announcement? Where Steve introduced the amazing combination of a mobile phone, an iPod, and an *Internet communications device*.\n\nI don’t know about you, but the idea of having a fully capable web browser in my pocket was *a huge part* of the appeal.\n\nThat’s never changed.\n\nOf course I don’t know the full backstory, but it sure seemed like the original plan for 3rd party developers on iOS was to have us all just build apps using the web. Safari added support for making web apps that could be added to your home screen as an icon and by including a few magical `<meta>` tags you could use to create something that could sort of be “installed” to your home screen. Then, when you opened it would run in “standalone mode”.\n\nThese were, in many ways, the original “Progressive Web Apps” and this was sometime around 2009!\n\nThink about it…\n\n1. They started in the browser, but then you could kind of upgrade them to “home screen status”.\n2. When you ran them from the home screen they’d open with a splash screen and without any visible browser UI.\n3. You could pick a loading screen and app icon.\n4. You could even even pick from a few different status bar colors!\n\nI don’t know whether or not this type of app was actually intended to be the primary mechanism for 3rd party dev to build apps for iOS but regardless… it was way ahead of its time.\n\nUnfortunately, the web platform itself wasn’t quite ready for the spotlight yet. It was *sort of* possible to build web apps that looked and performed like native apps, I was trying to do this 6 years ago using [David Kaneda’s](https://twitter.com/davidkaneda) awesome, [jQTouch](http://jqtjs.com/) lib. Hilariously, [the corny little demo video](https://vimeo.com/8254856) that I posted, led to a call from David and almost got me a job at [extjs](https://www.sencha.com/products/extjs/) right as they were rebranding to Sencha and starting to build [Sencha Touch](https://www.sencha.com/products/touch/). But the story for offline was terrible.\n\nBut anyway, as it turned out, the capabilities of the web on iOS were not quite enough to satiate ravenous developers. So developers were left clawing for the ability to build stuff that ran natively on the device to give them better performance and deeper API access.\n\n## Enter the iOS SDK and App Store\n\nApple made what turned out to be a really smart business decision: they released an iOS SDK and an App Store and the rest is history.\n\nFirst, I was excited about “apps” just like everyone else seemed to be. Just think, here we had been busy building “applications” when we really should’ve been building “apps” all along! Who knew?! ;)\n\nAnyway, I quickly found myself hunting for the best apps and switching to whatever bank, social networks, and other services had the best iOS apps. I bought a book on iOS development and built a hello world or two. My old co-worker [Ryan Youngman](https://twitter.com/cruffledoh) made iSaber to let you swing a fake lightsaber at your friends with your phone. Every developer I knew was talking about iOS development but at some point the fun of all this iOS stuff dried up.\n\nSeeing the hoops you had to jump through to ship an app on iOS didn’t seem right.\n\n**How quickly developers traded away the wide-open-spaces of the web for a walled castle with a monarch enforcing a 30% tax.**\n\nSo, I decided to focus on building “installable web apps” for iOS instead because surely, the web would catch up.\n\n## However, this became problematic\n\nDespite the popularity of native apps the original idea of these standalone installable web apps has continued to be supported for new versions of iOS. But, they didn’t fit into Apple’s business model! The App Store turned into a huge business, the term “app” was going mainstream, and every business suddenly felt they needed to have their own “app” whether they had any users or not.\n\nAs Apple’s app business took off these capabilities very clearly, very quickly, and somewhat unsurprisingly were deprioritized. The end result, for those of us still trying to build installable web apps for iOS was that with nearly every new iOS release some key feature that we were depending on broke.\n\nI’m talking about stuff that QA should have caught, stuff that if *anybody* at Apple was actually building apps this way would have noticed before they released.\n\nOne quick example that bit me was how they broke the ability to link out to an external website from within an app running in “standalone” mode. `target=_blank` no longer worked, neither did `window.open` or anything else I could think of. So now since our “standalone” app didn’t have a URL bar or back button it would simply take the user to the link they clicked within the same full-screen web view *with no way to return to the app*! The *only* way out was forcibly quitting the app (hopefully the user knew how to do that).\n\nWe were running a chat product at the time, so anytime someone pasted a URL into chat it was essentially a trap.\n\nThese sorts of issues continued to happen release after release. Soon it became obvious that while you can *sort of* build these types of apps on iOS you can’t really depend on them not breaking with the next update.\n\nThe message from Apple seemed clear: web apps are second-class citizens on iOS\n\n\n## What of Android?\n\nI didn’t care much at the time, but somewhere in the middle of all of this, Android appeared on the scene. It promised to be a more open alternative as a mobile platform. It was a collaboration between several big companies, it was their attempt to essentially fight off the fruit-company-comeback-kid-turned-gorilla and its Mighty Joe App Store.\n\nIt started gaining traction, but its web experience at the beginning was quite sub-par.\n\n\n## Fast-Forward five years…\n\n1. People are [somewhat burnt out on Apps](https://medium.com/swlh/nobody-wants-your-app-6af1f7f69cb7).\n2. The vast majority of developers building native iOS apps never even make back their expenses. [We knew this in 2013](http://www.forbes.com/sites/tristanlouis/2013/08/10/how-much-do-average-apps-make/#426a415f12cb).\n3. A *few* games are still making money, but that’s a lottery.\n4. Meanwhile, there are over 1.4 billion active Android users.\n5. Android switched to using Chrome as the default browser.\n6. Chrome, Opera, and Firefox have added features to allow building actual app experiences via the Web.\n\nAnd here I am… switching to Android.\n\n## So why Android? Isn’t it just more of the same?\n\nYes. It is. Android itself bores me, honestly. There’s nothing all that terribly new or exciting here.’\n\n**save one very important detail…**\n\n**IT’S CURRENTLY THE BEST MOBILE WEB APP PLATFORM**\n\n## What do you mean?! Doesn’t Safari run my JS is faster?\n\nMost people when they say this are referring to [this post by Jeff Atwood (a.k.a. codinghorror)](https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889), which [I wrote a whole response post to, if you’re interested](https://joreteg.com/blog/viability-of-js-frameworks-on-mobile).\n\nSo yeah, Safari runs my JS faster, but guess what… most of your users won’t have a shiny new iPhone 6s, and as [I’ve said before](https://www.youtube.com/watch?v=okk0BGV9oY0), betting on desktop-like performance on the mobile web, or sending huge frameworks like Ember to a mobile device probably isn’t a great idea.\n\nWith performance, there is such a thing as “good enough”. It wouldn’t matter if Safari ran JS 50x faster! The *only* thing that matters is whether my app runs *fast enough*. Beyond that, as a user, I don’t care.\n\nAs it turns out, it’s possible to write web apps that [run at 60fps even on older, crappier hardware](http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org).\n\nBut, all that aside, note this: I said “*better app platform*” not faster JavaScript runtime.\n\n## So why not just use Chrome for iOS?!\n\nAs I started tweeted about switching I was surprised to realize that many people don’t know that Chrome, Opera, and Firefox for iOS all just using WebKit web views under the hood.\n\nIn fact, apps that include a different browser engine are a violation of Apple’s terms of service.\n\nThey're just different UIs on the same browser engine.\n\n## But isn’t WebKit getting better?\n\nYes, it seems like [they're picking up some momentum recently](https://developer.apple.com/library/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html).\n\nBut, there’s a whole lot more to it than just what happens in the browser window. I want the ability to create app-like experiences on the OS with web technology.\n\nVery little seems to be happening in that regard as far as I can tell.\n\n## Let's look at Apple and WebRTC\n\nA few years ago when I built [SimpleWebRTC](http://simplewebrtc.com) and the first version of [Talky.io](https://talky.io).\n\nI seem to have been one of the early web geeks to get really excited about WebRTC (the browser web technology that now powers Google Hangout video calls). Anyway, I managed to figure out how to build one of the first, possibly *the first* multi-user, peer-to-peer, video calling WebRTC app on the web that worked with more than 2 people and worked between Chrome and FireFox.\n\nThis was my first experience with Apple lagging behind in implementing new web APIs. Though Chrome and FireFox were both actively implementing and excited about WebRTC, there was not a peep from Apple. iOS still hasn’t added WebRTC support to this day. Though, they’ve apparently been hiring WebRTC engineers of the Safari team. So here’s hoping…\n\nBut it kinda makes sense, right? Why would they? They’d rather you use FaceTime, right?\n\nThey seem fine with improving *the browser engine*, but seem very slow to do anything that involves increasing the web’s reach in the OS.\n\nAnyway, we shipped [Talky.io](https://talky.io) as a web app that worked in Chrome and FireFox and eventually [@hjon](https://twitter.com/hjon) built an iOS app for it too.\n\nBut the thing that blew my mind was one day I just downloaded Chrome on Android, opened it to Talky.io and sure enough… IT JUST FRIGGIN’ WORKED!\n\nSince then I’ve been paying much closer attention to what’s happening in mobile Chrome and it’s very impressive.\n\n## Meanwhile on Android\n\nDuring the last couple of years, a few very bright, very persistent, and idealistic developers (many of them at Google) who believed in the web have been at work pushing for, and implementing new web standards that fill the gaps between native and web.\n\nIncredibly cool new stuff is coming, like:\n\n- WebBluetooth (yup, talking to bluetooth devices from JS on a webpage)\n- WebNFC is coming too, apparently\n\nThese things are going to blow the roof off IoT stuff (but that’s a whole other blog post).\n\nJust type `chrome://flags` in the URL bar of Chrome for Android and read through all the stuff that's currently in the works. It's amazing!\n\nAnyway, in the past couple of years these fine folks have built a feature that has me more excited than I’ve been by any web tech for a loooooong time:\n\n**ServiceWorker and the concept of Progressive Web Apps.**\n\n**I believe that the introduction of ServiceWorker and Progressive Web Apps on Android is the most important thing to happen to the mobile web since Steve first introduced the iPhone.**\n\nWhy?! Because, for the first time, we have a mobile platform with a huge user base that lets me build a web app that is treated as a first-class citizen by the platform!\n\n(note: yes, I’m aware there have been other attempts to do this, but none of those had 1.4 billion active users.)\n\nThese folks **finally gave the us a platform where web apps were first-class citizens**!\n\nAnd to be clear, I’m not just talking about a way to put a glorified bookmark on the home screen.\n\nI’m talking about a way for us to build web apps that are *indistinguishable* from native apps.\n\nThe terms that’s sticking for these types of apps are “Progressive Web Apps”.\n\nIn fact, I think Progressive Web Apps (PWAs) actually have a huge leg-up on native apps because you can start using them immediately. You don't have to jump to an app store and wait a minute or two until some huge binary is done downloading. They’re just web apps, they have URLs, they can be built to load super fast. Because… well, we’ve been optimizing load time performance on the web for a long time.\n\nThere’s just *so much less friction* for users to start using them. Just think what that would do to your conversion numbers!\n\nBecause of the improved on-boarding experience I believe that businesses targeting Android users should be strongly questioning whether they should be building native Android apps at all.\n\n## So what are Progressive Web Apps anyway?\n\nUnfortunately, for some reason Google has managed to teach a generation of devs the words “Polymer” and “Angular” while the vast majority of web developers that I meet and talk to today have still have **ZERO** idea what ServiceWorkers or Progressive Web Apps are.\n\nSome of this is because of the newness of it all, and some of this improving recently… but sheesh… I hope this changes.\n\nYou can think of a a progressive web app like this:\n\nIt’s an app written in HTML, CSS, and JS that can *completely masquerade as a native app*.\n\nThis includes:\n\n1. Living on the home screen\n2. Existing in the Android “app switcher” as a separate app (not as part of the browser app).\n3. True offline behavior… meaning when you tap the app icon… it *will* open regardless of current Internet status.\n4. The ability to run in the background and triggering OS-level notifications, even when the app and browser is closed.\n\nInstead of starting as a useless web page with a “please install our app” banner, these apps starts life running as a tab in your browser. Then *progressively* they become more installed/integrated into the OS.\n\nAt first, it’s really no different than any other website you visit. But, then if you return to that same website/app in your browser again, the browser itself will subtly ask the user if they’d like to add it to their home screen.\n\n*From this moment on it’s indistinguishable from a native app to the user*.\n\nAlso, if you build these correctly there’s usually nothing else the user has to download or wait for at all. This means that adding it to the home screen is *effectively an instant app install*. Again, imagine what that’ll do to your conversions? Eh? (no, I’m not Canadian)\n\nLuckily, we don’t have to entirely guess about the business impact. We actually have some real data from a certain $20 billion dollar online retailer in India called FlipKart, who did launched a PWA and have shared some of their numbers.\n\nKey highlights from FlipKart’s experience:\n\n- 40% returning visitors week over week\n- +63% conversions from Home screen visits\n- 3x time spent on FlipKart Lite\n\nThat data came from [Alex Russel’s recent Fluent Keynote on what’s next for mobile](https://www.oreilly.com/ideas/progressive-web-apps-and-whats-next-for-mobile). I encourage you to watch and share it with product managers and leaders at your company. It does a great job of explaining the how/why of Progressive Web Apps.\n\nFor related reading check out:\n\n- [Addy Osmani’s Getting started with Progressive Web Apps](https://addyosmani.com/blog/getting-started-with-progressive-web-apps/)\n- [Mozilla’s service worker examples at: ServiceWorke.rs](https://serviceworke.rs/)\n- [FlipKart’s original technical post about their PWA](http://tech-blog.flipkart.net/2015/11/progressive-web-app/)\n- [Jake Archibald’s Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/)\n- [Aditya Punjani's post on how they built FlipKart lite](https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883)\n\n## So what does this all mean for us?\n\nWe, as web developers, can finally build screaming fast, fully offline-able, and user-privacy-protecting apps that work cross-platform without the need for any friggin’ App Store taxes, approval processes, or doorslamming users up front with “please install my app to use this service”.\n\n\n## What about iOS support?\n\nWell, the beauty of it is, iOS user can still use your web app even if service worker support doesn’t exist.\n\nThey just don’t get the extra goodies, like offline and push notifications.\n\nBut you could also bundle the app with Cordova and use the [Service Worker plugin](https://www.npmjs.com/package/cordova-plugin-service-worker), that would, in theory let you use the same code to do those things but bundled up as an iOS app.\n\n## Why should I care? React Native exists now and solves the same problem.\n\nPersonally, I actually kind of wish tools like React Native didn’t exist. Stay with me, let me explain. React Native is an amazing and very impressive tool that lets us use our JS skills to write native iOS apps.\n\nBut as I’ve been saying… I don’t think we *should* be building native apps unless we absolutely have to.\n\nThe end result of React Native is that because it exists and because its largely aimed at *web developers* we now have web devs flocking to build native apps just because they can!\n\nI fear that this undermines our ability to use our collective bargaining power to encourage Apple to implement support for Progressive Web Apps.\n\nTo be clear, I completely understand why it was created and I have a lot of respect for the technical achievement it represents, and the developers behind it.\n\nI just don’t want us to stop pushing Apple to improve web support.\n\n\n## In summary\n\nSo, all this said, these things led me to finally exercising the only voting power I have as a consumer… I took my money and left.\n\nI don’t see this as switching to Android, I’m simply switching to the best mobile web app platform available today.\n\nThe web is the only truly open platform we’ve got. It’s the closest thing we have to a level playing field.\n\nThis is why I’m focusing all my efforts on building Progressive Web Apps… I hope you’ll do the same.\n\n—\n\nI’m [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter if you want to *nicely* tell me all the ways in which I’m wrong.\n\nSee ya on the Interwebz <3","outputFile":"/blog/why-i-switched-to-android.html","html":"<p>Monday of last week I was all excited. I had just gotten the green light to start prototyping a new <a href=\"https://developers.google.com/web/progressive-web-apps?hl=en\">Progressive Web App</a> for a client I&#39;ve been working with.</p><p>I pulled out an older Android phone that I keep around for development. Then I also got my sleek, new, shiny iPhone 6s out of my pocket, with its smooth curves and speedy OS. But as I looked at my iPhone I was kind of bummed out.</p><p>I realized that this slick piece of Apple hardware was <em>less</em> capable as a platform for web applications than my dusty old Android dev phone.</p><p>At that point I knew I was over iOS.</p><p>So, instead of opening my text editor I placed an order for a Nexus 6P and signed up for <a href=\"http://fi.google.com/\">Google fi phone service</a> (which is awesome, btw).</p><p>Just like that, after 7-some years, bye bye iOS.</p><a name=what-whats-wrong-with-ios class=anchor href=#what-whats-wrong-with-ios><h2><span class=header-link></span>What!? What’s wrong with iOS?</h2></a><p>Remember the original iPhone announcement? Where Steve introduced the amazing combination of a mobile phone, an iPod, and an <em>Internet communications device</em>.</p><p>I don’t know about you, but the idea of having a fully capable web browser in my pocket was <em>a huge part</em> of the appeal.</p><p>That’s never changed.</p><p>Of course I don’t know the full backstory, but it sure seemed like the original plan for 3rd party developers on iOS was to have us all just build apps using the web. Safari added support for making web apps that could be added to your home screen as an icon and by including a few magical <code>&lt;meta&gt;</code> tags you could use to create something that could sort of be “installed” to your home screen. Then, when you opened it would run in “standalone mode”.</p><p>These were, in many ways, the original “Progressive Web Apps” and this was sometime around 2009!</p><p>Think about it…</p><ol><li>They started in the browser, but then you could kind of upgrade them to “home screen status”.</li><li>When you ran them from the home screen they’d open with a splash screen and without any visible browser UI.</li><li>You could pick a loading screen and app icon.</li><li>You could even even pick from a few different status bar colors!</li></ol><p>I don’t know whether or not this type of app was actually intended to be the primary mechanism for 3rd party dev to build apps for iOS but regardless… it was way ahead of its time.</p><p>Unfortunately, the web platform itself wasn’t quite ready for the spotlight yet. It was <em>sort of</em> possible to build web apps that looked and performed like native apps, I was trying to do this 6 years ago using <a href=https://twitter.com/davidkaneda>David Kaneda’s</a> awesome, <a href=\"http://jqtjs.com/\">jQTouch</a> lib. Hilariously, <a href=https://vimeo.com/8254856>the corny little demo video</a> that I posted, led to a call from David and almost got me a job at <a href=\"https://www.sencha.com/products/extjs/\">extjs</a> right as they were rebranding to Sencha and starting to build <a href=\"https://www.sencha.com/products/touch/\">Sencha Touch</a>. But the story for offline was terrible.</p><p>But anyway, as it turned out, the capabilities of the web on iOS were not quite enough to satiate ravenous developers. So developers were left clawing for the ability to build stuff that ran natively on the device to give them better performance and deeper API access.</p><a name=enter-the-ios-sdk-and-app-store class=anchor href=#enter-the-ios-sdk-and-app-store><h2><span class=header-link></span>Enter the iOS SDK and App Store</h2></a><p>Apple made what turned out to be a really smart business decision: they released an iOS SDK and an App Store and the rest is history.</p><p>First, I was excited about “apps” just like everyone else seemed to be. Just think, here we had been busy building “applications” when we really should’ve been building “apps” all along! Who knew?! ;)</p><p>Anyway, I quickly found myself hunting for the best apps and switching to whatever bank, social networks, and other services had the best iOS apps. I bought a book on iOS development and built a hello world or two. My old co-worker <a href=https://twitter.com/cruffledoh>Ryan Youngman</a> made iSaber to let you swing a fake lightsaber at your friends with your phone. Every developer I knew was talking about iOS development but at some point the fun of all this iOS stuff dried up.</p><p>Seeing the hoops you had to jump through to ship an app on iOS didn’t seem right.</p><p><strong>How quickly developers traded away the wide-open-spaces of the web for a walled castle with a monarch enforcing a 30% tax.</strong></p><p>So, I decided to focus on building “installable web apps” for iOS instead because surely, the web would catch up.</p><a name=however-this-became-problematic class=anchor href=#however-this-became-problematic><h2><span class=header-link></span>However, this became problematic</h2></a><p>Despite the popularity of native apps the original idea of these standalone installable web apps has continued to be supported for new versions of iOS. But, they didn’t fit into Apple’s business model! The App Store turned into a huge business, the term “app” was going mainstream, and every business suddenly felt they needed to have their own “app” whether they had any users or not.</p><p>As Apple’s app business took off these capabilities very clearly, very quickly, and somewhat unsurprisingly were deprioritized. The end result, for those of us still trying to build installable web apps for iOS was that with nearly every new iOS release some key feature that we were depending on broke.</p><p>I’m talking about stuff that QA should have caught, stuff that if <em>anybody</em> at Apple was actually building apps this way would have noticed before they released.</p><p>One quick example that bit me was how they broke the ability to link out to an external website from within an app running in “standalone” mode. <code>target=_blank</code> no longer worked, neither did <code>window.open</code> or anything else I could think of. So now since our “standalone” app didn’t have a URL bar or back button it would simply take the user to the link they clicked within the same full-screen web view <em>with no way to return to the app</em>! The <em>only</em> way out was forcibly quitting the app (hopefully the user knew how to do that).</p><p>We were running a chat product at the time, so anytime someone pasted a URL into chat it was essentially a trap.</p><p>These sorts of issues continued to happen release after release. Soon it became obvious that while you can <em>sort of</em> build these types of apps on iOS you can’t really depend on them not breaking with the next update.</p><p>The message from Apple seemed clear: web apps are second-class citizens on iOS</p><a name=what-of-android class=anchor href=#what-of-android><h2><span class=header-link></span>What of Android?</h2></a><p>I didn’t care much at the time, but somewhere in the middle of all of this, Android appeared on the scene. It promised to be a more open alternative as a mobile platform. It was a collaboration between several big companies, it was their attempt to essentially fight off the fruit-company-comeback-kid-turned-gorilla and its Mighty Joe App Store.</p><p>It started gaining traction, but its web experience at the beginning was quite sub-par.</p><a name=fast-forward-five-years class=anchor href=#fast-forward-five-years><h2><span class=header-link></span>Fast-Forward five years…</h2></a><ol><li>People are <a href=https://medium.com/swlh/nobody-wants-your-app-6af1f7f69cb7>somewhat burnt out on Apps</a>.</li><li>The vast majority of developers building native iOS apps never even make back their expenses. <a href=http://www.forbes.com/sites/tristanlouis/2013/08/10/how-much-do-average-apps-make/#426a415f12cb>We knew this in 2013</a>.</li><li>A <em>few</em> games are still making money, but that’s a lottery.</li><li>Meanwhile, there are over 1.4 billion active Android users.</li><li>Android switched to using Chrome as the default browser.</li><li>Chrome, Opera, and Firefox have added features to allow building actual app experiences via the Web.</li></ol><p>And here I am… switching to Android.</p><a name=so-why-android-isnt-it-just-more-of-the-same class=anchor href=#so-why-android-isnt-it-just-more-of-the-same><h2><span class=header-link></span>So why Android? Isn’t it just more of the same?</h2></a><p>Yes. It is. Android itself bores me, honestly. There’s nothing all that terribly new or exciting here.’</p><p><strong>save one very important detail…</strong></p><p><strong>IT’S CURRENTLY THE BEST MOBILE WEB APP PLATFORM</strong></p><a name=what-do-you-mean-doesnt-safari-run-my-js-is-faster class=anchor href=#what-do-you-mean-doesnt-safari-run-my-js-is-faster><h2><span class=header-link></span>What do you mean?! Doesn’t Safari run my JS is faster?</h2></a><p>Most people when they say this are referring to <a href=https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889>this post by Jeff Atwood (a.k.a. codinghorror)</a>, which <a href=https://joreteg.com/blog/viability-of-js-frameworks-on-mobile>I wrote a whole response post to, if you’re interested</a>.</p><p>So yeah, Safari runs my JS faster, but guess what… most of your users won’t have a shiny new iPhone 6s, and as <a href=\"https://www.youtube.com/watch?v=okk0BGV9oY0\">I’ve said before</a>, betting on desktop-like performance on the mobile web, or sending huge frameworks like Ember to a mobile device probably isn’t a great idea.</p><p>With performance, there is such a thing as “good enough”. It wouldn’t matter if Safari ran JS 50x faster! The <em>only</em> thing that matters is whether my app runs <em>fast enough</em>. Beyond that, as a user, I don’t care.</p><p>As it turns out, it’s possible to write web apps that <a href=http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org>run at 60fps even on older, crappier hardware</a>.</p><p>But, all that aside, note this: I said “<em>better app platform</em>” not faster JavaScript runtime.</p><a name=so-why-not-just-use-chrome-for-ios class=anchor href=#so-why-not-just-use-chrome-for-ios><h2><span class=header-link></span>So why not just use Chrome for iOS?!</h2></a><p>As I started tweeted about switching I was surprised to realize that many people don’t know that Chrome, Opera, and Firefox for iOS all just using WebKit web views under the hood.</p><p>In fact, apps that include a different browser engine are a violation of Apple’s terms of service.</p><p>They&#39;re just different UIs on the same browser engine.</p><a name=but-isnt-webkit-getting-better class=anchor href=#but-isnt-webkit-getting-better><h2><span class=header-link></span>But isn’t WebKit getting better?</h2></a><p>Yes, it seems like <a href=https://developer.apple.com/library/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html>they&#39;re picking up some momentum recently</a>.</p><p>But, there’s a whole lot more to it than just what happens in the browser window. I want the ability to create app-like experiences on the OS with web technology.</p><p>Very little seems to be happening in that regard as far as I can tell.</p><a name=let39s-look-at-apple-and-webrtc class=anchor href=#let39s-look-at-apple-and-webrtc><h2><span class=header-link></span>Let&#39;s look at Apple and WebRTC</h2></a><p>A few years ago when I built <a href=http://simplewebrtc.com>SimpleWebRTC</a> and the first version of <a href=https://talky.io>Talky.io</a>.</p><p>I seem to have been one of the early web geeks to get really excited about WebRTC (the browser web technology that now powers Google Hangout video calls). Anyway, I managed to figure out how to build one of the first, possibly <em>the first</em> multi-user, peer-to-peer, video calling WebRTC app on the web that worked with more than 2 people and worked between Chrome and FireFox.</p><p>This was my first experience with Apple lagging behind in implementing new web APIs. Though Chrome and FireFox were both actively implementing and excited about WebRTC, there was not a peep from Apple. iOS still hasn’t added WebRTC support to this day. Though, they’ve apparently been hiring WebRTC engineers of the Safari team. So here’s hoping…</p><p>But it kinda makes sense, right? Why would they? They’d rather you use FaceTime, right?</p><p>They seem fine with improving <em>the browser engine</em>, but seem very slow to do anything that involves increasing the web’s reach in the OS.</p><p>Anyway, we shipped <a href=https://talky.io>Talky.io</a> as a web app that worked in Chrome and FireFox and eventually <a href=https://twitter.com/hjon>@hjon</a> built an iOS app for it too.</p><p>But the thing that blew my mind was one day I just downloaded Chrome on Android, opened it to Talky.io and sure enough… IT JUST FRIGGIN’ WORKED!</p><p>Since then I’ve been paying much closer attention to what’s happening in mobile Chrome and it’s very impressive.</p><a name=meanwhile-on-android class=anchor href=#meanwhile-on-android><h2><span class=header-link></span>Meanwhile on Android</h2></a><p>During the last couple of years, a few very bright, very persistent, and idealistic developers (many of them at Google) who believed in the web have been at work pushing for, and implementing new web standards that fill the gaps between native and web.</p><p>Incredibly cool new stuff is coming, like:</p><ul><li>WebBluetooth (yup, talking to bluetooth devices from JS on a webpage)</li><li>WebNFC is coming too, apparently</li></ul><p>These things are going to blow the roof off IoT stuff (but that’s a whole other blog post).</p><p>Just type <code>chrome://flags</code> in the URL bar of Chrome for Android and read through all the stuff that&#39;s currently in the works. It&#39;s amazing!</p><p>Anyway, in the past couple of years these fine folks have built a feature that has me more excited than I’ve been by any web tech for a loooooong time:</p><p><strong>ServiceWorker and the concept of Progressive Web Apps.</strong></p><p><strong>I believe that the introduction of ServiceWorker and Progressive Web Apps on Android is the most important thing to happen to the mobile web since Steve first introduced the iPhone.</strong></p><p>Why?! Because, for the first time, we have a mobile platform with a huge user base that lets me build a web app that is treated as a first-class citizen by the platform!</p><p>(note: yes, I’m aware there have been other attempts to do this, but none of those had 1.4 billion active users.)</p><p>These folks <strong>finally gave the us a platform where web apps were first-class citizens</strong>!</p><p>And to be clear, I’m not just talking about a way to put a glorified bookmark on the home screen.</p><p>I’m talking about a way for us to build web apps that are <em>indistinguishable</em> from native apps.</p><p>The terms that’s sticking for these types of apps are “Progressive Web Apps”.</p><p>In fact, I think Progressive Web Apps (PWAs) actually have a huge leg-up on native apps because you can start using them immediately. You don&#39;t have to jump to an app store and wait a minute or two until some huge binary is done downloading. They’re just web apps, they have URLs, they can be built to load super fast. Because… well, we’ve been optimizing load time performance on the web for a long time.</p><p>There’s just <em>so much less friction</em> for users to start using them. Just think what that would do to your conversion numbers!</p><p>Because of the improved on-boarding experience I believe that businesses targeting Android users should be strongly questioning whether they should be building native Android apps at all.</p><a name=so-what-are-progressive-web-apps-anyway class=anchor href=#so-what-are-progressive-web-apps-anyway><h2><span class=header-link></span>So what are Progressive Web Apps anyway?</h2></a><p>Unfortunately, for some reason Google has managed to teach a generation of devs the words “Polymer” and “Angular” while the vast majority of web developers that I meet and talk to today have still have <strong>ZERO</strong> idea what ServiceWorkers or Progressive Web Apps are.</p><p>Some of this is because of the newness of it all, and some of this improving recently… but sheesh… I hope this changes.</p><p>You can think of a a progressive web app like this:</p><p>It’s an app written in HTML, CSS, and JS that can <em>completely masquerade as a native app</em>.</p><p>This includes:</p><ol><li>Living on the home screen</li><li>Existing in the Android “app switcher” as a separate app (not as part of the browser app).</li><li>True offline behavior… meaning when you tap the app icon… it <em>will</em> open regardless of current Internet status.</li><li>The ability to run in the background and triggering OS-level notifications, even when the app and browser is closed.</li></ol><p>Instead of starting as a useless web page with a “please install our app” banner, these apps starts life running as a tab in your browser. Then <em>progressively</em> they become more installed/integrated into the OS.</p><p>At first, it’s really no different than any other website you visit. But, then if you return to that same website/app in your browser again, the browser itself will subtly ask the user if they’d like to add it to their home screen.</p><p><em>From this moment on it’s indistinguishable from a native app to the user</em>.</p><p>Also, if you build these correctly there’s usually nothing else the user has to download or wait for at all. This means that adding it to the home screen is <em>effectively an instant app install</em>. Again, imagine what that’ll do to your conversions? Eh? (no, I’m not Canadian)</p><p>Luckily, we don’t have to entirely guess about the business impact. We actually have some real data from a certain $20 billion dollar online retailer in India called FlipKart, who did launched a PWA and have shared some of their numbers.</p><p>Key highlights from FlipKart’s experience:</p><ul><li>40% returning visitors week over week</li><li>+63% conversions from Home screen visits</li><li>3x time spent on FlipKart Lite</li></ul><p>That data came from <a href=https://www.oreilly.com/ideas/progressive-web-apps-and-whats-next-for-mobile>Alex Russel’s recent Fluent Keynote on what’s next for mobile</a>. I encourage you to watch and share it with product managers and leaders at your company. It does a great job of explaining the how/why of Progressive Web Apps.</p><p>For related reading check out:</p><ul><li><a href=\"https://addyosmani.com/blog/getting-started-with-progressive-web-apps/\">Addy Osmani’s Getting started with Progressive Web Apps</a></li><li><a href=\"https://serviceworke.rs/\">Mozilla’s service worker examples at: ServiceWorke.rs</a></li><li><a href=\"http://tech-blog.flipkart.net/2015/11/progressive-web-app/\">FlipKart’s original technical post about their PWA</a></li><li><a href=\"https://jakearchibald.com/2014/offline-cookbook/\">Jake Archibald’s Offline Cookbook</a></li><li><a href=https://medium.com/@AdityaPunjani/building-flipkart-lite-a-progressive-web-app-2c211e641883>Aditya Punjani&#39;s post on how they built FlipKart lite</a></li></ul><a name=so-what-does-this-all-mean-for-us class=anchor href=#so-what-does-this-all-mean-for-us><h2><span class=header-link></span>So what does this all mean for us?</h2></a><p>We, as web developers, can finally build screaming fast, fully offline-able, and user-privacy-protecting apps that work cross-platform without the need for any friggin’ App Store taxes, approval processes, or doorslamming users up front with “please install my app to use this service”.</p><a name=what-about-ios-support class=anchor href=#what-about-ios-support><h2><span class=header-link></span>What about iOS support?</h2></a><p>Well, the beauty of it is, iOS user can still use your web app even if service worker support doesn’t exist.</p><p>They just don’t get the extra goodies, like offline and push notifications.</p><p>But you could also bundle the app with Cordova and use the <a href=https://www.npmjs.com/package/cordova-plugin-service-worker>Service Worker plugin</a>, that would, in theory let you use the same code to do those things but bundled up as an iOS app.</p><a name=why-should-i-care-react-native-exists-now-and-solves-the-same-problem class=anchor href=#why-should-i-care-react-native-exists-now-and-solves-the-same-problem><h2><span class=header-link></span>Why should I care? React Native exists now and solves the same problem.</h2></a><p>Personally, I actually kind of wish tools like React Native didn’t exist. Stay with me, let me explain. React Native is an amazing and very impressive tool that lets us use our JS skills to write native iOS apps.</p><p>But as I’ve been saying… I don’t think we <em>should</em> be building native apps unless we absolutely have to.</p><p>The end result of React Native is that because it exists and because its largely aimed at <em>web developers</em> we now have web devs flocking to build native apps just because they can!</p><p>I fear that this undermines our ability to use our collective bargaining power to encourage Apple to implement support for Progressive Web Apps.</p><p>To be clear, I completely understand why it was created and I have a lot of respect for the technical achievement it represents, and the developers behind it.</p><p>I just don’t want us to stop pushing Apple to improve web support.</p><a name=in-summary class=anchor href=#in-summary><h2><span class=header-link></span>In summary</h2></a><p>So, all this said, these things led me to finally exercising the only voting power I have as a consumer… I took my money and left.</p><p>I don’t see this as switching to Android, I’m simply switching to the best mobile web app platform available today.</p><p>The web is the only truly open platform we’ve got. It’s the closest thing we have to a level playing field.</p><p>This is why I’m focusing all my efforts on building Progressive Web Apps… I hope you’ll do the same.</p><p>—</p><p>I’m <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on twitter if you want to <em>nicely</em> tell me all the ways in which I’m wrong.</p><p>See ya on the Interwebz &lt;3</p>","preview":"<p>Monday of last week I was all excited. I had just gotten the green light to start prototyping a new <a href=\"https://developers.google.com/web/progressive-web-apps?hl=en\">Progressive Web App</a> for a client I&#39;ve been working with.</p><p>I pulled out an older Android phone that I keep around for development. Then I also got my sleek, new, shiny iPhone 6s out of my pocket, with its smooth curves and speedy OS. But as I looked at my iPhone I was kind of bummed out.</p>"},{"title":"The viability of JS frameworks on mobile","date":"2015-10-12T18:20:00.000Z","tags":"mobile, performance, frameworks, js","slug":"viability-of-js-frameworks-on-mobile","scripts":["//platform.twitter.com/widgets.js"],"url":"/blog/viability-of-js-frameworks-on-mobile","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/10/viability-of-frameworks-on-mobile.md","markdown":"Whether I like it or not, not everyone using my web apps will be running iOS 9 on an iPhone 6S or a Nexus 6P and connecting via super-speedy wifi.\n\nThe reality is often anything but that. 3G connections and older hardware is often the norm. Google reports that there are [1.4 billion active Android users][1]. Many of them, will no doubt, be running less-than-top-of-the-line hardware.\n\nAnd, if you read stuff like [Jeff Atwood’s recent post][2] on Android performance you may feel that things are pretty bleak for the mobile web. \n\nA few notable pull quotes from that post:\n\n> In a nutshell, the fastest known Android device available today -- and there are millions of Android devices much slower than that out there -- performs 5× slower than a new iPhone 6s, and a little worse than a 2012 era iPhone 5 in Ember. How depressing.\n\t\n> We've done enough research to know this issue is not really specific to Ember, but also affects Angular and **most other heavy/complex JavaScript on Android**. Why?\n\nPerhaps the “heavy/complex” part is the problem?\n\nContinuing…\n\n> This is becoming more and more of a systemic problem in the Android ecosystem, one that will not go away in the next few years, and it may affect the future of Discourse, since we bet heavily on near-desktop JavaScript performance on mobile devices. That is clearly happening on iOS but it is quite disastrously the opposite on Android.\n\nOk, there’s the state of the mobile web ecosystem, per Atwood.\n\nHe ends with this line:\n\n> I am no longer optimistic this will change in the next two years, and there are untold millions of slow Android devices out there, so we need to start considering alternatives for the Discourse project.\n\nBummer, right?! Let’s all go home. At least there’s React Native so we can all pretend we’re building web apps while actually writing native apps ;)\n\nSo, is the mobile web a dead-end for apps?\n\n## Hang on a minute…\n\nIf you didn’t catch it. The “Discourse” app Atwood is referring to is the app he used to publish the post *about* Discourse. It’s a forum app of sorts. So meta! \n\nAnyway, when I realized this, I open the network panel of dev tools on that Discourse page and there was 659kb of JS transferred across the wire (that’s the gzipped size). \n\nIn my opinion, that’s the same as forfeiting on mobile before you even start.\n\nI think we *have* to do better than this to be viable on mobile.\n\nI’m not blaming or even trying to criticize Atwood or Discourse here. A huge number of mobile web apps are built this way so this could really have been *any number* of sites.\n\nMy question is simply: are all these heavier tools/frameworks even viable for mobile use?\n\nI’m not convinced they all are. \n\n## Let’s look at some research\n\nThe fine folks at The Filament Group [published some research last December][4] about load time performance of the TodoMVC app of 5 popular web frameworks. Obviously, TodoMVC is a bit of a contrived example and may not be indicative of a real-world app. But, it’s a great fit for this type of research because it will include all the base assets for a given framework, and at least hopefully, the best practices as well.\n\nYou may be thinking: *”this is load time performance, Atwood was talking about runtime performance!”*\n\nYes, Atwood was discussing runtime performance, I’ll get to that shortly. *But, the user doesn’t care why they’re waiting*, so load time is clearly an important part of performance too.\n\nThe whole post is worth reading, but the summary of the research findings can be seen in their graphs:\n\n![load time screenshots][3]\n\nIn my opinion, the data for Angular and Ember (the two options that Atwood mentioned) flat out disqualify them for mobile use. \n\nIf you know that I co-created Ampersand you may assume that I’m  flaming against other frameworks and trying to sell you on Ampersand.\n\nNope.\n\nThe last two apps I built actually didn’t contain any Ampersand code at all. If you’ve read my [recent, excited post about Redux][5] that probably doesn’t surprise you. \n\n**I don’t care what you use, beyond how it affects how I experience your app as a user.**\n\nTools are merely a means to an end. \n\nOk, I lied. I do *sort of* care what you pick. But, only because I don’t want your experiences as a developer lead you to think the mobile web isn’t viable just because sending a megabyte of JS made the app slow.\n\n## It’s not game over\n\nMaybe the mobile web is fast enough and we just need to stop pretending we can get away with ineffeciencies that we don’t feel on a desktop.\n\nI think we need to be much more minimalist from the start.\n\nThe ever brilliant Dominic Tarr once said this:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">if you want to write fast software, use a slow computer</p>&mdash; Dominic Tarr (@dominictarr) <a href=\"https://twitter.com/dominictarr/status/629992939738005504\">August 8, 2015</a></blockquote>\n\nHow many web developers, to this day, don’t test on a phone locally when building apps? This isn’t just about small screens, we need to assume that we’re building for weaker, slower computers. I think we need to bake mobile into our dev workflow, not just as some final pre-launch check. If you’re curious, I [use this setup][6] while developing.\n\nRegardless, even though phones may continue to get faster and faster, I think it’s myopic to assume we can just ignore current speed problems in hopes that they’ll be resolved by faster hardware. Although, phones may continue to improve, I don’t think phones should be our only runtime target. \n\nAs this whole Internet of Things, um… thing becomes more of a thing (wow, that sentence was epically terrible #leavingitanyway). It seems likely there will be a some other platforms we’ll want to write for that are *not* phones. Things like watches, TVs, VR, and small computers hooked to to large displays.\n\n## That’s nice, Henrik. So what do you propose we do?\n\nFirst, as [I’ve written before][7], I think all the HTML we can infer from the URL alone should be rendered at build time to static HTML files. As it turns out, browsers, even “slow” mobile ones are pretty friggin’ fast at rendering HTML sent from the server.\n\nSecondly, I think we need to do more with less, let me explain…\n\nMuch of the hoop-jumping in Backbone, Ampersand, Ember, and Angular have to do with properly binding state to the UI. They certainly do more than that, but even many of the data features, on closer inspection have to do with supporting those binding capabilities. As a result, they all ship with an event system of some kind, and most have a way to create derived/calculated properties that can also be observed. \n\nYou can certainly use React as a view layer for any of those, but  one of the big wins with React is that at the point where you can do a cheap re-render it removes the need for many of those other features that add complexity to your system.\n\nAs a simple example, if you’ve got a `Backbone.Collection` with models in it, how do you go about rendering the length of that collection to the UI using Backbone paradigms? Getting the value in the template initially is certainly easy if you know it at the point when it’s first rendered. But, how do you bind that value so that any change in the collection will also update that length that you’ve rendered into the DOM?\n\nYou could set it up to re-render on all add/remove/change events or, you could create an observable property somewhere that did the same and then track that as you would any other property. That total would be updated with any changes, and then, you’d bind it to the view. \n\nBut all this feels a bit silly. If you’ve ever inspected an instance of a `Backbone.Collection` you know that `collection.models` is simply an array of `Backbone.Model`’s.  An Array already *has* a value for length, it’s called `.length` \\*\\*sigh\\*\\*!\n\nContrast that to React or anything else that allows us to inexpensively re-render our whole app at will (the promise of React). When we have that, we can just use that `length` property directly in our `render` method in the individual component that cares about it. Now whenever we have any change in any of the state in our app we re-render. \n\nSo now it becomes this simple:\n\n```js\nReact.createClass({\n  render: function () {\n  \treturn <span>{this.props.species.length}</span>\n  }\n})\n```\n\nOr, if using the [new stateless functional components][8] in React 0.14, with ES6 destructuring, and assuming `species` is our array of objects here it gets downright beautiful. The entire component could be written as:\n\n```js\nvar Aquarium = ({species}) => (\n  <span>{species.length}</span>\n);\n```\n\nAesthetics aside, just think how much less stuff we need:\n\n1. We no longer need to register multiple event listeners on the collection (less code, less memory use).\n2. We no longer need to define another property that we have to compute that creates an observable duplicate of what we already have with `.length` (less code, less memory).\n3. Shoot, we may not even need the collection or any of its models to be observable at all! The collection could be a plain ‘ol JavaScript array containing plain ‘ol JavaScript objects instead of custom created observable models (a lot less code, less memory, less computation)\n\n**We no longer need many of the features in those heavy frameworks at all.**\n\nReact then becomes the biggest pill you have to swallow. In my simple tests with React, and React-DOM 0.14, built with webpack and gzipped you end up around 37kb. \n\nFor comparison, jQuery 2.x weighs in at about 29kb min+gzip. So, really, we’re doing pretty good and my hope would be that eventually, much like happened with jQuery, many of the core features of React would simply be part of browser API.\n\nAnyway, now rather than needing observable models, observable collections, the ability to subscribe to changes on derived properties and all that jazz, we can probably get away with an architecture that works more like this:\n\n1. A single application state object as a JSON-like structure of plain JS arrays and objects.\n2. A set of mutator functions that represent all the ways that state can be changed to be used any time there needs to be a change in the state tree (you could follow immutability principles here too, if you’d like and just make sure you replace anything you change).\n3. Re-render the whole app any time these mutator functions are done.\n\nI’m simplifying a bit, but that’s pretty much how Redux works. Read [my Redux post][5] for a better overview. But, you don’t need Redux to implement a simple pattern as described above. Oh, an by comparison Redux weighs practically nothing at approximately 2kb.\n\nThe point is, that **by leaning on React for DOM syncing we can dump a bunch of stuff**.\n\nImagine how much less code it takes, and how much less work is required of the browser to deal with a simple set of objects and arrays and a smart render call. \n\nAs opposed to shipping a class system, an event system, a templating system, a custom set of observables types, a DOM library like jQuery (required by some of them), all the extra app-specific code you’d write describing those models and collections and all their properties. Instantiating models and keeping all their internal state and caches those models use to enable their capabilities will require more memory and computation. The processing and memory required to do value comparisons (also known as “dirty-checking”) to see whether a `change` needs to be triggered.\n\nThere’s just **so many more layers of code that have to run even for simple changes to the state of the app**. \n\nThe ability to re-render *at will* allows for a fundamentally lighter approach.\n\nUnfortunately, I don’t have any perfect example I can just line up next to the Ember runtime performance test Atwood links to, but it’s not hard to imagine that all these simplifications that flat-out reduce the amount of computation required, would also have a very positive impact on runtime performance. \n\nAlso, to clarify, total file size may not matter so much as long as load time and runtime performance are still good. \n\n## So, what’s next?\n\nUnless we want the web to be seen as a second class citizen on mobile, I think we need to address these performance issues. I believe the web can be fast even on mediocre hardware while providing a good developer experience. BTW, if you doubt the developer experience part [watch Dan Abramov’s talk from React Europe][9].\n\nI certainly don’t have all the answers here and I’m not saying React + Redux is some kind of panacea. I just like what they enable.\n\nBut so far, pre-rendering all known HTML and using the lighter approaches described here seems to be working well for me. I’ll keep sharing my thoughts as I keep building more stuff. Please do the same.\n\nHit me up on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg) or better yet, write a response on your blog to continue the conversation. Go go gadget web!\n\n[1]: http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856\n[2]: https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889\n[3]: https://cldup.com/jjiqPZLLEK-2000x2000.png\n[4]: https://www.filamentgroup.com/lab/mv-initial-load-times.html\n[5]: https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux\n[6]: https://github.com/henrikjoreteg/hjs-webpack#developing-on-multiple-devices-at-once\n[7]: https://blog.andyet.com/2015/05/18/lazymorphic-apps-bringing-back-static-web\n[8]: https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components\n[9]: https://www.youtube.com/watch?v=xsSnOQynTHs","outputFile":"/blog/viability-of-js-frameworks-on-mobile.html","html":"<p>Whether I like it or not, not everyone using my web apps will be running iOS 9 on an iPhone 6S or a Nexus 6P and connecting via super-speedy wifi.</p><p>The reality is often anything but that. 3G connections and older hardware is often the norm. Google reports that there are <a href=http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856>1.4 billion active Android users</a>. Many of them, will no doubt, be running less-than-top-of-the-line hardware.</p><p>And, if you read stuff like <a href=https://meta.discourse.org/t/the-state-of-javascript-on-android-in-2015-is-poor/33889>Jeff Atwood’s recent post</a> on Android performance you may feel that things are pretty bleak for the mobile web.</p><p>A few notable pull quotes from that post:</p><blockquote><p>In a nutshell, the fastest known Android device available today -- and there are millions of Android devices much slower than that out there -- performs 5× slower than a new iPhone 6s, and a little worse than a 2012 era iPhone 5 in Ember. How depressing.</p></blockquote><blockquote><p>We&#39;ve done enough research to know this issue is not really specific to Ember, but also affects Angular and <strong>most other heavy/complex JavaScript on Android</strong>. Why?</p></blockquote><p>Perhaps the “heavy/complex” part is the problem?</p><p>Continuing…</p><blockquote><p>This is becoming more and more of a systemic problem in the Android ecosystem, one that will not go away in the next few years, and it may affect the future of Discourse, since we bet heavily on near-desktop JavaScript performance on mobile devices. That is clearly happening on iOS but it is quite disastrously the opposite on Android.</p></blockquote><p>Ok, there’s the state of the mobile web ecosystem, per Atwood.</p><p>He ends with this line:</p><blockquote><p>I am no longer optimistic this will change in the next two years, and there are untold millions of slow Android devices out there, so we need to start considering alternatives for the Discourse project.</p></blockquote><p>Bummer, right?! Let’s all go home. At least there’s React Native so we can all pretend we’re building web apps while actually writing native apps ;)</p><p>So, is the mobile web a dead-end for apps?</p><a name=hang-on-a-minute class=anchor href=#hang-on-a-minute><h2><span class=header-link></span>Hang on a minute…</h2></a><p>If you didn’t catch it. The “Discourse” app Atwood is referring to is the app he used to publish the post <em>about</em> Discourse. It’s a forum app of sorts. So meta!</p><p>Anyway, when I realized this, I open the network panel of dev tools on that Discourse page and there was 659kb of JS transferred across the wire (that’s the gzipped size).</p><p>In my opinion, that’s the same as forfeiting on mobile before you even start.</p><p>I think we <em>have</em> to do better than this to be viable on mobile.</p><p>I’m not blaming or even trying to criticize Atwood or Discourse here. A huge number of mobile web apps are built this way so this could really have been <em>any number</em> of sites.</p><p>My question is simply: are all these heavier tools/frameworks even viable for mobile use?</p><p>I’m not convinced they all are.</p><a name=lets-look-at-some-research class=anchor href=#lets-look-at-some-research><h2><span class=header-link></span>Let’s look at some research</h2></a><p>The fine folks at The Filament Group <a href=https://www.filamentgroup.com/lab/mv-initial-load-times.html>published some research last December</a> about load time performance of the TodoMVC app of 5 popular web frameworks. Obviously, TodoMVC is a bit of a contrived example and may not be indicative of a real-world app. But, it’s a great fit for this type of research because it will include all the base assets for a given framework, and at least hopefully, the best practices as well.</p><p>You may be thinking: <em>”this is load time performance, Atwood was talking about runtime performance!”</em></p><p>Yes, Atwood was discussing runtime performance, I’ll get to that shortly. <em>But, the user doesn’t care why they’re waiting</em>, so load time is clearly an important part of performance too.</p><p>The whole post is worth reading, but the summary of the research findings can be seen in their graphs:</p><p><img src=https://cldup.com/jjiqPZLLEK-2000x2000.png alt=\"load time screenshots\"></p><p>In my opinion, the data for Angular and Ember (the two options that Atwood mentioned) flat out disqualify them for mobile use.</p><p>If you know that I co-created Ampersand you may assume that I’m flaming against other frameworks and trying to sell you on Ampersand.</p><p>Nope.</p><p>The last two apps I built actually didn’t contain any Ampersand code at all. If you’ve read my <a href=https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux>recent, excited post about Redux</a> that probably doesn’t surprise you.</p><p><strong>I don’t care what you use, beyond how it affects how I experience your app as a user.</strong></p><p>Tools are merely a means to an end.</p><p>Ok, I lied. I do <em>sort of</em> care what you pick. But, only because I don’t want your experiences as a developer lead you to think the mobile web isn’t viable just because sending a megabyte of JS made the app slow.</p><a name=its-not-game-over class=anchor href=#its-not-game-over><h2><span class=header-link></span>It’s not game over</h2></a><p>Maybe the mobile web is fast enough and we just need to stop pretending we can get away with ineffeciencies that we don’t feel on a desktop.</p><p>I think we need to be much more minimalist from the start.</p><p>The ever brilliant Dominic Tarr once said this:</p><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>if you want to write fast software, use a slow computer</p>&mdash; Dominic Tarr (@dominictarr) <a href=https://twitter.com/dominictarr/status/629992939738005504>August 8, 2015</a></blockquote><p>How many web developers, to this day, don’t test on a phone locally when building apps? This isn’t just about small screens, we need to assume that we’re building for weaker, slower computers. I think we need to bake mobile into our dev workflow, not just as some final pre-launch check. If you’re curious, I <a href=https://github.com/henrikjoreteg/hjs-webpack#developing-on-multiple-devices-at-once>use this setup</a> while developing.</p><p>Regardless, even though phones may continue to get faster and faster, I think it’s myopic to assume we can just ignore current speed problems in hopes that they’ll be resolved by faster hardware. Although, phones may continue to improve, I don’t think phones should be our only runtime target.</p><p>As this whole Internet of Things, um… thing becomes more of a thing (wow, that sentence was epically terrible #leavingitanyway). It seems likely there will be a some other platforms we’ll want to write for that are <em>not</em> phones. Things like watches, TVs, VR, and small computers hooked to to large displays.</p><a name=thats-nice-henrik-so-what-do-you-propose-we-do class=anchor href=#thats-nice-henrik-so-what-do-you-propose-we-do><h2><span class=header-link></span>That’s nice, Henrik. So what do you propose we do?</h2></a><p>First, as <a href=https://blog.andyet.com/2015/05/18/lazymorphic-apps-bringing-back-static-web>I’ve written before</a>, I think all the HTML we can infer from the URL alone should be rendered at build time to static HTML files. As it turns out, browsers, even “slow” mobile ones are pretty friggin’ fast at rendering HTML sent from the server.</p><p>Secondly, I think we need to do more with less, let me explain…</p><p>Much of the hoop-jumping in Backbone, Ampersand, Ember, and Angular have to do with properly binding state to the UI. They certainly do more than that, but even many of the data features, on closer inspection have to do with supporting those binding capabilities. As a result, they all ship with an event system of some kind, and most have a way to create derived/calculated properties that can also be observed.</p><p>You can certainly use React as a view layer for any of those, but one of the big wins with React is that at the point where you can do a cheap re-render it removes the need for many of those other features that add complexity to your system.</p><p>As a simple example, if you’ve got a <code>Backbone.Collection</code> with models in it, how do you go about rendering the length of that collection to the UI using Backbone paradigms? Getting the value in the template initially is certainly easy if you know it at the point when it’s first rendered. But, how do you bind that value so that any change in the collection will also update that length that you’ve rendered into the DOM?</p><p>You could set it up to re-render on all add/remove/change events or, you could create an observable property somewhere that did the same and then track that as you would any other property. That total would be updated with any changes, and then, you’d bind it to the view.</p><p>But all this feels a bit silly. If you’ve ever inspected an instance of a <code>Backbone.Collection</code> you know that <code>collection.models</code> is simply an array of <code>Backbone.Model</code>’s. An Array already <em>has</em> a value for length, it’s called <code>.length</code> **sigh**!</p><p>Contrast that to React or anything else that allows us to inexpensively re-render our whole app at will (the promise of React). When we have that, we can just use that <code>length</code> property directly in our <code>render</code> method in the individual component that cares about it. Now whenever we have any change in any of the state in our app we re-render.</p><p>So now it becomes this simple:</p><pre><code class=undefinedjs>React.createClass({\n  render: function () {\n      return &lt;span&gt;{this.props.species.length}&lt;/span&gt;\n  }\n})\n</code></pre><p>Or, if using the <a href=https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components>new stateless functional components</a> in React 0.14, with ES6 destructuring, and assuming <code>species</code> is our array of objects here it gets downright beautiful. The entire component could be written as:</p><pre><code class=undefinedjs>var Aquarium = ({species}) =&gt; (\n  &lt;span&gt;{species.length}&lt;/span&gt;\n);\n</code></pre><p>Aesthetics aside, just think how much less stuff we need:</p><ol><li>We no longer need to register multiple event listeners on the collection (less code, less memory use).</li><li>We no longer need to define another property that we have to compute that creates an observable duplicate of what we already have with <code>.length</code> (less code, less memory).</li><li>Shoot, we may not even need the collection or any of its models to be observable at all! The collection could be a plain ‘ol JavaScript array containing plain ‘ol JavaScript objects instead of custom created observable models (a lot less code, less memory, less computation)</li></ol><p><strong>We no longer need many of the features in those heavy frameworks at all.</strong></p><p>React then becomes the biggest pill you have to swallow. In my simple tests with React, and React-DOM 0.14, built with webpack and gzipped you end up around 37kb.</p><p>For comparison, jQuery 2.x weighs in at about 29kb min+gzip. So, really, we’re doing pretty good and my hope would be that eventually, much like happened with jQuery, many of the core features of React would simply be part of browser API.</p><p>Anyway, now rather than needing observable models, observable collections, the ability to subscribe to changes on derived properties and all that jazz, we can probably get away with an architecture that works more like this:</p><ol><li>A single application state object as a JSON-like structure of plain JS arrays and objects.</li><li>A set of mutator functions that represent all the ways that state can be changed to be used any time there needs to be a change in the state tree (you could follow immutability principles here too, if you’d like and just make sure you replace anything you change).</li><li>Re-render the whole app any time these mutator functions are done.</li></ol><p>I’m simplifying a bit, but that’s pretty much how Redux works. Read <a href=https://blog.andyet.com/2015/08/06/what-the-flux-lets-redux>my Redux post</a> for a better overview. But, you don’t need Redux to implement a simple pattern as described above. Oh, an by comparison Redux weighs practically nothing at approximately 2kb.</p><p>The point is, that <strong>by leaning on React for DOM syncing we can dump a bunch of stuff</strong>.</p><p>Imagine how much less code it takes, and how much less work is required of the browser to deal with a simple set of objects and arrays and a smart render call.</p><p>As opposed to shipping a class system, an event system, a templating system, a custom set of observables types, a DOM library like jQuery (required by some of them), all the extra app-specific code you’d write describing those models and collections and all their properties. Instantiating models and keeping all their internal state and caches those models use to enable their capabilities will require more memory and computation. The processing and memory required to do value comparisons (also known as “dirty-checking”) to see whether a <code>change</code> needs to be triggered.</p><p>There’s just <strong>so many more layers of code that have to run even for simple changes to the state of the app</strong>.</p><p>The ability to re-render <em>at will</em> allows for a fundamentally lighter approach.</p><p>Unfortunately, I don’t have any perfect example I can just line up next to the Ember runtime performance test Atwood links to, but it’s not hard to imagine that all these simplifications that flat-out reduce the amount of computation required, would also have a very positive impact on runtime performance.</p><p>Also, to clarify, total file size may not matter so much as long as load time and runtime performance are still good.</p><a name=so-whats-next class=anchor href=#so-whats-next><h2><span class=header-link></span>So, what’s next?</h2></a><p>Unless we want the web to be seen as a second class citizen on mobile, I think we need to address these performance issues. I believe the web can be fast even on mediocre hardware while providing a good developer experience. BTW, if you doubt the developer experience part <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">watch Dan Abramov’s talk from React Europe</a>.</p><p>I certainly don’t have all the answers here and I’m not saying React + Redux is some kind of panacea. I just like what they enable.</p><p>But so far, pre-rendering all known HTML and using the lighter approaches described here seems to be working well for me. I’ll keep sharing my thoughts as I keep building more stuff. Please do the same.</p><p>Hit me up on twitter: <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> or better yet, write a response on your blog to continue the conversation. Go go gadget web!</p>","preview":"<p>Whether I like it or not, not everyone using my web apps will be running iOS 9 on an iPhone 6S or a Nexus 6P and connecting via super-speedy wifi.</p><p>The reality is often anything but that. 3G connections and older hardware is often the norm. Google reports that there are <a href=http://www.wsj.com/articles/google-says-android-has-1-4-billion-active-users-1443546856>1.4 billion active Android users</a>. Many of them, will no doubt, be running less-than-top-of-the-line hardware.</p>"},{"slug":"reactive-programming","date":"2015-09-28T04:01:06.000Z","title":"Reactive Programming","old_url":"http://joreteg.com/post/130039101027/reactive-programming","tags":"programming","url":"/blog/reactive-programming","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/10/reactive-programming.md","markdown":"The term “reactive programming” may sound a bit cryptic, but if you’ve ever used a spreadsheet, you’re already quite familiar with the concept.\n\nWhen you’re simply *viewing* a spreadsheet, each cell isn’t necessarily showing you what was actually typed into the cell. Sure, some cells may contain simple values, but others actually contain *formulas*. \n\nThe formula may, for example, describe that the cell should contain the sum of cells `A2` and `B2`. But, when you’re viewing it you’ll see the computed value, not the formula itself.\n\nThe real power of a spreadsheet comes from the fact that when you reference another cell from one formula the referenced cell could either contain a simple value *or another formula*. Any changes made to the inputs will flow through the entire spreadsheet. Each cell gets recomputed anytime any of its inputs change until the entire sheet is reflecting the changes that have cascaded through those formulas.\n\nWhat I’ve been describing with the spreadsheet is in fact **reactive programming**. Each cell is simply reacting to changes in the inputs.\n\nThat’s the key distinction: instead of writing code that calculates simple values, *we write code that describes relationships between sources of values*. \n\nOnce we’ve described how everything should react to the changes to its inputs, then the data flows through our functions until all the new values have been computed.\n\n## So, why would we want to build things that way? What does it gain us? \n\nWell, let’s think of the alternative:\n\nIf you have a table of values that you want to total up, you could certainly pull out a calculator, add them all up, and type the resulting value into the “Total” cell. \n\nDone! Easy.\n\nBut, now what happens when the values change? Obviously, you’d have to repeat the exercise. This may be tolerable for a small table, but it would quickly become completely unmanageable if you’re dealing with, say, an amortization table showing 30 years of monthly principal and interest payments. Managing changing inputs in that type of system requires a difference paradigm.\n\n## Let’s give a more specific example. \n\nLet’s say you want to build a mobile web app that is going to let people sort a list by touching and holding an item or swipe an item right and left to perform different actions on it.\n\nA browser gives us four different “touch” events we can listen for: \n\n1. `touchstart`\n2. `touchmove`\n3. `touched`\n4. `touchcancel`\n\nWhere’s my `touchhold` event?! There’s no such thing. So if we want to build an app that triggers “sort mode” when a user has held their finger on an item for a half second. Think about what we’d have to do:\n\n1. Listen for a `touchstart`\n2. start a timer\n3. wait half a second\n\nDoesn’t sound too bad right? But wait… we also have to make sure they haven’t moved their finger too far, but we should probably still consider it a hold if they’ve moved just a few pixels. We also have to make sure we stop the timer if we get a `touchend`.\n\nSo, now we have to also store starting position we have to compare that position with any subsequent `touchmove` events we have to continually calculate a distance moved from that starting point with any changes. As long as that distance is within our tolerance and the timer reaches half second before any `touchend` event… congrats, we have a “hold”. \n\nIf we think about it, this is really spreadsheet-type problem, right?\n\nWe’ve got some input cells that are simple values, some of which will be updated over time:\n\n1. starting X\n2. starting Y \n3. start time\n3. current X \n4. current Y\n5. current time\n\nWe’ve got formula cells that will calculate as the time passes and inputs change:\n\n1. time elapsed\n2. distance moved\n\nWe’ve got an `is holding` formula cell that uses the values from `time elapsed` and `distance moved`.\n\nUltimately, all this touch-related logic could be broken out into its own library. Then, our program would only have to care about that `is holding` cell and update the interface accordingly. All the complexity of how those touches are tracked and measured would be contained within the library.\n\nThis is just one example of types of issues reactive programming approaches help us deal with.\n\nOver time, you’ll find that much of the code we write is really just tracking and updating relationships between different variables. \n\nRecognizing that and learning to use reactive patterns allows us to more easily solve complex problems and break them down into small, manageable pieces. \n\nThen, just let the data flow.\n\n---\n*Note: I was asked to produce a writing sample explaining reactive programming for a technical writing contract. I'm posting it here because I thought it may be useful to someone (and yes, I \"passed\").*\n\nIf you like this, or if you think I botched it, please let me know on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg)","outputFile":"/blog/reactive-programming.html","html":"<p>The term “reactive programming” may sound a bit cryptic, but if you’ve ever used a spreadsheet, you’re already quite familiar with the concept.</p><p>When you’re simply <em>viewing</em> a spreadsheet, each cell isn’t necessarily showing you what was actually typed into the cell. Sure, some cells may contain simple values, but others actually contain <em>formulas</em>.</p><p>The formula may, for example, describe that the cell should contain the sum of cells <code>A2</code> and <code>B2</code>. But, when you’re viewing it you’ll see the computed value, not the formula itself.</p><p>The real power of a spreadsheet comes from the fact that when you reference another cell from one formula the referenced cell could either contain a simple value <em>or another formula</em>. Any changes made to the inputs will flow through the entire spreadsheet. Each cell gets recomputed anytime any of its inputs change until the entire sheet is reflecting the changes that have cascaded through those formulas.</p><p>What I’ve been describing with the spreadsheet is in fact <strong>reactive programming</strong>. Each cell is simply reacting to changes in the inputs.</p><p>That’s the key distinction: instead of writing code that calculates simple values, <em>we write code that describes relationships between sources of values</em>.</p><p>Once we’ve described how everything should react to the changes to its inputs, then the data flows through our functions until all the new values have been computed.</p><a name=so-why-would-we-want-to-build-things-that-way-what-does-it-gain-us class=anchor href=#so-why-would-we-want-to-build-things-that-way-what-does-it-gain-us><h2><span class=header-link></span>So, why would we want to build things that way? What does it gain us?</h2></a><p>Well, let’s think of the alternative:</p><p>If you have a table of values that you want to total up, you could certainly pull out a calculator, add them all up, and type the resulting value into the “Total” cell.</p><p>Done! Easy.</p><p>But, now what happens when the values change? Obviously, you’d have to repeat the exercise. This may be tolerable for a small table, but it would quickly become completely unmanageable if you’re dealing with, say, an amortization table showing 30 years of monthly principal and interest payments. Managing changing inputs in that type of system requires a difference paradigm.</p><a name=lets-give-a-more-specific-example class=anchor href=#lets-give-a-more-specific-example><h2><span class=header-link></span>Let’s give a more specific example.</h2></a><p>Let’s say you want to build a mobile web app that is going to let people sort a list by touching and holding an item or swipe an item right and left to perform different actions on it.</p><p>A browser gives us four different “touch” events we can listen for:</p><ol><li><code>touchstart</code></li><li><code>touchmove</code></li><li><code>touched</code></li><li><code>touchcancel</code></li></ol><p>Where’s my <code>touchhold</code> event?! There’s no such thing. So if we want to build an app that triggers “sort mode” when a user has held their finger on an item for a half second. Think about what we’d have to do:</p><ol><li>Listen for a <code>touchstart</code></li><li>start a timer</li><li>wait half a second</li></ol><p>Doesn’t sound too bad right? But wait… we also have to make sure they haven’t moved their finger too far, but we should probably still consider it a hold if they’ve moved just a few pixels. We also have to make sure we stop the timer if we get a <code>touchend</code>.</p><p>So, now we have to also store starting position we have to compare that position with any subsequent <code>touchmove</code> events we have to continually calculate a distance moved from that starting point with any changes. As long as that distance is within our tolerance and the timer reaches half second before any <code>touchend</code> event… congrats, we have a “hold”.</p><p>If we think about it, this is really spreadsheet-type problem, right?</p><p>We’ve got some input cells that are simple values, some of which will be updated over time:</p><ol><li>starting X</li><li>starting Y</li><li>start time</li><li>current X</li><li>current Y</li><li>current time</li></ol><p>We’ve got formula cells that will calculate as the time passes and inputs change:</p><ol><li>time elapsed</li><li>distance moved</li></ol><p>We’ve got an <code>is holding</code> formula cell that uses the values from <code>time elapsed</code> and <code>distance moved</code>.</p><p>Ultimately, all this touch-related logic could be broken out into its own library. Then, our program would only have to care about that <code>is holding</code> cell and update the interface accordingly. All the complexity of how those touches are tracked and measured would be contained within the library.</p><p>This is just one example of types of issues reactive programming approaches help us deal with.</p><p>Over time, you’ll find that much of the code we write is really just tracking and updating relationships between different variables.</p><p>Recognizing that and learning to use reactive patterns allows us to more easily solve complex problems and break them down into small, manageable pieces.</p><p>Then, just let the data flow.</p><hr><p><em>Note: I was asked to produce a writing sample explaining reactive programming for a technical writing contract. I&#39;m posting it here because I thought it may be useful to someone (and yes, I &quot;passed&quot;).</em></p><p>If you like this, or if you think I botched it, please let me know on twitter: <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a></p>","preview":"<p>The term “reactive programming” may sound a bit cryptic, but if you’ve ever used a spreadsheet, you’re already quite familiar with the concept.</p><p>When you’re simply <em>viewing</em> a spreadsheet, each cell isn’t necessarily showing you what was actually typed into the cell. Sure, some cells may contain simple values, but others actually contain <em>formulas</em>.</p>"},{"slug":"the-next-adventure-awaits","type":"text","date":"2015-08-18T17:40:00.000Z","title":"The next adventure awaits","old_url":"http://joreteg.com/post/127007507032/the-next-adventure-awaits","scripts":["//platform.twitter.com/widgets.js"],"url":"/blog/the-next-adventure-awaits","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/08/the-next-adventure-awaits.html","markdown":"<p>It’s official, next Monday (Aug 24, 2015) my five and a half year tenure at <a href=\"http://andyet.com/\">&amp;yet</a> is over (Gulp!).</p>\n\n<h2>What’s wrong? What happened?!</h2>\n\n<p>Nothing. Seriously. It’s just been five and a half years and it feels like its time for new adventures.</p>\n\n<p>Things are and will continue to be great at &amp;yet, with lots of interesting clients, lots of <a href=\"http://andyetconf.com/\">cool stuff coming up</a> and I will always <em>highly</em> recommend them as a consulting company.</p>\n\n<p>I’ve had an amazing time at &amp;yet and have very ambivalent feelings about quitting because I &lt;3 my teammates and we’ve had some <a href=\"https://blog.andyet.com/2011/03/03/devcastle\">incredible</a>, <a href=\"https://medium.com/the-art-of-experience/arrival-d47000091355\">experiences</a> together that are nothing short of priceless.</p>\n\n<p>But sometimes you’ve gotta take a leap and follow your gut.</p>\n\n<h2>So what’s next?</h2>\n\n<p>In the short term, I’m available for independent consulting.</p>\n\n<p>I’ve set up <a href=\"http://consulting.joreteg.com/\">a simple page</a> explaining the types of projects I can help with as well as my rates and availability.</p>\n\n<p>In short, I’m available to start a new project on September 14.</p>\n\n<p>If you have a project you want to talk to me about, <a href=\"http://consulting.joreteg.com/\">read that short consulting page</a> then shoot me an email: <a href=\"mailto:henrik@joreteg.com\">henrik@joreteg.com</a>.</p>\n\n<h2>What about the long term?</h2>\n\n<p>If you know me, you know I’ve always got a few things in the hopper. For one, there’s this:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">I think I may have accidentally started writing another book.</p>\n\n<p>— Henrik Joreteg (@HenrikJoreteg) <a href=\"https://twitter.com/HenrikJoreteg/status/632802841694834689\">August 16, 2015</a></p></blockquote>\n\n<p>Additionally, this hints at another, still somewhat vague idea I’ve started working on:</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">The day will come when a major paid SaaS ships without writing or deploying their own backend.</p>— Henrik Joreteg (@HenrikJoreteg) <a href=\"https://twitter.com/HenrikJoreteg/status/633099515361267713\">August 17, 2015</a></blockquote>\n\n<p>More on all that in the future. Till next post… see ya on the interwebz. Questions? <a href=\"mailto:henrik@joreteg.com\">Email me</a> or ping me, <a href=\"http://twitter.com/henrikjoreteg\">@HenrikJoreteg</a> on twitter.</p>","outputFile":"/blog/the-next-adventure-awaits.html","html":"<p>It’s official, next Monday (Aug 24, 2015) my five and a half year tenure at <a href=\"http://andyet.com/\">&amp;yet</a> is over (Gulp!).</p><h2>What’s wrong? What happened?!</h2><p>Nothing. Seriously. It’s just been five and a half years and it feels like its time for new adventures.</p><p>Things are and will continue to be great at &amp;yet, with lots of interesting clients, lots of <a href=\"http://andyetconf.com/\">cool stuff coming up</a> and I will always <em>highly</em> recommend them as a consulting company.</p><p>I’ve had an amazing time at &amp;yet and have very ambivalent feelings about quitting because I &lt;3 my teammates and we’ve had some <a href=https://blog.andyet.com/2011/03/03/devcastle>incredible</a>, <a href=https://medium.com/the-art-of-experience/arrival-d47000091355>experiences</a> together that are nothing short of priceless.</p><p>But sometimes you’ve gotta take a leap and follow your gut.</p><h2>So what’s next?</h2><p>In the short term, I’m available for independent consulting.</p><p>I’ve set up <a href=\"http://consulting.joreteg.com/\">a simple page</a> explaining the types of projects I can help with as well as my rates and availability.</p><p>In short, I’m available to start a new project on September 14.</p><p>If you have a project you want to talk to me about, <a href=\"http://consulting.joreteg.com/\">read that short consulting page</a> then shoot me an email: <a href=mailto:henrik@joreteg.com>henrik@joreteg.com</a>.</p><h2>What about the long term?</h2><p>If you know me, you know I’ve always got a few things in the hopper. For one, there’s this:</p><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>I think I may have accidentally started writing another book.</p><p>— Henrik Joreteg (@HenrikJoreteg) <a href=https://twitter.com/HenrikJoreteg/status/632802841694834689>August 16, 2015</a></p></blockquote><p>Additionally, this hints at another, still somewhat vague idea I’ve started working on:</p><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>The day will come when a major paid SaaS ships without writing or deploying their own backend.</p>— Henrik Joreteg (@HenrikJoreteg) <a href=https://twitter.com/HenrikJoreteg/status/633099515361267713>August 17, 2015</a></blockquote><p>More on all that in the future. Till next post… see ya on the interwebz. Questions? <a href=mailto:henrik@joreteg.com>Email me</a> or ping me, <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on twitter.</p>","preview":"<p>It’s official, next Monday (Aug 24, 2015) my five and a half year tenure at <a href=\"http://andyet.com/\">&amp;yet</a> is over (Gulp!).</p><h2>What’s wrong? What happened?!</h2><p>Nothing. Seriously. It’s just been five and a half years and it feels like its time for new adventures.</p><p>Things are and will continue to be great at &amp;yet, with lots of interesting clients, lots of <a href=\"http://andyetconf.com/\">cool stuff coming up</a> and I will always <em>highly</em> recommend them as a consulting company.</p>"},{"slug":"a-tech-industry-conversation","type":"text","date":"2015-06-27T06:20:50.000Z","title":"a tech industry conversation","old_url":"http://joreteg.com/post/122571550837/a-tech-industry-conversation","url":"/blog/a-tech-industry-conversation","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/06/a-tech-industry-conversation.html","markdown":"<p>What follows is an actual SMS conversation I had this evening with Marc Grabanski (with only a few minor edits).</p>\n\n<hr><p><strong>Marc</strong></p>\n\n<p>Now we can finally write GWT natively and get the performance</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Greater Web Together™. It&rsquo;s finally living up to its name.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>RxJS is basically making Objective C into Swift that runs in the browser it&rsquo;s great</p>\n\n<p>Imagine a bootstrap that runs Ruby &ndash; mind blowing npm packages made easy</p>\n\n<p>Install them all with a single gulp request &ndash; everything HTTP2 is faster than Python in web storm</p>\n\n<p>Never again will we need flash!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I heard they&rsquo;re replacing event emitter in node with event machine.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Thanks to Dart VM</p>\n\n<p>WebGL is like WebRTC running through twisted &ndash; I mean how else are we going to take ES 2016 to the next level?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, Dart is the VM that will change the world of evented ColdFusion in a way Flash arduinos never could.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Simple.</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>It&rsquo;s like raspberry pi but with websocket support out of the box. Without the ant build configs.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh holy crap ya arduinos are going to change the DEV tools like crazy! Makes them run multi lingual APIs under water.</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Meteor is all over that shit</p>\n\n<p>totes</p>\n\n<p>I couldn&rsquo;t believe it, they&rsquo;re inlining react code natively now too.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Well meteor makes it easy to steal lots of credit cards with elastic search based WebKit.</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, but even if you skip meteor I can emulate that with a compromised JSON.stringify method in like 4 nanoseconds.</p>\n\n<p>Just open devtools on the devtools in chrome and run mini mongo and its like getting root at the pentagon. But totally realtime.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Exactly</p>\n\n<p>Buy that stuff with TOR coins</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>That&rsquo;s why I only use tor on cat3 cables</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Lol TOR exactly</p>\n\n<p>Never in wifi or else you get massive Unit Tests</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>It&rsquo;s like Silk Road without all the guppies. It&rsquo;s the rebirth of 1337 all over</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Never want to unit test your wifi on Android or else you get super cooled byte code</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Just run it on OpenSauce. Then turn their test machines into a new self-spawning botnet</p>\n\n<p>Game over</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Game overs\n  😎</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Some Russian hacker did that. I think she was 3 at the time.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Thrash was her name</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>😆</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Very good at writing killer Visual Basic</p>\n\n<p>I&rsquo;ve never seen VB look so much like Cobal in my life wow</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah the hackathon didn&rsquo;t know what hit it.</p>\n\n<p>Heard she wrote it in binary first then wrote some source code as documentation.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Amazing stuff. could crack a DOM API wide open and turn it into Luna</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>The GPU nearly caught fire too.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>GPU was storing way too much SQL though</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Luna!?! Oh shit. You didn&rsquo;t just say that in a text? The Facebook ex-something is totally in Asana getting notifications of these texts right now.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Replicated recursive functions across Ruby shards</p>\n\n<p>Never before have I seen so many manifest files</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I totally base64 and dynamically salt my SQL <em>before</em> it goes into the GPU. That way it&rsquo;s thread safe.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Had to compile Ubuntu into Postgres</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Most people only do it before its stores on SSDs with Flux</p>\n\n<p>True, that&rsquo;s a must</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Bash files all over Redux it was a mess</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Cloudfront deals with that for me though</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Nice</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Keeps it DRY, ya know?!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>I keep VIM DRY as possible</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, also helps if you keep your JSON object oriented. Gang of Four FTW</p>\n\n<p><strong>Marc</strong></p>\n\n<p>58 key commands Into the module pattern</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I wrote that book</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Only two people with 10 years of living on the web could possibly hack this event loop</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>that’s brave in a world of GIF streaming and dynamic favicons</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Living on the web writing NES emulators that is</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>only if they’re embedding linux</p>\n\n<p>how else would you control all those drones?</p>\n\n<p>use proto buffers?!</p>\n\n<p>raf loops! good call</p>\n\n<p><strong>Marc</strong></p>\n\n<p>No way</p>\n\n<p>Did you write the book in Go?</p>\n\n<p>I hear Go is like cucumber tests</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Well it was based on open source encryption, so it was partially written. Then npm said they&rsquo;re going public, which ruined those tests.\n  &hellip;and my book with &lsquo;em</p>\n\n<p><strong>Marc</strong></p>\n\n<p>YC doesn&rsquo;t like when you write their books in Go</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I did a series D first, so they didn&rsquo;t mind</p>\n\n<p>Plus, I take dogecoin</p>\n\n<p>So it works out</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh wow I&rsquo;ve never had a series D</p>\n\n<p>I&rsquo;m only on my 5th SSH tunnel</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Well you already made yours, if you know what I mean.</p>\n\n<p>Remember BOSH?!?</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Is that like caniuse ?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Kinda, yeah. I installed a Tesla house battery as a backup for my Triple RAIDed thumb drives.</p>\n\n<p>Problem? Solved.</p>\n\n<p>Bam!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Wow!</p>\n\n<p>You must be printing horse js coins like crazy</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I don&rsquo;t wanna brag. But I&rsquo;m like notch, but I bought a <em>real</em> house.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>The internet of things</p>\n\n<p>Of things you buy with apply pay</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I hired Snoop Dogg to help me install the 3D printed travertine floor tiles.</p>\n\n<p>Of course purchased with Apple Pay</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Awesome was the 3D printer on spotify?</p>\n\n<p>I hear there is a SaaS z-index you can lookup on MDN</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Rdio, but it used flash for a while so, that faded</p>\n\n<p>You just have to use Basic auth and then change the font color so it no longer blends with the background.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Did you make a DSL for that?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Naw, but i run a grease monkey script though. Then you don&rsquo;t have to think about it.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>It just connects with Bluetooth getUserMedia, I see</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I metaprogrammed the grease monkey script while deploying chaos monkey on Google+ data centers.</p>\n\n<p>Yeah</p>\n\n<p><strong>Marc</strong></p>\n\n<p>That must have been crazy</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>It was a bit wild, but I was asleep when I wrote it</p>\n\n<p><strong>Marc</strong></p>\n\n<p>No one ever knew that jQuery had a method to detect heartbeat from a Perl script</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I know!! It&rsquo;s right there!!</p>\n\n<p>Uber uses it</p>\n\n<p>I&rsquo;m gonna go run a speed test on my gigabit apple car.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>You can see the data in your apple health app it&rsquo;s all built on CLI algorithms</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>True, it&rsquo;ll be keynoted tomorrow anyway.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>XML RPC is the rage</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Especially on Google Glass</p>\n\n<p>It&rsquo;s like FirePhone but cooler</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Ya but the Apple TV is so far ahead because it&rsquo;s on Firebase</p>\n\n<p>Twilio never saw Native script coming</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I heard rumors from watching Silicon Valley that they&rsquo;re thinking about switching to Parse, <em>because</em> of Native Script in Typescript</p>\n\n<p>Just be sure to run it in strict mode or it&rsquo;s like http 1.0 all over again.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Ya that&rsquo;s a real problem with cyclomatic complexity in your semi colons</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>yup, I was getting teapotted with 418s all day before I switched to semi-standard</p>\n\n<p>Just add a grunt task though.</p>\n\n<p>But only if you&rsquo;re on bower</p>\n\n<p><strong>Marc</strong></p>\n\n<p>No kidding</p>\n\n<p>I always though nHibrinate was the solution for katas</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I think you&rsquo;re right</p>\n\n<p>Saw that on my kanban</p>\n\n<p><strong>Marc</strong></p>\n\n<p>On run keeper?</p>\n\n<p>I prefer basecamp over fresh books</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I use SPF records whenever I run though.</p>\n\n<p>I have sensitive skin according to my apple watch</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh ya the A records really helps when you call a Lyft to get your AirBNB</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Just point a CNAME to gh-pages first, but I totally agree</p>\n\n<p>Jobs and Woz used to always talk about that.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Are those thread safe VR goggles going to crash google hangouts?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>No one listened though, they were so far ahead like Alan Kay, but with the Newton.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Elixir is kind of like gigabit 4G through Fiddler</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I think they might, they&rsquo;re bastardizing the WebRTC peer connections to stream Internet to the Loon project.</p>\n\n<p>It&rsquo;s so non-standard</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Oh ya like Ionic framework&rsquo;s ACID test</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>That was a game changer.</p>\n\n<p>Just like apple&rsquo;s ear pods</p>\n\n<p>I ran those natively!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>I TDD my beats headphones natively ya - for performance of course</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Yeah, it&rsquo;d be like doing BDD if you didn&rsquo;t. This isn&rsquo;t English! It&rsquo;s programming!!</p>\n\n<p>I&rsquo;m gonna reimplement web components for telnet</p>\n\n<p>But without HTML imports, of course</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Make sure you use component JS on Octopress because otherwise people will steal your SSH keys</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>With no babel though</p>\n\n<p>Or else you&rsquo;ll get ES2014</p>\n\n<p><strong>Marc</strong></p>\n\n<p>VPN into webpack first</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>IT&rsquo;S SO EASY TO DO THIS. I COULD WRITE THESE FOR THREE DAYS STRAIGHT! it&rsquo;s unbelievable.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Run a kickstarter for it!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Kerberos auth to kickstarter, but I&rsquo;ll find my kickstarter video through an incubator I just funded on indiegogo.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Build a rapid prototype protocol</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I might just use DDP</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Into CouchDB</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>or&hellip; UDP!</p>\n\n<p>I just need about half the packet-loss and I&rsquo;ll get funded.</p>\n\n<p>That&rsquo;s what Theil told me</p>\n\n<p><strong>Marc</strong></p>\n\n<p>I hear UDP handshakes better than SSL through a CDN</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Good point</p>\n\n<p>yahoo wants in too.</p>\n\n<p>They killed Pipes!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Just like Google killed reader</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Beacon API is always better for calling home with. Otherwise AWS never gets the event data</p>\n\n<p>&ldquo;OK Google&rdquo; amirite?!?</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Isn&rsquo;t that GraphQL Siri on a XSS CORS call?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Think so. But use movable type</p>\n\n<p>Or it KILLS your wifi</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Movable type is built on Functional reactive Pure Script so it&rsquo;s pretty much Ghost</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>With JSP templates, but yeah.</p>\n\n<p>LaTeX is just better anyway</p>\n\n<p>Especially if you use D3 to render it</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Like a mongo elastic search!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I think I&rsquo;d run that as a docker container</p>\n\n<p><strong>Marc</strong></p>\n\n<p>On a Hadoop prerendered iframe</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>But behind nginx</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Never before have I seen so many processors running varnish</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Deploy it with ServiceWorker though. Or you may violate the CSP.</p>\n\n<p>Unless it&rsquo;s MIT licensed.</p>\n\n<p>Varnish is great.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>They were spinning up so many Apache instances that the load balancers couldn&rsquo;t stand it except for in Google Gears running in Unity</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I just wrote an Object tag yesterday that did that but using Iced CoffeeScript so Eich would digg it on HN.</p>\n\n<p>He re-tweeted me on pownce the other day.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Distributed go pros are all the stack overflow credit</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Stream it with EventSource</p>\n\n<p>It&rsquo;s way more reliable that flash media server</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Git tipped on underscore</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Don&rsquo;t go all TechCrunch Disrupt on me.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Crockford and Eich designed it though</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Crowd funded hackathons?</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Together as friends</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>I didn&rsquo;t know that</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Best friends</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Crock once shipped an MS Word format for fill able PDFs</p>\n\n<p><strong>Marc</strong></p>\n\n<p>He wouldn&rsquo;t apologize on his controversial white space views so they canned him in a string literal</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Was on a plane with him coming back from FunConf. He told me all about it.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>He was coerced into it</p>\n\n<p>+{} style</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>He was not happy to see so many O'Reilly authors getting slash dotted for Angular directives.</p>\n\n<p>It&rsquo;s just F# anyway, right?</p>\n\n<p>Plus some syntactic sugar.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Ya but clearly Microsoft wanted to use SQLlite but they shipped CSVs anyways &ndash; Easier to web inspect</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>View source for evah!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Source maps is supposed to solve our code climate CommonJS modules right?</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Do they use the ADB debugging protocol for blackberry 10s browser?</p>\n\n<p>Yup</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Only if you browser sniff</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Works great on new relic</p>\n\n<p>Just orchestrate your code by using esprima to re-write your Python</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Feature test the SASS components</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>That&rsquo;s what django does.</p>\n\n<p>Works like Mocha</p>\n\n<p>(Oh man, this is the most texts I&rsquo;ve sent since I first got my Nest)</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Lol well cappuccino tests objectiveJ In Ember so I&rsquo;m not surprised you can&rsquo;t Ajax more post messages</p>\n\n<p>60fps for life butter smooth requestAnimationFrame Safaris</p>\n\n<p>Exactly <em>proto</em> is accessible on every SVG viewport</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>yeah, i always extract it with restructuring assignments on my closures</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Inheritance call the super method on that ES6 lodash</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>ship it!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Deploy to heroku via Dropbox with a static site generating PDF</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>meme-generators built with semver’ed APNGs, now that smells like a nice unicode character map</p>\n\n<p>anti-aliasing always makes it look better though</p>\n\n<p>that’s why i use typescript to download my web fonts progressively enhancing my UX for my users on gameboy DXes.</p>\n\n<p><strong>Marc</strong></p>\n\n<p>That&rsquo;s why progressive JPGs work so well!</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>that was their Promise, if you will.</p>\n\n<p>but they rarely resolve at all</p>\n\n<p>and they swallow errors like hapi.js when it was using domains!</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Observable generators</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>Object.observe(redis) I always say</p>\n\n<p>or use Mutation Observers</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Built with linked list dust templates</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>yeah, then you can stream ‘em</p>\n\n<p>works ok with SPDY but not HTTP2</p>\n\n<p>subtle but important differences in frame rates if you’re on lie-fi</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Lol</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>i think that’s !important</p>\n\n<p>oh man, i’m fading like a bad jQuery animation</p>\n\n<p>good thing it has a chainable syntax</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Only if you transition the cubic bezier the GsAP 3dmatrix</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>translateZ hacks will help too</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Just return monads</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>object literal monads</p>\n\n<p>textmate 2 for windows</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Never use Symbols through in your Unicode</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>well, yeah, but Symbol.iterator makes more sense to attach as a primitive value if you’re using something like Cocoa</p>\n\n<p><strong>Marc</strong></p>\n\n<p>My battery is going to die before we finish this lol</p>\n\n<p><strong>Henrik</strong></p>\n\n<p>i’m convinced we could do this for days, we’ve already done it for about an hour longer than i expected to, lol.</p>\n\n<p>good night my friend, i’ve got a plane to catch at an ungodly hour tomorrow 😊</p>\n\n<p><strong>Marc</strong></p>\n\n<p>Dependency inject your dreams</p>\n\n<p>Sorry had to do it&hellip;</p>\n\n<hr><p>So <a href=\"https://twitter.com/1marc\">Marc Grabanski</a> invited me to come teach <a href=\"https://frontendmasters.com/workshops/web-apps/\">a workshop</a> the last two days for his company <a href=\"https://frontendmasters.com/\">Frontend Masters</a> in Minnesota.</p>\n\n<p>Yesterday after the workshop we were chatting about how ridiculous tech terminology has become, and frankly, just the sheer volume of it. We jokingly had a short, seemingly plausible conversations that actually make no sense. The above was a continuation of that. This industry is commically jargony.</p>\n\n<p>Follow <a href=\"https://twitter.com/1marc\">@1marc</a> and <a href=\"http://twitter.com/henrikjoreteg\">@HenrikJoreteg</a> on the twitters for potentially more random nonsense, but no gurantees.</p>","outputFile":"/blog/a-tech-industry-conversation.html","html":"<p>What follows is an actual SMS conversation I had this evening with Marc Grabanski (with only a few minor edits).</p><p><hr></p><p><strong>Marc</strong></p><p></p><p>Now we can finally write GWT natively and get the performance</p><p><strong>Henrik</strong></p><p>Greater Web Together™. It&rsquo;s finally living up to its name.</p><p><strong>Marc</strong></p><p>RxJS is basically making Objective C into Swift that runs in the browser it&rsquo;s great</p><p>Imagine a bootstrap that runs Ruby &ndash; mind blowing npm packages made easy</p><p>Install them all with a single gulp request &ndash; everything HTTP2 is faster than Python in web storm</p><p>Never again will we need flash!</p><p><strong>Henrik</strong></p><p>I heard they&rsquo;re replacing event emitter in node with event machine.</p><p><strong>Marc</strong></p><p>Thanks to Dart VM</p><p>WebGL is like WebRTC running through twisted &ndash; I mean how else are we going to take ES 2016 to the next level?</p><p><strong>Henrik</strong></p><p>Yeah, Dart is the VM that will change the world of evented ColdFusion in a way Flash arduinos never could.</p><p><strong>Marc</strong></p><p>Simple.</p><p><strong>Henrik</strong></p><p>It&rsquo;s like raspberry pi but with websocket support out of the box. Without the ant build configs.</p><p><strong>Marc</strong></p><p>Oh holy crap ya arduinos are going to change the DEV tools like crazy! Makes them run multi lingual APIs under water.</p><p><strong>Henrik</strong></p><p>Meteor is all over that shit</p><p>totes</p><p>I couldn&rsquo;t believe it, they&rsquo;re inlining react code natively now too.</p><p><strong>Marc</strong></p><p>Well meteor makes it easy to steal lots of credit cards with elastic search based WebKit.</p><p><strong>Henrik</strong></p><p>Yeah, but even if you skip meteor I can emulate that with a compromised JSON.stringify method in like 4 nanoseconds.</p><p>Just open devtools on the devtools in chrome and run mini mongo and its like getting root at the pentagon. But totally realtime.</p><p><strong>Marc</strong></p><p>Exactly</p><p>Buy that stuff with TOR coins</p><p><strong>Henrik</strong></p><p>That&rsquo;s why I only use tor on cat3 cables</p><p><strong>Marc</strong></p><p>Lol TOR exactly</p><p>Never in wifi or else you get massive Unit Tests</p><p><strong>Henrik</strong></p><p>It&rsquo;s like Silk Road without all the guppies. It&rsquo;s the rebirth of 1337 all over</p><p><strong>Marc</strong></p><p>Never want to unit test your wifi on Android or else you get super cooled byte code</p><p><strong>Henrik</strong></p><p>Just run it on OpenSauce. Then turn their test machines into a new self-spawning botnet</p><p>Game over</p><p><strong>Marc</strong></p><p>Game overs 😎</p><p><strong>Henrik</strong></p><p>Some Russian hacker did that. I think she was 3 at the time.</p><p><strong>Marc</strong></p><p>Thrash was her name</p><p><strong>Henrik</strong></p><p>😆</p><p><strong>Marc</strong></p><p>Very good at writing killer Visual Basic</p><p>I&rsquo;ve never seen VB look so much like Cobal in my life wow</p><p><strong>Henrik</strong></p><p>Yeah the hackathon didn&rsquo;t know what hit it.</p><p>Heard she wrote it in binary first then wrote some source code as documentation.</p><p><strong>Marc</strong></p><p>Amazing stuff. could crack a DOM API wide open and turn it into Luna</p><p><strong>Henrik</strong></p><p>The GPU nearly caught fire too.</p><p><strong>Marc</strong></p><p>GPU was storing way too much SQL though</p><p><strong>Henrik</strong></p><p>Luna!?! Oh shit. You didn&rsquo;t just say that in a text? The Facebook ex-something is totally in Asana getting notifications of these texts right now.</p><p><strong>Marc</strong></p><p>Replicated recursive functions across Ruby shards</p><p>Never before have I seen so many manifest files</p><p><strong>Henrik</strong></p><p>I totally base64 and dynamically salt my SQL <em>before</em> it goes into the GPU. That way it&rsquo;s thread safe.</p><p><strong>Marc</strong></p><p>Had to compile Ubuntu into Postgres</p><p><strong>Henrik</strong></p><p>Most people only do it before its stores on SSDs with Flux</p><p>True, that&rsquo;s a must</p><p><strong>Marc</strong></p><p>Bash files all over Redux it was a mess</p><p><strong>Henrik</strong></p><p>Cloudfront deals with that for me though</p><p><strong>Marc</strong></p><p>Nice</p><p><strong>Henrik</strong></p><p>Keeps it DRY, ya know?!</p><p><strong>Marc</strong></p><p>I keep VIM DRY as possible</p><p><strong>Henrik</strong></p><p>Yeah, also helps if you keep your JSON object oriented. Gang of Four FTW</p><p><strong>Marc</strong></p><p>58 key commands Into the module pattern</p><p><strong>Henrik</strong></p><p>I wrote that book</p><p><strong>Marc</strong></p><p>Only two people with 10 years of living on the web could possibly hack this event loop</p><p><strong>Henrik</strong></p><p>that’s brave in a world of GIF streaming and dynamic favicons</p><p><strong>Marc</strong></p><p>Living on the web writing NES emulators that is</p><p><strong>Henrik</strong></p><p>only if they’re embedding linux</p><p>how else would you control all those drones?</p><p>use proto buffers?!</p><p>raf loops! good call</p><p><strong>Marc</strong></p><p>No way</p><p>Did you write the book in Go?</p><p>I hear Go is like cucumber tests</p><p><strong>Henrik</strong></p><p>Well it was based on open source encryption, so it was partially written. Then npm said they&rsquo;re going public, which ruined those tests. &hellip;and my book with &lsquo;em</p><p><strong>Marc</strong></p><p>YC doesn&rsquo;t like when you write their books in Go</p><p><strong>Henrik</strong></p><p>I did a series D first, so they didn&rsquo;t mind</p><p>Plus, I take dogecoin</p><p>So it works out</p><p><strong>Marc</strong></p><p>Oh wow I&rsquo;ve never had a series D</p><p>I&rsquo;m only on my 5th SSH tunnel</p><p><strong>Henrik</strong></p><p>Well you already made yours, if you know what I mean.</p><p>Remember BOSH?!?</p><p><strong>Marc</strong></p><p>Is that like caniuse ?</p><p><strong>Henrik</strong></p><p>Kinda, yeah. I installed a Tesla house battery as a backup for my Triple RAIDed thumb drives.</p><p>Problem? Solved.</p><p>Bam!</p><p><strong>Marc</strong></p><p>Wow!</p><p>You must be printing horse js coins like crazy</p><p><strong>Henrik</strong></p><p>I don&rsquo;t wanna brag. But I&rsquo;m like notch, but I bought a <em>real</em> house.</p><p><strong>Marc</strong></p><p>The internet of things</p><p>Of things you buy with apply pay</p><p><strong>Henrik</strong></p><p>I hired Snoop Dogg to help me install the 3D printed travertine floor tiles.</p><p>Of course purchased with Apple Pay</p><p><strong>Marc</strong></p><p>Awesome was the 3D printer on spotify?</p><p>I hear there is a SaaS z-index you can lookup on MDN</p><p><strong>Henrik</strong></p><p>Rdio, but it used flash for a while so, that faded</p><p>You just have to use Basic auth and then change the font color so it no longer blends with the background.</p><p><strong>Marc</strong></p><p>Did you make a DSL for that?</p><p><strong>Henrik</strong></p><p>Naw, but i run a grease monkey script though. Then you don&rsquo;t have to think about it.</p><p><strong>Marc</strong></p><p>It just connects with Bluetooth getUserMedia, I see</p><p><strong>Henrik</strong></p><p>I metaprogrammed the grease monkey script while deploying chaos monkey on Google+ data centers.</p><p>Yeah</p><p><strong>Marc</strong></p><p>That must have been crazy</p><p><strong>Henrik</strong></p><p>It was a bit wild, but I was asleep when I wrote it</p><p><strong>Marc</strong></p><p>No one ever knew that jQuery had a method to detect heartbeat from a Perl script</p><p><strong>Henrik</strong></p><p>I know!! It&rsquo;s right there!!</p><p>Uber uses it</p><p>I&rsquo;m gonna go run a speed test on my gigabit apple car.</p><p><strong>Marc</strong></p><p>You can see the data in your apple health app it&rsquo;s all built on CLI algorithms</p><p><strong>Henrik</strong></p><p>True, it&rsquo;ll be keynoted tomorrow anyway.</p><p><strong>Marc</strong></p><p>XML RPC is the rage</p><p><strong>Henrik</strong></p><p>Especially on Google Glass</p><p>It&rsquo;s like FirePhone but cooler</p><p><strong>Marc</strong></p><p>Ya but the Apple TV is so far ahead because it&rsquo;s on Firebase</p><p>Twilio never saw Native script coming</p><p><strong>Henrik</strong></p><p>I heard rumors from watching Silicon Valley that they&rsquo;re thinking about switching to Parse, <em>because</em> of Native Script in Typescript</p><p>Just be sure to run it in strict mode or it&rsquo;s like http 1.0 all over again.</p><p><strong>Marc</strong></p><p>Ya that&rsquo;s a real problem with cyclomatic complexity in your semi colons</p><p><strong>Henrik</strong></p><p>yup, I was getting teapotted with 418s all day before I switched to semi-standard</p><p>Just add a grunt task though.</p><p>But only if you&rsquo;re on bower</p><p><strong>Marc</strong></p><p>No kidding</p><p>I always though nHibrinate was the solution for katas</p><p><strong>Henrik</strong></p><p>I think you&rsquo;re right</p><p>Saw that on my kanban</p><p><strong>Marc</strong></p><p>On run keeper?</p><p>I prefer basecamp over fresh books</p><p><strong>Henrik</strong></p><p>I use SPF records whenever I run though.</p><p>I have sensitive skin according to my apple watch</p><p><strong>Marc</strong></p><p>Oh ya the A records really helps when you call a Lyft to get your AirBNB</p><p><strong>Henrik</strong></p><p>Just point a CNAME to gh-pages first, but I totally agree</p><p>Jobs and Woz used to always talk about that.</p><p><strong>Marc</strong></p><p>Are those thread safe VR goggles going to crash google hangouts?</p><p><strong>Henrik</strong></p><p>No one listened though, they were so far ahead like Alan Kay, but with the Newton.</p><p><strong>Marc</strong></p><p>Elixir is kind of like gigabit 4G through Fiddler</p><p><strong>Henrik</strong></p><p>I think they might, they&rsquo;re bastardizing the WebRTC peer connections to stream Internet to the Loon project.</p><p>It&rsquo;s so non-standard</p><p><strong>Marc</strong></p><p>Oh ya like Ionic framework&rsquo;s ACID test</p><p><strong>Henrik</strong></p><p>That was a game changer.</p><p>Just like apple&rsquo;s ear pods</p><p>I ran those natively!</p><p><strong>Marc</strong></p><p>I TDD my beats headphones natively ya - for performance of course</p><p><strong>Henrik</strong></p><p>Yeah, it&rsquo;d be like doing BDD if you didn&rsquo;t. This isn&rsquo;t English! It&rsquo;s programming!!</p><p>I&rsquo;m gonna reimplement web components for telnet</p><p>But without HTML imports, of course</p><p><strong>Marc</strong></p><p>Make sure you use component JS on Octopress because otherwise people will steal your SSH keys</p><p><strong>Henrik</strong></p><p>With no babel though</p><p>Or else you&rsquo;ll get ES2014</p><p><strong>Marc</strong></p><p>VPN into webpack first</p><p><strong>Henrik</strong></p><p>IT&rsquo;S SO EASY TO DO THIS. I COULD WRITE THESE FOR THREE DAYS STRAIGHT! it&rsquo;s unbelievable.</p><p><strong>Marc</strong></p><p>Run a kickstarter for it!</p><p><strong>Henrik</strong></p><p>Kerberos auth to kickstarter, but I&rsquo;ll find my kickstarter video through an incubator I just funded on indiegogo.</p><p><strong>Marc</strong></p><p>Build a rapid prototype protocol</p><p><strong>Henrik</strong></p><p>I might just use DDP</p><p><strong>Marc</strong></p><p>Into CouchDB</p><p><strong>Henrik</strong></p><p>or&hellip; UDP!</p><p>I just need about half the packet-loss and I&rsquo;ll get funded.</p><p>That&rsquo;s what Theil told me</p><p><strong>Marc</strong></p><p>I hear UDP handshakes better than SSL through a CDN</p><p><strong>Henrik</strong></p><p>Good point</p><p>yahoo wants in too.</p><p>They killed Pipes!</p><p><strong>Marc</strong></p><p>Just like Google killed reader</p><p><strong>Henrik</strong></p><p>Beacon API is always better for calling home with. Otherwise AWS never gets the event data</p><p>&ldquo;OK Google&rdquo; amirite?!?</p><p><strong>Marc</strong></p><p>Isn&rsquo;t that GraphQL Siri on a XSS CORS call?</p><p><strong>Henrik</strong></p><p>Think so. But use movable type</p><p>Or it KILLS your wifi</p><p><strong>Marc</strong></p><p>Movable type is built on Functional reactive Pure Script so it&rsquo;s pretty much Ghost</p><p><strong>Henrik</strong></p><p>With JSP templates, but yeah.</p><p>LaTeX is just better anyway</p><p>Especially if you use D3 to render it</p><p><strong>Marc</strong></p><p>Like a mongo elastic search!</p><p><strong>Henrik</strong></p><p>I think I&rsquo;d run that as a docker container</p><p><strong>Marc</strong></p><p>On a Hadoop prerendered iframe</p><p><strong>Henrik</strong></p><p>But behind nginx</p><p><strong>Marc</strong></p><p>Never before have I seen so many processors running varnish</p><p><strong>Henrik</strong></p><p>Deploy it with ServiceWorker though. Or you may violate the CSP.</p><p>Unless it&rsquo;s MIT licensed.</p><p>Varnish is great.</p><p><strong>Marc</strong></p><p>They were spinning up so many Apache instances that the load balancers couldn&rsquo;t stand it except for in Google Gears running in Unity</p><p><strong>Henrik</strong></p><p>I just wrote an Object tag yesterday that did that but using Iced CoffeeScript so Eich would digg it on HN.</p><p>He re-tweeted me on pownce the other day.</p><p><strong>Marc</strong></p><p>Distributed go pros are all the stack overflow credit</p><p><strong>Henrik</strong></p><p>Stream it with EventSource</p><p>It&rsquo;s way more reliable that flash media server</p><p><strong>Marc</strong></p><p>Git tipped on underscore</p><p><strong>Henrik</strong></p><p>Don&rsquo;t go all TechCrunch Disrupt on me.</p><p><strong>Marc</strong></p><p>Crockford and Eich designed it though</p><p><strong>Henrik</strong></p><p>Crowd funded hackathons?</p><p><strong>Marc</strong></p><p>Together as friends</p><p><strong>Henrik</strong></p><p>I didn&rsquo;t know that</p><p><strong>Marc</strong></p><p>Best friends</p><p><strong>Henrik</strong></p><p>Crock once shipped an MS Word format for fill able PDFs</p><p><strong>Marc</strong></p><p>He wouldn&rsquo;t apologize on his controversial white space views so they canned him in a string literal</p><p><strong>Henrik</strong></p><p>Was on a plane with him coming back from FunConf. He told me all about it.</p><p><strong>Marc</strong></p><p>He was coerced into it</p><p>+{} style</p><p><strong>Henrik</strong></p><p>He was not happy to see so many O&#39;Reilly authors getting slash dotted for Angular directives.</p><p>It&rsquo;s just F# anyway, right?</p><p>Plus some syntactic sugar.</p><p><strong>Marc</strong></p><p>Ya but clearly Microsoft wanted to use SQLlite but they shipped CSVs anyways &ndash; Easier to web inspect</p><p><strong>Henrik</strong></p><p>View source for evah!</p><p><strong>Marc</strong></p><p>Source maps is supposed to solve our code climate CommonJS modules right?</p><p><strong>Henrik</strong></p><p>Do they use the ADB debugging protocol for blackberry 10s browser?</p><p>Yup</p><p><strong>Marc</strong></p><p>Only if you browser sniff</p><p><strong>Henrik</strong></p><p>Works great on new relic</p><p>Just orchestrate your code by using esprima to re-write your Python</p><p><strong>Marc</strong></p><p>Feature test the SASS components</p><p><strong>Henrik</strong></p><p>That&rsquo;s what django does.</p><p>Works like Mocha</p><p>(Oh man, this is the most texts I&rsquo;ve sent since I first got my Nest)</p><p><strong>Marc</strong></p><p>Lol well cappuccino tests objectiveJ In Ember so I&rsquo;m not surprised you can&rsquo;t Ajax more post messages</p><p>60fps for life butter smooth requestAnimationFrame Safaris</p><p>Exactly <em>proto</em> is accessible on every SVG viewport</p><p><strong>Henrik</strong></p><p>yeah, i always extract it with restructuring assignments on my closures</p><p><strong>Marc</strong></p><p>Inheritance call the super method on that ES6 lodash</p><p><strong>Henrik</strong></p><p>ship it!</p><p><strong>Marc</strong></p><p>Deploy to heroku via Dropbox with a static site generating PDF</p><p><strong>Henrik</strong></p><p>meme-generators built with semver’ed APNGs, now that smells like a nice unicode character map</p><p>anti-aliasing always makes it look better though</p><p>that’s why i use typescript to download my web fonts progressively enhancing my UX for my users on gameboy DXes.</p><p><strong>Marc</strong></p><p>That&rsquo;s why progressive JPGs work so well!</p><p><strong>Henrik</strong></p><p>that was their Promise, if you will.</p><p>but they rarely resolve at all</p><p>and they swallow errors like hapi.js when it was using domains!</p><p><strong>Marc</strong></p><p>Observable generators</p><p><strong>Henrik</strong></p><p>Object.observe(redis) I always say</p><p>or use Mutation Observers</p><p><strong>Marc</strong></p><p>Built with linked list dust templates</p><p><strong>Henrik</strong></p><p>yeah, then you can stream ‘em</p><p>works ok with SPDY but not HTTP2</p><p>subtle but important differences in frame rates if you’re on lie-fi</p><p><strong>Marc</strong></p><p>Lol</p><p><strong>Henrik</strong></p><p>i think that’s !important</p><p>oh man, i’m fading like a bad jQuery animation</p><p>good thing it has a chainable syntax</p><p><strong>Marc</strong></p><p>Only if you transition the cubic bezier the GsAP 3dmatrix</p><p><strong>Henrik</strong></p><p>translateZ hacks will help too</p><p><strong>Marc</strong></p><p>Just return monads</p><p><strong>Henrik</strong></p><p>object literal monads</p><p>textmate 2 for windows</p><p><strong>Marc</strong></p><p>Never use Symbols through in your Unicode</p><p><strong>Henrik</strong></p><p>well, yeah, but Symbol.iterator makes more sense to attach as a primitive value if you’re using something like Cocoa</p><p><strong>Marc</strong></p><p>My battery is going to die before we finish this lol</p><p><strong>Henrik</strong></p><p>i’m convinced we could do this for days, we’ve already done it for about an hour longer than i expected to, lol.</p><p>good night my friend, i’ve got a plane to catch at an ungodly hour tomorrow 😊</p><p><strong>Marc</strong></p><p>Dependency inject your dreams</p><p>Sorry had to do it&hellip;</p><p><hr></p><p>So <a href=https://twitter.com/1marc>Marc Grabanski</a> invited me to come teach <a href=\"https://frontendmasters.com/workshops/web-apps/\">a workshop</a> the last two days for his company <a href=\"https://frontendmasters.com/\">Frontend Masters</a> in Minnesota.</p><p></p><p>Yesterday after the workshop we were chatting about how ridiculous tech terminology has become, and frankly, just the sheer volume of it. We jokingly had a short, seemingly plausible conversations that actually make no sense. The above was a continuation of that. This industry is commically jargony.</p><p>Follow <a href=https://twitter.com/1marc>@1marc</a> and <a href=http://twitter.com/henrikjoreteg>@HenrikJoreteg</a> on the twitters for potentially more random nonsense, but no gurantees.</p>","preview":"<p>What follows is an actual SMS conversation I had this evening with Marc Grabanski (with only a few minor edits).</p><p></p><p><strong>Marc</strong></p><p></p><p>Now we can finally write GWT natively and get the performance</p><p><strong>Henrik</strong></p><p>Greater Web Together™. It&rsquo;s finally living up to its name.</p>"},{"slug":"imagine-life-as-a-game-in-which-you-are-juggling","type":"quote","date":"2015-06-20T05:23:28.000Z","old_url":"http://joreteg.com/post/121977988662/imagine-life-as-a-game-in-which-you-are-juggling","title":"CEO of Coca-Cola on Balance","tags":"balance, work","url":"/blog/imagine-life-as-a-game-in-which-you-are-juggling","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/06/imagine-life-as-a-game-in-which-you-are-juggling.html","markdown":"<blockquote><p>Imagine life as a game in which you are juggling some five balls in the air. You name them – work, family, health, friends and spirit – and you’re keeping all of these in the air.</p>\n\n<p>You will soon understand that work is a rubber ball. If you drop it, it will bounce back. But the other four balls – family, health, friends and spirit – are made of glass. If you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same.</p>\n\n<p>You must understand that and strive for Balance in your life.</p></blockquote>\n<p>by: Brian G. Dyson</p>\n\n<p>President and CEO, Coca-Cola Enterprises during his speech at the Georgia Tech 172nd Commencement Address Sept. 6, 1996</p>\n\n<p>Loved this, it&rsquo;s such a powerful analogy! You can read the <a href=\"http://www.dankind.com/blog/speech-by-bryan-dyson-ceo-coca-cola/\">full speech here</a>.</p>","outputFile":"/blog/imagine-life-as-a-game-in-which-you-are-juggling.html","html":"<p><blockquote><p>Imagine life as a game in which you are juggling some five balls in the air. You name them – work, family, health, friends and spirit – and you’re keeping all of these in the air.</p></blockquote></p><p>You will soon understand that work is a rubber ball. If you drop it, it will bounce back. But the other four balls – family, health, friends and spirit – are made of glass. If you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same.</p><p>You must understand that and strive for Balance in your life.</p><p>by: Brian G. Dyson</p><p>President and CEO, Coca-Cola Enterprises during his speech at the Georgia Tech 172nd Commencement Address Sept. 6, 1996</p><p>Loved this, it&rsquo;s such a powerful analogy! You can read the <a href=\"http://www.dankind.com/blog/speech-by-bryan-dyson-ceo-coca-cola/\">full speech here</a>.</p>","preview":"<p><blockquote><p>Imagine life as a game in which you are juggling some five balls in the air. You name them – work, family, health, friends and spirit – and you’re keeping all of these in the air.</p></blockquote></p><p>You will soon understand that work is a rubber ball. If you drop it, it will bounce back. But the other four balls – family, health, friends and spirit – are made of glass. If you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same.</p>"},{"slug":"back-from-the-future-insights-live-in-las-vegas","type":"text","date":"2015-06-05T18:11:37.000Z","title":"Back from the Future Insights Live in Las Vegas","old_url":"http://joreteg.com/post/120789927737/back-from-the-future-insights-live-in-las-vegas","url":"/blog/back-from-the-future-insights-live-in-las-vegas","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/06/back-from-the-future-insights-live-in-las-vegas.html","markdown":"<p>I had a blast at <a href=\"https://futureinsightslive.com/las-vegas-2015/\">Future Insights Live</a> in Vegas this week where I led a 1-day workshop on Building a Modular Front-end Application and gave a talk about Optimizing for Change (by using modular architectures).</p>\n\n<p>The event was a great mix of content and people, excellently curated and executed. Big props to <a href=\"https://twitter.com/bathcitygirl\">Sarah Robinson</a> and <a href=\"https://twitter.com/followellie\">Ellie Robinson</a> who produced the conference.</p>\n\n<p>Happy to have gotten to hang out with a bunch of really great people, such as <a href=\"https://jonathanstark.com/\">Jonathan Stark</a>, <a href=\"https://hitenism.com/\">Hiten Shah</a> (founder of <a href=\"https://kissmetrics.com/\">KissMetrics</a> and <a href=\"https://www.crazyegg.com\">CrazyEgg</a>), and seeing some friends from previous conferences like <a href=\"https://twitter.com/scottjenson\">Scott Jenson</a>.</p>\n\n<p>Biggest takeaways:</p>\n\n<ul><li>From Hiten&rsquo;s talk: Measure things, test things. So you can discover what actually works instead of blindly publishing things.</li>\n<li>The Physical Web stuff that Scott is working on at Google is really awesome and is still going strong: <a href=\"https://google.github.io/physical-web/\">https://google.github.io/physical-web/</a></li>\n<li>From Jonathan&rsquo;s keynote: </li>\n</ul><blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">2 billion smart phones on the planet now. \n4 billion predicted by 2020 (80% of adults).\n\n– <a href=\"https://twitter.com/jonathanstark\">@jonathanstark</a> at <a href=\"https://twitter.com/hashtag/FILIVE?src=hash\">#FILIVE</a></p>— Henrik Joreteg (@HenrikJoreteg) <a href=\"https://twitter.com/HenrikJoreteg/status/605769600458825728\">June 2, 2015</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","outputFile":"/blog/back-from-the-future-insights-live-in-las-vegas.html","html":"<p>I had a blast at <a href=\"https://futureinsightslive.com/las-vegas-2015/\">Future Insights Live</a> in Vegas this week where I led a 1-day workshop on Building a Modular Front-end Application and gave a talk about Optimizing for Change (by using modular architectures).</p><p>The event was a great mix of content and people, excellently curated and executed. Big props to <a href=https://twitter.com/bathcitygirl>Sarah Robinson</a> and <a href=https://twitter.com/followellie>Ellie Robinson</a> who produced the conference.</p><p>Happy to have gotten to hang out with a bunch of really great people, such as <a href=\"https://jonathanstark.com/\">Jonathan Stark</a>, <a href=\"https://hitenism.com/\">Hiten Shah</a> (founder of <a href=\"https://kissmetrics.com/\">KissMetrics</a> and <a href=https://www.crazyegg.com>CrazyEgg</a>), and seeing some friends from previous conferences like <a href=https://twitter.com/scottjenson>Scott Jenson</a>.</p><p>Biggest takeaways:</p><p><ul><li>From Hiten&rsquo;s talk: Measure things, test things. So you can discover what actually works instead of blindly publishing things.</li></ul></p><p><li>The Physical Web stuff that Scott is working on at Google is really awesome and is still going strong: <a href=\"https://google.github.io/physical-web/\">https://google.github.io/physical-web/</a></li></p><p><li>From Jonathan&rsquo;s keynote:</li><blockquote class=twitter-tweet lang=en><p lang=en dir=ltr>2 billion smart phones on the planet now. 4 billion predicted by 2020 (80% of adults).</p><p>– <a href=https://twitter.com/jonathanstark>@jonathanstark</a> at <a href=\"https://twitter.com/hashtag/FILIVE?src=hash\">#FILIVE</a></p>— Henrik Joreteg (@HenrikJoreteg) <a href=https://twitter.com/HenrikJoreteg/status/605769600458825728>June 2, 2015</a></blockquote></p><script async src=//platform.twitter.com/widgets.js charset=utf-8></script>","preview":"<p>I had a blast at <a href=\"https://futureinsightslive.com/las-vegas-2015/\">Future Insights Live</a> in Vegas this week where I led a 1-day workshop on Building a Modular Front-end Application and gave a talk about Optimizing for Change (by using modular architectures).</p><p>The event was a great mix of content and people, excellently curated and executed. Big props to <a href=https://twitter.com/bathcitygirl>Sarah Robinson</a> and <a href=https://twitter.com/followellie>Ellie Robinson</a> who produced the conference.</p>"},{"slug":"an-interview-i-did-with-oreillys-mac-slocum-at","type":"video","date":"2015-04-30T23:28:34.000Z","thumbnail_url":"https://i.ytimg.com/vi/bNwShmaITWE/hqdefault.jpg","video_type":"youtube","title":"My interview with Mac Slocum at FluentConf 2015","old_url":"http://joreteg.com/post/117808523317/an-interview-i-did-with-oreillys-mac-slocum-at","url":"/blog/an-interview-i-did-with-oreillys-mac-slocum-at","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2015/05/an-interview-i-did-with-oreillys-mac-slocum-at.html","markdown":"Discussing:\n\n- Native Web Apps\n- Web apps with deeper OS integration\n- Pre-rendering static HTML for NWAs\n- [Surge.sh](http://surge.sh)\n\n\n<iframe width=\"500\" height=\"281\"  id=\"youtube_iframe\" src=\"https://www.youtube.com/embed/bNwShmaITWE?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=\"0\" allowfullscreen></iframe>","outputFile":"/blog/an-interview-i-did-with-oreillys-mac-slocum-at.html","html":"<p>Discussing:</p><ul><li>Native Web Apps</li><li>Web apps with deeper OS integration</li><li>Pre-rendering static HTML for NWAs</li><li><a href=http://surge.sh>Surge.sh</a></li></ul><iframe width=500 height=281 id=youtube_iframe src=\"https://www.youtube.com/embed/bNwShmaITWE?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>","preview":"<p>Discussing:</p><ul><li>Native Web Apps</li><li>Web apps with deeper OS integration</li><li>Pre-rendering static HTML for NWAs</li><li><a href=http://surge.sh>Surge.sh</a></li></ul><iframe width=500 height=281 id=youtube_iframe src=\"https://www.youtube.com/embed/bNwShmaITWE?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>"},{"slug":"a-single-page-story-my-talk-from-ffconf-in","type":"video","date":"2014-12-11T19:32:00.000Z","thumbnail_url":"https://i.ytimg.com/vi/hrAssE8meRo/hqdefault.jpg","video_type":"youtube","title":"A Single Page Story","old_url":"http://joreteg.com/post/104943185037/a-single-page-story-my-talk-from-ffconf-in","tags":"talk, video, webapps, js","url":"/blog/a-single-page-story-my-talk-from-ffconf-in","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2014/12/a-single-page-story-my-talk-from-ffconf-in.html","markdown":"A Single Page Story\n\nMy talk from FFConf in Brighton, UK.\n\nCovering:\n\nShould we build apps that require JavaScript to run\nWhat is a &ldquo;native web app&rdquo;?\nWhat about progressive enhancement?\nPerformance implications of clientside apps\nWhat about Twitter’s move away from clientside back to server-rendered?\nThe two classes of web apps\nUser expectations of modern applications\nInstallable web apps\nTrue offline support for web apps: ServiceWorker\nIsomorphic (dual-rendered) applications\nPicking tools for a rapidly changing environment\nOptimizing for change\nBuilding for the future of the web\n\n<iframe width=\"500\" height=\"281\"  id=\"youtube_iframe\" src=\"https://www.youtube.com/embed/hrAssE8meRo?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=\"0\" allowfullscreen></iframe>","outputFile":"/blog/a-single-page-story-my-talk-from-ffconf-in.html","html":"<p>A Single Page Story</p><p>My talk from FFConf in Brighton, UK.</p><p>Covering:</p><p>Should we build apps that require JavaScript to run What is a &ldquo;native web app&rdquo;? What about progressive enhancement? Performance implications of clientside apps What about Twitter’s move away from clientside back to server-rendered? The two classes of web apps User expectations of modern applications Installable web apps True offline support for web apps: ServiceWorker Isomorphic (dual-rendered) applications Picking tools for a rapidly changing environment Optimizing for change Building for the future of the web</p><iframe width=500 height=281 id=youtube_iframe src=\"https://www.youtube.com/embed/hrAssE8meRo?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>","preview":"<p>A Single Page Story</p><p>My talk from FFConf in Brighton, UK.</p><p>Covering:</p><p>Should we build apps that require JavaScript to run What is a &ldquo;native web app&rdquo;? What about progressive enhancement? Performance implications of clientside apps What about Twitter’s move away from clientside back to server-rendered? The two classes of web apps User expectations of modern applications Installable web apps True offline support for web apps: ServiceWorker Isomorphic (dual-rendered) applications Picking tools for a rapidly changing environment Optimizing for change Building for the future of the web</p><iframe width=500 height=281 id=youtube_iframe src=\"https://www.youtube.com/embed/hrAssE8meRo?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>"},{"slug":"making-webrtc-awesome","type":"link","date":"2013-11-15T06:16:00.000Z","title":"Making WebRTC Awesome","url":"/blog/making-webrtc-awesome","link_image":"http://33.media.tumblr.com/tumblr_mwak3qlm0L1qzy2ur_og.jpg","old_url":"http://joreteg.com/post/67038684075/making-webrtc-awesome","tags":"talk, video, webrtc","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2013/11/making-webrtc-awesome.html","markdown":"<a href=\"https://speakerdeck.com/henrikjoreteg/making-webrtc-awesome-cascadiajs-2013#stargazers\">https://speakerdeck.com/henrikjoreteg/making-webrtc-awesome-cascadiajs-2013#stargazers</a>\n\n<p>My talk from CascadiaJS 2013</p>\n\n<p>video: <a href=\"https://www.youtube.com/watch?v=velmlLKmIA8\">https://www.youtube.com/watch?v=velmlLKmIA8</a></p>","outputFile":"/blog/making-webrtc-awesome.html","html":"<p><a href=https://speakerdeck.com/henrikjoreteg/making-webrtc-awesome-cascadiajs-2013#stargazers>https://speakerdeck.com/henrikjoreteg/making-webrtc-awesome-cascadiajs-2013#stargazers</a></p><p>My talk from CascadiaJS 2013</p><p>video: <a href=\"https://www.youtube.com/watch?v=velmlLKmIA8\">https://www.youtube.com/watch?v=velmlLKmIA8</a></p>","preview":"<p><a href=https://speakerdeck.com/henrikjoreteg/making-webrtc-awesome-cascadiajs-2013#stargazers>https://speakerdeck.com/henrikjoreteg/making-webrtc-awesome-cascadiajs-2013#stargazers</a></p><p>My talk from CascadiaJS 2013</p><p>video: <a href=\"https://www.youtube.com/watch?v=velmlLKmIA8\">https://www.youtube.com/watch?v=velmlLKmIA8</a></p>"},{"slug":"good-morning-at-hollywood-beach","type":"photo","date":"2013-08-12T16:38:12.000Z","link_url":"http://instagram.com/p/c64Xy4RGI9/","title":"Good morning. (at Hollywood Beach)","old_url":"http://joreteg.com/post/58067434283/good-morning-at-hollywood-beach","url":"/blog/good-morning-at-hollywood-beach","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2013/08/good-morning-at-hollywood-beach.html","markdown":"Good morning. (at Hollywood Beach)\n\n<img src=\"http://41.media.tumblr.com/0194f29d7941bfffbfb70d38696aac86/tumblr_mrffjoSvdk1qzy2uro1_1280.jpg\">","outputFile":"/blog/good-morning-at-hollywood-beach.html","html":"<p>Good morning. (at Hollywood Beach)</p><p><img src=http://41.media.tumblr.com/0194f29d7941bfffbfb70d38696aac86/tumblr_mrffjoSvdk1qzy2uro1_1280.jpg></p>","preview":"<p>Good morning. (at Hollywood Beach)</p><p><img src=http://41.media.tumblr.com/0194f29d7941bfffbfb70d38696aac86/tumblr_mrffjoSvdk1qzy2uro1_1280.jpg></p>"},{"title":"No Shortcuts","date":"2013-06-11T17:00:00.000Z","slug":"no-shortcuts","old_url":"http://joreteg.com/post/52717236492/no-shortcuts","url":"/blog/no-shortcuts","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2013/06/no-shortcuts.md","markdown":"The best things in life are not simple to explain. Even if you’re able to summarize a “best thing” in a short sentence, the full reasoning behind it is likely far more nuanced. For example, if you’re fortunate enough to be married to someone whom you feel is the best thing in your life, you may say: “my spouse is the best thing, because they make me a better person.”\n\nWhile this may be true, if pressed on *how* they make you a better person, you’d probably start telling stories that support your point. You’d need a book to do it justice.\n\nAlso, whatever the best thing is, it likely wasn’t so when it first entered your life. In the case of the spouse, they were not the best thing in your life on the day you met them. Over time, they grew to become that as you invested more and more of yourself, your heart, your passion and your time into that person and they did the same. It happened incrementally.\n\nI’d go as far as to say that the very nature of “best things” is that they obtained that status over a long time of ongoing investment and incremental improvement.\n\nIf that’s true, then by definition, there really are no shortcuts to the best things in life.\nShortcuts are inherently valueless and chasing them is a waste of precious time.\n\nInstead, invest steadily in the things that matter most.","outputFile":"/blog/no-shortcuts.html","html":"<p>The best things in life are not simple to explain. Even if you’re able to summarize a “best thing” in a short sentence, the full reasoning behind it is likely far more nuanced. For example, if you’re fortunate enough to be married to someone whom you feel is the best thing in your life, you may say: “my spouse is the best thing, because they make me a better person.”</p><p>While this may be true, if pressed on <em>how</em> they make you a better person, you’d probably start telling stories that support your point. You’d need a book to do it justice.</p><p>Also, whatever the best thing is, it likely wasn’t so when it first entered your life. In the case of the spouse, they were not the best thing in your life on the day you met them. Over time, they grew to become that as you invested more and more of yourself, your heart, your passion and your time into that person and they did the same. It happened incrementally.</p><p>I’d go as far as to say that the very nature of “best things” is that they obtained that status over a long time of ongoing investment and incremental improvement.</p><p>If that’s true, then by definition, there really are no shortcuts to the best things in life. Shortcuts are inherently valueless and chasing them is a waste of precious time.</p><p>Instead, invest steadily in the things that matter most.</p>","preview":"<p>The best things in life are not simple to explain. Even if you’re able to summarize a “best thing” in a short sentence, the full reasoning behind it is likely far more nuanced. For example, if you’re fortunate enough to be married to someone whom you feel is the best thing in your life, you may say: “my spouse is the best thing, because they make me a better person.”</p>"},{"slug":"js-applications","type":"text","date":"2013-04-30T21:32:00.000Z","title":"JS applications","old_url":"http://joreteg.com/post/49303786048/js-applications","url":"/blog/js-applications","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2013/04/js-applications.html","markdown":"<p>Crazy, random thought: Just think if you could serve a JS file with a content type of &ldquo;application/javascript&rdquo; and just have the browser treat it as the the equivalent of doing this:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=\"/the_application.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>That would certainly help clarify the distinction between a clientside app and a server side one.</p>","outputFile":"/blog/js-applications.html","html":"<p>Crazy, random thought: Just think if you could serve a JS file with a content type of &ldquo;application/javascript&rdquo; and just have the browser treat it as the the equivalent of doing this:</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=\"/the_application.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre><p>That would certainly help clarify the distinction between a clientside app and a server side one.</p>","preview":"<p>Crazy, random thought: Just think if you could serve a JS file with a content type of &ldquo;application/javascript&rdquo; and just have the browser treat it as the the equivalent of doing this:</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=\"/the_application.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>"},{"slug":"contemplative","type":"text","date":"2012-07-19T09:17:55.000Z","title":"Contemplative","old_url":"http://joreteg.com/post/27546190898/contemplative","url":"/blog/contemplative","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2012/07/contemplative.html","markdown":"<p>I&rsquo;m currently sitting alone by a fire pit on an empty beach at 1:46 AM. Waves are beating the shore behind me.</p>\n\n<p>It’s just me, my thoughts, and this crazy little device that lets me publish my silly contemplative thoughts for anyone in the world (who cares to) to read. So here we go&hellip; </p>\n\n<p>It&rsquo;s easy to fall into the trap of thinking our thoughts are the ones that matter most and that others should care about them because they&rsquo;re somehow special or unique. But really, I’m no more peculiar than one of these grains of sand my toes are buried in. Even if I were &ldquo;one in a million&rdquo;, with nearly 7 billion humans on the planet there are 7000 people just like me, who are alive this second and are having thoughts just like mine.</p>\n\n<p>Despite all of this, I have thoughts that matter. Not because I&rsquo;m special, but because these are the thoughts that determine my sense of self-worth. Thus, despite their arguable insignificance in the eyes of the world, these thoughts end up mattering a great deal. They have a multiplying effect because they determine how I treat each and every person I come in contact with.</p>\n\n<p>So, for the record, and as a bit of a thought exercise, these are the things I know about myself:</p>\n\n<p>1. I am blessed. In that my imperfections are covered by the Grace of my Savior and the forgiveness and love extended to me by my friends and family. To me, there is no greater blessing than this.</p>\n\n<p>2. I am rich. In that I come home every day to my wife and daughter who are the loves of my life. Also, in that I have many people in my life who continually teach me the meaning of love and generosity. To me, there are no greater riches than these.</p>\n\n<p>3. I am happy. In that to the very core of my being I know the items above to be true. To me, there is no greater joy.</p>\n\n<p> These are the things I know.</p>","outputFile":"/blog/contemplative.html","html":"<p>I&rsquo;m currently sitting alone by a fire pit on an empty beach at 1:46 AM. Waves are beating the shore behind me.</p><p>It’s just me, my thoughts, and this crazy little device that lets me publish my silly contemplative thoughts for anyone in the world (who cares to) to read. So here we go&hellip;</p><p>It&rsquo;s easy to fall into the trap of thinking our thoughts are the ones that matter most and that others should care about them because they&rsquo;re somehow special or unique. But really, I’m no more peculiar than one of these grains of sand my toes are buried in. Even if I were &ldquo;one in a million&rdquo;, with nearly 7 billion humans on the planet there are 7000 people just like me, who are alive this second and are having thoughts just like mine.</p><p>Despite all of this, I have thoughts that matter. Not because I&rsquo;m special, but because these are the thoughts that determine my sense of self-worth. Thus, despite their arguable insignificance in the eyes of the world, these thoughts end up mattering a great deal. They have a multiplying effect because they determine how I treat each and every person I come in contact with.</p><p>So, for the record, and as a bit of a thought exercise, these are the things I know about myself:</p><p>1. I am blessed. In that my imperfections are covered by the Grace of my Savior and the forgiveness and love extended to me by my friends and family. To me, there is no greater blessing than this.</p><p>2. I am rich. In that I come home every day to my wife and daughter who are the loves of my life. Also, in that I have many people in my life who continually teach me the meaning of love and generosity. To me, there are no greater riches than these.</p><p>3. I am happy. In that to the very core of my being I know the items above to be true. To me, there is no greater joy.</p><p>These are the things I know.</p>","preview":"<p>I&rsquo;m currently sitting alone by a fire pit on an empty beach at 1:46 AM. Waves are beating the shore behind me.</p><p>It’s just me, my thoughts, and this crazy little device that lets me publish my silly contemplative thoughts for anyone in the world (who cares to) to read. So here we go&hellip;</p>"},{"slug":"ive-known-horrible-programmers-who-were-prolific","type":"quote","date":"2012-03-29T16:28:00.000Z","title":"Chris Wanstrath on prolific programmers","old_url":"http://joreteg.com/post/20119927053/ive-known-horrible-programmers-who-were-prolific","tags":"quote, programming","url":"/blog/ive-known-horrible-programmers-who-were-prolific","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2012/03/ive-known-horrible-programmers-who-were-prolific.html","markdown":"<blockquote><p>I’ve known horrible programmers who were prolific. I’ve known great programmers who were slow but thorough.</p>\n\n<p>In my experience the best developers are all curious, passionate people. They care about their craft and want to make something great. They’re always looking for ways to improve themselves and their code. It’s how they go from novice to expert – by constantly learning.</p></blockquote>\nChris Wanstrath - In an <a href=\"http://www.forbes.com/sites/venkateshrao/2012/03/27/github-and-the-democratization-of-programming/\">interview with forbes</a>","outputFile":"/blog/ive-known-horrible-programmers-who-were-prolific.html","html":"<p><blockquote><p>I’ve known horrible programmers who were prolific. I’ve known great programmers who were slow but thorough.</p></blockquote></p><p></p><p>In my experience the best developers are all curious, passionate people. They care about their craft and want to make something great. They’re always looking for ways to improve themselves and their code. It’s how they go from novice to expert – by constantly learning.</p>Chris Wanstrath - In an <a href=\"http://www.forbes.com/sites/venkateshrao/2012/03/27/github-and-the-democratization-of-programming/\">interview with forbes</a><p></p>","preview":"<p><blockquote><p>I’ve known horrible programmers who were prolific. I’ve known great programmers who were slow but thorough.</p></blockquote></p><p></p><p>In my experience the best developers are all curious, passionate people. They care about their craft and want to make something great. They’re always looking for ways to improve themselves and their code. It’s how they go from novice to expert – by constantly learning.</p>Chris Wanstrath - In an <a href=\"http://www.forbes.com/sites/venkateshrao/2012/03/27/github-and-the-democratization-of-programming/\">interview with forbes</a>"},{"slug":"nodeconf-presentation-video","type":"text","date":"2011-09-14T15:09:55.000Z","title":"NodeConf presentation video","old_url":"http://joreteg.com/post/10202841629/nodeconf-presentation-video","url":"/blog/nodeconf-presentation-video","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2011/09/nodeconf-presentation-video.html","markdown":"<p>They released the videos from nodeconf a couple weeks ago. They&rsquo;re all on <a href=\"http://blip.tv/jsconf\">JSConf&rsquo;s Blip.tv page</a>.</p>\n\n<p>Here&rsquo;s mine: <a href=\"http://blip.tv/jsconf/nodeconf-2011-henrik-joreteg-5507256\">Building Realtime Single Page Apps [VIDEO]</a></p>","outputFile":"/blog/nodeconf-presentation-video.html","html":"<p>They released the videos from nodeconf a couple weeks ago. They&rsquo;re all on <a href=http://blip.tv/jsconf>JSConf&rsquo;s Blip.tv page</a>.</p><p>Here&rsquo;s mine: <a href=http://blip.tv/jsconf/nodeconf-2011-henrik-joreteg-5507256>Building Realtime Single Page Apps [VIDEO]</a></p>","preview":"<p>They released the videos from nodeconf a couple weeks ago. They&rsquo;re all on <a href=http://blip.tv/jsconf>JSConf&rsquo;s Blip.tv page</a>.</p><p>Here&rsquo;s mine: <a href=http://blip.tv/jsconf/nodeconf-2011-henrik-joreteg-5507256>Building Realtime Single Page Apps [VIDEO]</a></p>"},{"slug":"javascript-web-applications","type":"text","date":"2011-06-02T15:02:43.000Z","title":"JavaScript Web Applications","old_url":"http://joreteg.com/post/6108447909/javascript-web-applications","url":"/blog/javascript-web-applications","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2011/06/javascript-web-applications.html","markdown":"<p>I&rsquo;m honored to have be a technical reviewer for Alex MacCaw&rsquo;s (<a href=\"http://twitter.com/maccman\">@maccman</a>) book &ldquo;JavaScript Web Applications&rdquo;. It&rsquo;s <a href=\"http://oreilly.com/catalog/0636920018421\">available as an early release e-book</a> from O'Reilly.</p>\n\n<p>If you&rsquo;re into single-page app development, it&rsquo;s probably one of the most complete and up-to-date resources available on the topic. I definitely recommend it.</p>","outputFile":"/blog/javascript-web-applications.html","html":"<p>I&rsquo;m honored to have be a technical reviewer for Alex MacCaw&rsquo;s (<a href=http://twitter.com/maccman>@maccman</a>) book &ldquo;JavaScript Web Applications&rdquo;. It&rsquo;s <a href=http://oreilly.com/catalog/0636920018421>available as an early release e-book</a> from O&#39;Reilly.</p><p>If you&rsquo;re into single-page app development, it&rsquo;s probably one of the most complete and up-to-date resources available on the topic. I definitely recommend it.</p>","preview":"<p>I&rsquo;m honored to have be a technical reviewer for Alex MacCaw&rsquo;s (<a href=http://twitter.com/maccman>@maccman</a>) book &ldquo;JavaScript Web Applications&rdquo;. It&rsquo;s <a href=http://oreilly.com/catalog/0636920018421>available as an early release e-book</a> from O&#39;Reilly.</p><p>If you&rsquo;re into single-page app development, it&rsquo;s probably one of the most complete and up-to-date resources available on the topic. I definitely recommend it.</p>"},{"slug":"building-realtime-webapps-presentation-nodeconf","type":"text","date":"2011-05-08T16:07:50.000Z","title":"Slides from my nodeconf presentation","old_url":"http://joreteg.com/post/5307043976/building-realtime-webapps-presentation-nodeconf","url":"/blog/building-realtime-webapps-presentation-nodeconf","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2011/05/building-realtime-webapps-presentation-nodeconf.html","markdown":"<div style=\"width:425px\" id=\"__ss_7864852\"> <strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/HenrikJoreteg/node-conf-building-realtime-webapps\" title=\"Node conf - building realtime webapps\">Node conf - building realtime webapps</a></strong> <iframe src=\"http://www.slideshare.net/slideshow/embed_code/7864852\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe> <div style=\"padding:5px 0 12px\"> View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/HenrikJoreteg\">Henrik Joreteg</a> </div> </div>","outputFile":"/blog/building-realtime-webapps-presentation-nodeconf.html","html":"<div style=width:425px id=__ss_7864852><strong style=\"display:block;margin:12px 0 4px\"><a href=http://www.slideshare.net/HenrikJoreteg/node-conf-building-realtime-webapps title=\"Node conf - building realtime webapps\">Node conf - building realtime webapps</a></strong><iframe src=http://www.slideshare.net/slideshow/embed_code/7864852 width=425 height=355 frameborder=0 marginwidth=0 marginheight=0 scrolling=no></iframe><div style=\"padding:5px 0 12px\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=http://www.slideshare.net/HenrikJoreteg>Henrik Joreteg</a></div></div>","preview":"<div style=width:425px id=__ss_7864852><strong style=\"display:block;margin:12px 0 4px\"><a href=http://www.slideshare.net/HenrikJoreteg/node-conf-building-realtime-webapps title=\"Node conf - building realtime webapps\">Node conf - building realtime webapps</a></strong><iframe src=http://www.slideshare.net/slideshow/embed_code/7864852 width=425 height=355 frameborder=0 marginwidth=0 marginheight=0 scrolling=no></iframe><div style=\"padding:5px 0 12px\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=http://www.slideshare.net/HenrikJoreteg>Henrik Joreteg</a></div></div>"},{"slug":"javascript-as-a-game-of-telephone-pictionary","type":"text","date":"2010-12-31T06:51:18.000Z","title":"JavaScript — as a game of telephone pictionary","old_url":"http://joreteg.com/post/2539135484/javascript-as-a-game-of-telephone-pictionary","url":"/blog/javascript-as-a-game-of-telephone-pictionary","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/12/javascript-as-a-game-of-telephone-pictionary.html","markdown":"<p>Telephone pictionary is where you start with word and taking turns in a circle alternately draw or describe the picture or phrase received from the previous person.</p>\n\n<p>Here&rsquo;s what happens when you start with &ldquo;JavaScript&rdquo; and pass it off to a bunch of nerds at the <a href=\"http://andyet.net\">&amp;yet</a> Christmas party.</p>\n\n<p><object width=\"400\" height=\"300\"> <param name=\"flashvars\" value=\"offsite=true&amp;lang=en-us&amp;page_show_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2Fshow%2F&amp;page_show_back_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2F&amp;set_id=72157625711905832&amp;jump_to=\"><param name=\"movie\" value=\"http://www.flickr.com/apps/slideshow/show.swf?v=71649\"><param name=\"allowFullScreen\" value=\"true\"><embed type=\"application/x-shockwave-flash\" src=\"http://www.flickr.com/apps/slideshow/show.swf?v=71649\" allowfullscreen=\"true\" flashvars=\"offsite=true&amp;lang=en-us&amp;page_show_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2Fshow%2F&amp;page_show_back_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2F&amp;set_id=72157625711905832&amp;jump_to=\" width=\"400\" height=\"300\"></embed></object></p>\n\n<p>Interestingly enough. The last few cards all seem to fit rather well with many people&rsquo;s perceptions of JS.</p>","outputFile":"/blog/javascript-as-a-game-of-telephone-pictionary.html","html":"<p>Telephone pictionary is where you start with word and taking turns in a circle alternately draw or describe the picture or phrase received from the previous person.</p><p>Here&rsquo;s what happens when you start with &ldquo;JavaScript&rdquo; and pass it off to a bunch of nerds at the <a href=http://andyet.net>&amp;yet</a> Christmas party.</p><p><object width=400 height=300><param name=flashvars value=\"offsite=true&amp;lang=en-us&amp;page_show_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2Fshow%2F&amp;page_show_back_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2F&amp;set_id=72157625711905832&amp;jump_to=\"><param name=movie value=\"http://www.flickr.com/apps/slideshow/show.swf?v=71649\"><param name=allowFullScreen value=true><embed type=application/x-shockwave-flash src=\"http://www.flickr.com/apps/slideshow/show.swf?v=71649\" allowfullscreen=true flashvars=\"offsite=true&amp;lang=en-us&amp;page_show_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2Fshow%2F&amp;page_show_back_url=%2Fphotos%2Fhjoreteg%2Fsets%2F72157625711905832%2F&amp;set_id=72157625711905832&amp;jump_to=\" width=400 height=300></object></p><p>Interestingly enough. The last few cards all seem to fit rather well with many people&rsquo;s perceptions of JS.</p>","preview":"<p>Telephone pictionary is where you start with word and taking turns in a circle alternately draw or describe the picture or phrase received from the previous person.</p><p>Here&rsquo;s what happens when you start with &ldquo;JavaScript&rdquo; and pass it off to a bunch of nerds at the <a href=http://andyet.net>&amp;yet</a> Christmas party.</p>"},{"slug":"magically-run-stuff-when-near-mac-or-not","type":"text","date":"2010-08-07T16:09:59.000Z","title":"How to magically run stuff when you're near your Mac... or not","old_url":"http://joreteg.com/post/918116737/magically-run-stuff-when-near-mac-or-not","url":"/blog/magically-run-stuff-when-near-mac-or-not","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/08/magically-run-stuff-when-near-mac-or-not.html","markdown":"or not\"\nold_url: http://joreteg.com/post/918116737/magically-run-stuff-when-near-mac-or-not\n...\n\n<h2>What you need</h2>\n\n<ul><li>A Mac</li>\n<li>Some type of bluetooth device you always have with you (let&rsquo;s get real, if you&rsquo;ve got a mac you&rsquo;re using an iPhone)</li>\n</ul><h2>Step 1.</h2>\n\n<p>Download and install <a href=\"http://code.google.com/p/reduxcomputing-proximity/downloads/list\">Proximity</a>:</p>\n\n<p><img src=\"http://38.media.tumblr.com/tumblr_l6shfw5Qjg1qzx3i9.png\" alt=\"proximity download screenshot\"/></p>\n\n<h2>Step 2.</h2>\n\n<p>Open AppleScript editor and create a script to run when you&rsquo;re near your computer. Mine is super simple. It just turns off the screen saver and sets my chat status in &ldquo;Adium&rdquo; (if it&rsquo;s running) to available. But obviously you could do anything you can do in AppleScript. Mine looks something like this:</p>\n\n<hr><pre><code>tell application \"ScreenSaverEngine\" to quit\n\nif appIsRunning(\"Adium\") then\n    tell application \"Adium\" to go available\nend if\n\non appIsRunning(appName)\n    tell application \"System Events\" to (name of processes) contains appName\nend appIsRunning\n</code></pre>\n\n<hr><p>And create another one for when you&rsquo;re away. Once again mine&rsquo;s super simple:</p>\n\n<hr><pre><code>tell application \"ScreenSaverEngine\" to activate\n\nif appIsRunning(\"Adium\") then\n    tell application \"Adium\" to go away with message \"Appears to have stepped away for a bit.\"\nend if\n\non appIsRunning(appName)\n    tell application \"System Events\" to (name of processes) contains appName\nend appIsRunning\n</code></pre>\n\n<hr><p>I saved these two scripts in a &ldquo;Scripts&rdquo; folder I created in my home directory (fancy that!).</p>\n\n<h2>Step 3.</h2>\n\n<p>Now all you have to do is give tell Proximity which script to run when and which bluetooth device you want it to look for. If Proximity is running you&rsquo;ll see a small (somewhat ugly) bluetooth lookin&rsquo; icon in your toolbar. Click it to open preferences. My preferences look like this:</p>\n\n<p><img src=\"http://33.media.tumblr.com/tumblr_l6si3p8dYg1qzx3i9.png\" alt=\"proximity preferences\"/></p>\n\n<h2>Step 4.</h2>\n\n<p>Tell <a href=\"http://twitter.com/HenrikJoreteg\">@HenrikJoreteg</a> on twitter that it worked for you and that you&rsquo;d give him a high-five if you were within reasonable high-five range.</p>","outputFile":"/blog/magically-run-stuff-when-near-mac-or-not.html","html":"<p>or not&quot; old_url: http://joreteg.com/post/918116737/magically-run-stuff-when-near-mac-or-not ...</p><h2>What you need</h2><p><ul><li>A Mac</li></ul></p><p><li>Some type of bluetooth device you always have with you (let&rsquo;s get real, if you&rsquo;ve got a mac you&rsquo;re using an iPhone)</li></p><h2>Step 1.</h2><p></p><p>Download and install <a href=http://code.google.com/p/reduxcomputing-proximity/downloads/list>Proximity</a>:</p><p><img src=http://38.media.tumblr.com/tumblr_l6shfw5Qjg1qzx3i9.png alt=\"proximity download screenshot\"></p><h2>Step 2.</h2><p>Open AppleScript editor and create a script to run when you&rsquo;re near your computer. Mine is super simple. It just turns off the screen saver and sets my chat status in &ldquo;Adium&rdquo; (if it&rsquo;s running) to available. But obviously you could do anything you can do in AppleScript. Mine looks something like this:</p><p><hr><pre><code>tell application &quot;ScreenSaverEngine&quot; to quit</code></pre></p><p>if appIsRunning(&quot;Adium&quot;) then tell application &quot;Adium&quot; to go available end if</p><p>on appIsRunning(appName) tell application &quot;System Events&quot; to (name of processes) contains appName end appIsRunning</p><p><hr></p><p>And create another one for when you&rsquo;re away. Once again mine&rsquo;s super simple:</p><p></p><p><hr><pre><code>tell application &quot;ScreenSaverEngine&quot; to activate</code></pre></p><p>if appIsRunning(&quot;Adium&quot;) then tell application &quot;Adium&quot; to go away with message &quot;Appears to have stepped away for a bit.&quot; end if</p><p>on appIsRunning(appName) tell application &quot;System Events&quot; to (name of processes) contains appName end appIsRunning</p><p><hr></p><p>I saved these two scripts in a &ldquo;Scripts&rdquo; folder I created in my home directory (fancy that!).</p><p></p><h2>Step 3.</h2><p>Now all you have to do is give tell Proximity which script to run when and which bluetooth device you want it to look for. If Proximity is running you&rsquo;ll see a small (somewhat ugly) bluetooth lookin&rsquo; icon in your toolbar. Click it to open preferences. My preferences look like this:</p><p><img src=http://33.media.tumblr.com/tumblr_l6si3p8dYg1qzx3i9.png alt=\"proximity preferences\"></p><h2>Step 4.</h2><p>Tell <a href=http://twitter.com/HenrikJoreteg>@HenrikJoreteg</a> on twitter that it worked for you and that you&rsquo;d give him a high-five if you were within reasonable high-five range.</p>","preview":"<p>or not&quot; old_url: http://joreteg.com/post/918116737/magically-run-stuff-when-near-mac-or-not ...</p><h2>What you need</h2><p><ul><li>A Mac</li></ul></p><p><li>Some type of bluetooth device you always have with you (let&rsquo;s get real, if you&rsquo;ve got a mac you&rsquo;re using an iPhone)</li></p><h2>Step 1.</h2>"},{"slug":"twitter-is-useless-unless-you-want-your-dream-job","type":"text","date":"2010-06-01T04:05:48.000Z","title":"Twitter is useless! Unless you want to land your dream job.","old_url":"http://joreteg.com/post/652109637/twitter-is-useless-unless-you-want-your-dream-job","url":"/blog/twitter-is-useless-unless-you-want-your-dream-job","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/06/twitter-is-useless-unless-you-want-your-dream-job.html","markdown":"<p>I used to think twitter was useless. My take was something like: &ldquo;unless you&rsquo;re going to share it with me I don&rsquo;t care what you&rsquo;re having for lunch.&rdquo; Turns out that was a very limited perspective. When I took my first real developer job at <a href=\"http://esri.com\">ESRI</a> I met <a href=\"http://joshhighland.com\">Josh Highland</a> (<a href=\"http://twitter.com/joshhighland\">@joshhighland</a>). Josh is a special kind of crazy, and I mean that in a good way. He&rsquo;s a straight edge, christian, heavy-metal loving, pomade-selling, muy-thai fighting, iphone/web developer, nerd-meets-rockstar kind of guy. He&rsquo;s completely addicted to twitter and all things web. He&rsquo;s even <a href=\"http://twitterink.com\">promised to get a huge fail-whale tattoo when he gets to 20,000 followers</a>. I have him to thank for getting me into twitter again (I already had an account). But also, as a developer I whipped up a little python script on a cronjob that followed anyone who mentioned <a href=\"http://djangoproject.com\">django</a>. This was few years ago before everyone and their mother&rsquo;s developer (no that&rsquo;s not a typo) started using django. Before long I went from following 20 some peeps to about 500 developers. That&rsquo;s when the magic unicorns starting drinking from the celestial well of far-away galaxies.</p>\n\n<p>Fast forward a few months and the wife and I were in Palm Desert for a little weekend getaway. I&rsquo;m just chillin&rsquo; and reading twitter, ya know&hellip; like ya do, and I was unfollowing people that my script had followed who mainly seemed to ramble on about nonsense. If you follow my boss-turned-friend-who-I-can-therefore-make-fun-of <a href=\"http://twitter.com/adambrault\">@adambrault</a> on twitter you know that he totally fits into that category. His tweets are quite clever, but really random at times, especially if you don&rsquo;t know him. So I was finger-over the &lsquo;unfollow&rsquo; button in Tweetie and I noticed that he was in the Tri-cities Washington. Now, Holly and I were going to go up to Spokane just a few weeks after that and I had been asking around about potential job options in the Northwest. So rather than unfollowing, I DM'ed him and asked if he knew of anything and to my surprise, got quite coherent and friendly responses. After a few messages back and forth we decided to meet for lunch when I came up there.</p>\n\n<p>At the time, his company <a href=\"http://andyet.net\">&amp;yet</a> consisted of just him, Amy and Angela. We met for lunch had a good talk and I soon realized that this guy knew his stuff, was really sharp and had a strong vision for where he wanted to take his company. We didn&rsquo;t talk about employment or anything, but about a week later, I got a phone call from him asking if I had any interest in a job. It was a huge gamble for us to leave our friends and family, leave my job, despite the suddenly-willing-to-negotiate everything boss at ESRI. But a few months later we&rsquo;re happily getting settled in the TC.</p>\n\n<p>&amp;yet has turned into a strong team of 6 awesome developers and a &ldquo;team mom&rdquo;/admin Lisa in a sweet new custom office, rockin&rsquo; new iMacs and iPads working on amazing projects like this awesome still-in-progress app: <a href=\"http://recondynamics.com\">Recon Dynamics</a>. We&rsquo;re also releasing a <a href=\"http://frontdesk.im\">couple</a> <a href=\"http://bulletinapp.com\">projects</a> of our own. Turns out this &ldquo;huge gamble&rdquo; (according to my ESRI boss) of moving to the tri-cities was one of the best choices Holly and I have made in a long time.</p>\n\n<p>All because of twitter. You know, that worthless social tool for sharing pictures of breakfast:</p>\n\n<p><a href=\"http://i39.tinypic.com/24w7ed0.jpg\"><img src=\"http://33.media.tumblr.com/tumblr_l3bgv5l17g1qzx3i9.jpg\" alt=\"Is everyone in your time retarded\"/></a></p>\n\n<p>(I&rsquo;d give credit to where this came from, but I can&rsquo;t locate the original source, <a href=\"http://wanusmaximus.livejournal.com/1369696.html\">here&rsquo;s a place I saw it</a>).</p>","outputFile":"/blog/twitter-is-useless-unless-you-want-your-dream-job.html","html":"<p>I used to think twitter was useless. My take was something like: &ldquo;unless you&rsquo;re going to share it with me I don&rsquo;t care what you&rsquo;re having for lunch.&rdquo; Turns out that was a very limited perspective. When I took my first real developer job at <a href=http://esri.com>ESRI</a> I met <a href=http://joshhighland.com>Josh Highland</a> (<a href=http://twitter.com/joshhighland>@joshhighland</a>). Josh is a special kind of crazy, and I mean that in a good way. He&rsquo;s a straight edge, christian, heavy-metal loving, pomade-selling, muy-thai fighting, iphone/web developer, nerd-meets-rockstar kind of guy. He&rsquo;s completely addicted to twitter and all things web. He&rsquo;s even <a href=http://twitterink.com>promised to get a huge fail-whale tattoo when he gets to 20,000 followers</a>. I have him to thank for getting me into twitter again (I already had an account). But also, as a developer I whipped up a little python script on a cronjob that followed anyone who mentioned <a href=http://djangoproject.com>django</a>. This was few years ago before everyone and their mother&rsquo;s developer (no that&rsquo;s not a typo) started using django. Before long I went from following 20 some peeps to about 500 developers. That&rsquo;s when the magic unicorns starting drinking from the celestial well of far-away galaxies.</p><p>Fast forward a few months and the wife and I were in Palm Desert for a little weekend getaway. I&rsquo;m just chillin&rsquo; and reading twitter, ya know&hellip; like ya do, and I was unfollowing people that my script had followed who mainly seemed to ramble on about nonsense. If you follow my boss-turned-friend-who-I-can-therefore-make-fun-of <a href=http://twitter.com/adambrault>@adambrault</a> on twitter you know that he totally fits into that category. His tweets are quite clever, but really random at times, especially if you don&rsquo;t know him. So I was finger-over the &lsquo;unfollow&rsquo; button in Tweetie and I noticed that he was in the Tri-cities Washington. Now, Holly and I were going to go up to Spokane just a few weeks after that and I had been asking around about potential job options in the Northwest. So rather than unfollowing, I DM&#39;ed him and asked if he knew of anything and to my surprise, got quite coherent and friendly responses. After a few messages back and forth we decided to meet for lunch when I came up there.</p><p>At the time, his company <a href=http://andyet.net>&amp;yet</a> consisted of just him, Amy and Angela. We met for lunch had a good talk and I soon realized that this guy knew his stuff, was really sharp and had a strong vision for where he wanted to take his company. We didn&rsquo;t talk about employment or anything, but about a week later, I got a phone call from him asking if I had any interest in a job. It was a huge gamble for us to leave our friends and family, leave my job, despite the suddenly-willing-to-negotiate everything boss at ESRI. But a few months later we&rsquo;re happily getting settled in the TC.</p><p>&amp;yet has turned into a strong team of 6 awesome developers and a &ldquo;team mom&rdquo;/admin Lisa in a sweet new custom office, rockin&rsquo; new iMacs and iPads working on amazing projects like this awesome still-in-progress app: <a href=http://recondynamics.com>Recon Dynamics</a>. We&rsquo;re also releasing a <a href=http://frontdesk.im>couple</a> <a href=http://bulletinapp.com>projects</a> of our own. Turns out this &ldquo;huge gamble&rdquo; (according to my ESRI boss) of moving to the tri-cities was one of the best choices Holly and I have made in a long time.</p><p>All because of twitter. You know, that worthless social tool for sharing pictures of breakfast:</p><p><a href=http://i39.tinypic.com/24w7ed0.jpg><img src=http://33.media.tumblr.com/tumblr_l3bgv5l17g1qzx3i9.jpg alt=\"Is everyone in your time retarded\"></a></p><p>(I&rsquo;d give credit to where this came from, but I can&rsquo;t locate the original source, <a href=http://wanusmaximus.livejournal.com/1369696.html>here&rsquo;s a place I saw it</a>).</p>","preview":"<p>I used to think twitter was useless. My take was something like: &ldquo;unless you&rsquo;re going to share it with me I don&rsquo;t care what you&rsquo;re having for lunch.&rdquo; Turns out that was a very limited perspective. When I took my first real developer job at <a href=http://esri.com>ESRI</a> I met <a href=http://joshhighland.com>Josh Highland</a> (<a href=http://twitter.com/joshhighland>@joshhighland</a>). Josh is a special kind of crazy, and I mean that in a good way. He&rsquo;s a straight edge, christian, heavy-metal loving, pomade-selling, muy-thai fighting, iphone/web developer, nerd-meets-rockstar kind of guy. He&rsquo;s completely addicted to twitter and all things web. He&rsquo;s even <a href=http://twitterink.com>promised to get a huge fail-whale tattoo when he gets to 20,000 followers</a>. I have him to thank for getting me into twitter again (I already had an account). But also, as a developer I whipped up a little python script on a cronjob that followed anyone who mentioned <a href=http://djangoproject.com>django</a>. This was few years ago before everyone and their mother&rsquo;s developer (no that&rsquo;s not a typo) started using django. Before long I went from following 20 some peeps to about 500 developers. That&rsquo;s when the magic unicorns starting drinking from the celestial well of far-away galaxies.</p>"},{"slug":"on-happiness-experiencing-flow","type":"text","date":"2010-04-06T03:42:31.000Z","title":"On Happiness. My reactions to reading \"Flow.\"","old_url":"http://joreteg.com/post/499752301/on-happiness-experiencing-flow","url":"/blog/on-happiness-experiencing-flow","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/04/on-happiness-experiencing-flow.html","markdown":"<p>I&rsquo;ve read a lot of books about improving yourself and improving your life. These books tend to focus on how to change your circumstances to be more in-line with how you want your life to be. This book was quite different. It&rsquo;s not about becoming healthier and wealthier. It focuses on learning how to control your attention and your attitude in such a way as to more thoroughly enjoy yourself in everyday activities.</p>\n\n<p><a href=\"http://www.amazon.com/gp/product/0061339202?ie=UTF8&amp;tag=h084-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0061339202\"><img src=\"http://ecx.images-amazon.com/images/I/41LDXwmSGNL._SL500_AA300_.jpg\"/></a></p>\n\n<p><a href=\"http://www.amazon.com/gp/product/0061339202?ie=UTF8&amp;tag=h084-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0061339202\">Flow: The Psychology of Optimal Experience (P.S.)</a> by Mihaly Csikszentmihalyi (No, I have no clue how to pronounce that either).</p>\n\n<p>In the past, I&rsquo;ve fallen victim to the mentality that happiness is, by and large, something that is dependent on your circumstances. Our consumerist society instills in us a strong belief that if we were wealthy and had infinite time for for leisure, we&rsquo;d be happy.</p>\n\n<p>In reality, that&rsquo;s not the case. People with all the time and money in the world are often times no happier than a bum on the streets (if you don&rsquo;t believe that, read the book). I&rsquo;ll confess, I&rsquo;ve bought into that false belief. I already knew that money doesn&rsquo;t by happiness, but whenever someone stated that cliché that I would always say: &ldquo;True, money doesn&rsquo;t buy happiness, but neither does poverty.&rdquo; Of course, by that I meant that it&rsquo;s better to be wealthy than to be poor.</p>\n\n<p>After reading this book I&rsquo;ve realized that I was in some ways totally right by saying &ldquo;neither does poverty.&rdquo; Neither wealth <em>nor</em> poverty can buy happiness. In fact, happiness is not very closely tied to money or circumstances at all. By pointing out empirical evidence in my own life, as well as lots of supporting studies is that my attitude is what ultimately determines my happiness. The good news in that is that attitude and attention is something that <em>we can actually learn to control</em>. This concept was quite eye-opening for me.</p>\n\n<p>As a quick explanation, &ldquo;Flow&rdquo; is the optimal experience where you&rsquo;re engrossed in what you&rsquo;re doing. When you&rsquo;re in a state of flow, time seems to fly and you&rsquo;re not distracted by other thoughts or concerns. We&rsquo;ve all experienced it at some point. It&rsquo;s essentially the reason <a href=\"http://vimeo.com/3339573\">I loved to ski</a> so much. It&rsquo;s a state where you&rsquo;re challenging yourself, pushing your boundaries and enjoying increasingly complex experiences. Certain activities such as sports are inherently more conducive to producing &ldquo;flow&rdquo; experiences. However, the book goes on to explain how to turn everyday life into &ldquo;flow experiences.&rdquo;</p>\n\n<p>I&rsquo;m not doing the concept justice, the book explains it much better than I do. Be warned: at times, the book is kinda dry and dull, and in my opinion it&rsquo;s a bit too academic. I think the book could have been condensed to half its length and been better for it.</p>\n\n<p>Also, be aware that the author tends to explain religion and God as merely having been invented as a means of experiencing &ldquo;flow.&rdquo; In fact, the book gets a bit odd in the last chapter, because he argues that we should essentially embrace science and our ongoing evolution as our &ldquo;religion.&rdquo; As a Christian, I don&rsquo;t agree, but that doesn&rsquo;t take away from the many great points and recommendations the author makes in the rest of the book. Despite it&rsquo;s shortcomings, this is a book that has already changed how I approach my life. I definitely think I&rsquo;ll be better and happier for it. I highly recommend it.</p>","outputFile":"/blog/on-happiness-experiencing-flow.html","html":"<p>I&rsquo;ve read a lot of books about improving yourself and improving your life. These books tend to focus on how to change your circumstances to be more in-line with how you want your life to be. This book was quite different. It&rsquo;s not about becoming healthier and wealthier. It focuses on learning how to control your attention and your attitude in such a way as to more thoroughly enjoy yourself in everyday activities.</p><p><a href=\"http://www.amazon.com/gp/product/0061339202?ie=UTF8&amp;tag=h084-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0061339202\"><img src=http://ecx.images-amazon.com/images/I/41LDXwmSGNL._SL500_AA300_.jpg></a></p><p><a href=\"http://www.amazon.com/gp/product/0061339202?ie=UTF8&amp;tag=h084-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0061339202\">Flow: The Psychology of Optimal Experience (P.S.)</a> by Mihaly Csikszentmihalyi (No, I have no clue how to pronounce that either).</p><p>In the past, I&rsquo;ve fallen victim to the mentality that happiness is, by and large, something that is dependent on your circumstances. Our consumerist society instills in us a strong belief that if we were wealthy and had infinite time for for leisure, we&rsquo;d be happy.</p><p>In reality, that&rsquo;s not the case. People with all the time and money in the world are often times no happier than a bum on the streets (if you don&rsquo;t believe that, read the book). I&rsquo;ll confess, I&rsquo;ve bought into that false belief. I already knew that money doesn&rsquo;t by happiness, but whenever someone stated that cliché that I would always say: &ldquo;True, money doesn&rsquo;t buy happiness, but neither does poverty.&rdquo; Of course, by that I meant that it&rsquo;s better to be wealthy than to be poor.</p><p>After reading this book I&rsquo;ve realized that I was in some ways totally right by saying &ldquo;neither does poverty.&rdquo; Neither wealth <em>nor</em> poverty can buy happiness. In fact, happiness is not very closely tied to money or circumstances at all. By pointing out empirical evidence in my own life, as well as lots of supporting studies is that my attitude is what ultimately determines my happiness. The good news in that is that attitude and attention is something that <em>we can actually learn to control</em>. This concept was quite eye-opening for me.</p><p>As a quick explanation, &ldquo;Flow&rdquo; is the optimal experience where you&rsquo;re engrossed in what you&rsquo;re doing. When you&rsquo;re in a state of flow, time seems to fly and you&rsquo;re not distracted by other thoughts or concerns. We&rsquo;ve all experienced it at some point. It&rsquo;s essentially the reason <a href=http://vimeo.com/3339573>I loved to ski</a> so much. It&rsquo;s a state where you&rsquo;re challenging yourself, pushing your boundaries and enjoying increasingly complex experiences. Certain activities such as sports are inherently more conducive to producing &ldquo;flow&rdquo; experiences. However, the book goes on to explain how to turn everyday life into &ldquo;flow experiences.&rdquo;</p><p>I&rsquo;m not doing the concept justice, the book explains it much better than I do. Be warned: at times, the book is kinda dry and dull, and in my opinion it&rsquo;s a bit too academic. I think the book could have been condensed to half its length and been better for it.</p><p>Also, be aware that the author tends to explain religion and God as merely having been invented as a means of experiencing &ldquo;flow.&rdquo; In fact, the book gets a bit odd in the last chapter, because he argues that we should essentially embrace science and our ongoing evolution as our &ldquo;religion.&rdquo; As a Christian, I don&rsquo;t agree, but that doesn&rsquo;t take away from the many great points and recommendations the author makes in the rest of the book. Despite it&rsquo;s shortcomings, this is a book that has already changed how I approach my life. I definitely think I&rsquo;ll be better and happier for it. I highly recommend it.</p>","preview":"<p>I&rsquo;ve read a lot of books about improving yourself and improving your life. These books tend to focus on how to change your circumstances to be more in-line with how you want your life to be. This book was quite different. It&rsquo;s not about becoming healthier and wealthier. It focuses on learning how to control your attention and your attitude in such a way as to more thoroughly enjoy yourself in everyday activities.</p>"},{"slug":"real-measure-of-wealth","type":"quote","date":"2010-03-30T17:05:35.000Z","old_url":"http://joreteg.com/post/484538937/real-measure-of-wealth","title":"The real measure of your wealth","url":"/blog/real-measure-of-wealth","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/03/real-measure-of-wealth.html","markdown":"<blockquote>The real measure of your wealth is how much you&rsquo;d be worth if you lost all your money.</blockquote>\nUnknown, but definitely someone very wise.","outputFile":"/blog/real-measure-of-wealth.html","html":"<p><blockquote>The real measure of your wealth is how much you&rsquo;d be worth if you lost all your money.</blockquote>Unknown, but definitely someone very wise.</p>","preview":"<p><blockquote>The real measure of your wealth is how much you&rsquo;d be worth if you lost all your money.</blockquote>Unknown, but definitely someone very wise.</p>"},{"slug":"buzz-feedback-comments-pushing-items-to-the-top","type":"text","date":"2010-02-12T05:48:26.000Z","title":"My Buzz Feedback","old_url":"http://joreteg.com/post/385053515/buzz-feedback-comments-pushing-items-to-the-top","url":"/blog/buzz-feedback-comments-pushing-items-to-the-top","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/02/buzz-feedback-comments-pushing-items-to-the-top.html","markdown":"<p>I just <a href=\"http://mail.google.com/support/bin/request.py?contact_type=buzz\">submitted feedback</a> to Google regarding Buzz. Here&rsquo;s what I said, if you agree, please do the same:</p>\n\n<blockquote>\n  <p>I&rsquo;m a fan of Buzz so far. One request though:</p>\n  \n  <p>If I follow a user with a lot of followers such as Seesmic founder Loic Lemur, they will inevitably get tons of comments on their posts. I don&rsquo;t want them at the top of my list just because anybody has commented on their post. I just end up seeing the same Buzz post over and over again at the top. That&rsquo;s too much noise and is not helpful.</p>\n  \n  <p>I don&rsquo;t think they should end up at the top of the list unless I&rsquo;m part of the comment stream. Until that changes it will be hard for Buzz to replace Twitter for me.</p>\n</blockquote>\n\n<p>I also included this screenshot. I really don&rsquo;t care about 62 people saying hi to Loic. No reason to put it at the top. Sorry Google, please change this!</p>\n\n<p><img src=\"http://33.media.tumblr.com/tumblr_kxprv1aScL1qzx3i9.png\" alt=\"Buzz screenshot\"/></p>","outputFile":"/blog/buzz-feedback-comments-pushing-items-to-the-top.html","html":"<p>I just <a href=\"http://mail.google.com/support/bin/request.py?contact_type=buzz\">submitted feedback</a> to Google regarding Buzz. Here&rsquo;s what I said, if you agree, please do the same:</p><blockquote><p>I&rsquo;m a fan of Buzz so far. One request though:</p><p>If I follow a user with a lot of followers such as Seesmic founder Loic Lemur, they will inevitably get tons of comments on their posts. I don&rsquo;t want them at the top of my list just because anybody has commented on their post. I just end up seeing the same Buzz post over and over again at the top. That&rsquo;s too much noise and is not helpful.</p><p>I don&rsquo;t think they should end up at the top of the list unless I&rsquo;m part of the comment stream. Until that changes it will be hard for Buzz to replace Twitter for me.</p></blockquote><p>I also included this screenshot. I really don&rsquo;t care about 62 people saying hi to Loic. No reason to put it at the top. Sorry Google, please change this!</p><p><img src=http://33.media.tumblr.com/tumblr_kxprv1aScL1qzx3i9.png alt=\"Buzz screenshot\"></p>","preview":"<p>I just <a href=\"http://mail.google.com/support/bin/request.py?contact_type=buzz\">submitted feedback</a> to Google regarding Buzz. Here&rsquo;s what I said, if you agree, please do the same:</p><blockquote><p>I&rsquo;m a fan of Buzz so far. One request though:</p><p>If I follow a user with a lot of followers such as Seesmic founder Loic Lemur, they will inevitably get tons of comments on their posts. I don&rsquo;t want them at the top of my list just because anybody has commented on their post. I just end up seeing the same Buzz post over and over again at the top. That&rsquo;s too much noise and is not helpful.</p>"},{"slug":"google-chart-api-simple-demo","type":"text","date":"2010-02-12T04:32:31.000Z","title":"Google chart API simple and sweet","old_url":"http://joreteg.com/post/384943935/google-chart-api-simple-demo","url":"/blog/google-chart-api-simple-demo","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/02/google-chart-api-simple-demo.html","markdown":"<p>So, in my humble opinion Google&rsquo;s chart api is genius. I know some of this has been around for a while. But I&rsquo;ve never really looked at it till now.</p>\n\n<p>You just pass in paramaters and Google draws and serves up your charts super fast. In it&rsquo;s most basic form, all you gotta do is put the paramaters in your image tag.</p>\n\n<p>Here&rsquo;s a couple of simple examples:</p>\n\n<pre><code>&lt;img src=\"http://chart.apis.google.com/chart?chs=250x100\n&amp;chd=t:60,20,20&amp;cht=p3&amp;chl=Pure|Genius|Yo\"/&gt;\n</code></pre>\n\n<p><img src=\"http://chart.apis.google.com/chart?chs=250x100&amp;chd=t:60,20,20&amp;cht=p3&amp;chl=Pure%7CGenius%7CYo\" alt=\"Awesome Chart API\"/></p>\n\n<pre><code>&lt;img src=\"http://chart.apis.google.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD\n&amp;chd=t:10,50,60,80,40|50,60,100,40,20&amp;chds=0,160&amp;chs=200\"/&gt;\n</code></pre>\n\n<p><img src=\"http://chart.apis.google.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:10,50,60,80,40%7C50,60,100,40,20&amp;chds=0,160&amp;chs=200\" alt=\"Another awesome chart\"/></p>\n\n<p>There&rsquo;s a lot more too it. Just read <a href=\"http://code.google.com/apis/chart/docs/making_charts.html\">the chart docs API</a>.</p>","outputFile":"/blog/google-chart-api-simple-demo.html","html":"<p>So, in my humble opinion Google&rsquo;s chart api is genius. I know some of this has been around for a while. But I&rsquo;ve never really looked at it till now.</p><p>You just pass in paramaters and Google draws and serves up your charts super fast. In it&rsquo;s most basic form, all you gotta do is put the paramaters in your image tag.</p><p>Here&rsquo;s a couple of simple examples:</p><pre><code>&lt;img src=\"http://chart.apis.google.com/chart?chs=250x100\n&amp;chd=t:60,20,20&amp;cht=p3&amp;chl=Pure|Genius|Yo\"/&gt;\n</code></pre><p><img src=\"http://chart.apis.google.com/chart?chs=250x100&amp;chd=t:60,20,20&amp;cht=p3&amp;chl=Pure%7CGenius%7CYo\" alt=\"Awesome Chart API\"></p><pre><code>&lt;img src=\"http://chart.apis.google.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD\n&amp;chd=t:10,50,60,80,40|50,60,100,40,20&amp;chds=0,160&amp;chs=200\"/&gt;\n</code></pre><p><img src=\"http://chart.apis.google.com/chart?cht=bvs&amp;chco=4D89F9,C6D9FD&amp;chd=t:10,50,60,80,40%7C50,60,100,40,20&amp;chds=0,160&amp;chs=200\" alt=\"Another awesome chart\"></p><p>There&rsquo;s a lot more too it. Just read <a href=http://code.google.com/apis/chart/docs/making_charts.html>the chart docs API</a>.</p>","preview":"<p>So, in my humble opinion Google&rsquo;s chart api is genius. I know some of this has been around for a while. But I&rsquo;ve never really looked at it till now.</p><p>You just pass in paramaters and Google draws and serves up your charts super fast. In it&rsquo;s most basic form, all you gotta do is put the paramaters in your image tag.</p>"},{"slug":"mobile-web-development-iphone-not-everything","type":"quote","date":"2010-02-11T23:48:53.000Z","old_url":"http://joreteg.com/post/384510452/mobile-web-development-iphone-not-everything","title":"PPK on iPhone and mobile web testing","url":"/blog/mobile-web-development-iphone-not-everything","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/02/mobile-web-development-iphone-not-everything.html","markdown":"<blockquote><p>We web developers are doing an amazingly lousy job right now. We have to start serious mobile testing instead of just playing around with our iPhone for a few minutes before declaring our site fit for mobile.</p>\n\n<p>Supporting all browsers is the whole f*ing point of being a good web developer, and I’m going to force you to do it even if I have to personally swear at each of you individually.</p></blockquote>\n<p>This is from an article on QuirksMode about how we developers are treating the iPhone web browser much like IE6 when it first came out. We can&rsquo;t treat it like it&rsquo;s the only compatibility check necessary. It&rsquo;s something I&rsquo;m personally a bit guilty of. Let&rsquo;s not go down that road again, the web is open by nature. Let&rsquo;s not pigeonhole ourselves by overly emphasizing one browser.</p>\n\n<p>The full article is here (lots of less-than-clean language, but he&rsquo;s making a solid point): <a href=\"http://www.quirksmode.org/blog/archives/2010/02/the_iphone_obse.html\">http://www.quirksmode.org/blog/archives/2010/02/the_iphone_obse.html</a></p>","outputFile":"/blog/mobile-web-development-iphone-not-everything.html","html":"<p><blockquote><p>We web developers are doing an amazingly lousy job right now. We have to start serious mobile testing instead of just playing around with our iPhone for a few minutes before declaring our site fit for mobile.</p></blockquote></p><p>Supporting all browsers is the whole f*ing point of being a good web developer, and I’m going to force you to do it even if I have to personally swear at each of you individually.</p><p>This is from an article on QuirksMode about how we developers are treating the iPhone web browser much like IE6 when it first came out. We can&rsquo;t treat it like it&rsquo;s the only compatibility check necessary. It&rsquo;s something I&rsquo;m personally a bit guilty of. Let&rsquo;s not go down that road again, the web is open by nature. Let&rsquo;s not pigeonhole ourselves by overly emphasizing one browser.</p><p>The full article is here (lots of less-than-clean language, but he&rsquo;s making a solid point): <a href=http://www.quirksmode.org/blog/archives/2010/02/the_iphone_obse.html>http://www.quirksmode.org/blog/archives/2010/02/the_iphone_obse.html</a></p>","preview":"<p><blockquote><p>We web developers are doing an amazingly lousy job right now. We have to start serious mobile testing instead of just playing around with our iPhone for a few minutes before declaring our site fit for mobile.</p></blockquote></p><p>Supporting all browsers is the whole f*ing point of being a good web developer, and I’m going to force you to do it even if I have to personally swear at each of you individually.</p>"},{"slug":"google-voice-iphone-make-web-app-capable","type":"text","date":"2010-01-26T17:07:28.000Z","title":"Dear Google, please add the web-app meta tag to mobile apps","old_url":"http://joreteg.com/post/354577145/google-voice-iphone-make-web-app-capable","url":"/blog/google-voice-iphone-make-web-app-capable","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/01/google-voice-iphone-make-web-app-capable.html","markdown":"<p>Google just built a sweet mobile version of Google voice for iPhone.</p>\n\n<p><img src=\"http://farm5.static.flickr.com/4037/4306290489_a536686527_o.png\" alt=\"Google Voice Mobile WebApp\"/></p>\n\n<p>I have but one complaint about all the awesome HTML5 mobile webapps that Google has been releasing lately.</p>\n\n<p><em>They open in Safari on my iPhone</em></p>\n\n<p>That means that each time I want to access it even if I save a shortcut to my homescreen on the iPhone it opens in a new window in Safari. This gets annoying in a hurry and actually stops me from using the other mobile web apps like Gmail from my phone (I use the built in mail program instead).</p>\n\n<p>The silly thing is <em>this is sooooo easy to fix</em>!</p>\n\n<p>All they would have to do is add the following meta tag to their mobile apps:</p>\n\n<pre><code>&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt;\n</code></pre>\n\n<p>Problem solved, now if I saved it to my homescreen it would open as if it were a stand-alone application. Why Google, why?</p>\n\n<p>There must be a reason, but it makes no sense to me.</p>","outputFile":"/blog/google-voice-iphone-make-web-app-capable.html","html":"<p>Google just built a sweet mobile version of Google voice for iPhone.</p><p><img src=http://farm5.static.flickr.com/4037/4306290489_a536686527_o.png alt=\"Google Voice Mobile WebApp\"></p><p>I have but one complaint about all the awesome HTML5 mobile webapps that Google has been releasing lately.</p><p><em>They open in Safari on my iPhone</em></p><p>That means that each time I want to access it even if I save a shortcut to my homescreen on the iPhone it opens in a new window in Safari. This gets annoying in a hurry and actually stops me from using the other mobile web apps like Gmail from my phone (I use the built in mail program instead).</p><p>The silly thing is <em>this is sooooo easy to fix</em>!</p><p>All they would have to do is add the following meta tag to their mobile apps:</p><pre><code>&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt;\n</code></pre><p>Problem solved, now if I saved it to my homescreen it would open as if it were a stand-alone application. Why Google, why?</p><p>There must be a reason, but it makes no sense to me.</p>","preview":"<p>Google just built a sweet mobile version of Google voice for iPhone.</p><p><img src=http://farm5.static.flickr.com/4037/4306290489_a536686527_o.png alt=\"Google Voice Mobile WebApp\"></p><p>I have but one complaint about all the awesome HTML5 mobile webapps that Google has been releasing lately.</p>"},{"slug":"awesome-stop-motion-book-video","type":"text","date":"2010-01-25T04:54:59.000Z","title":"Awesome stop-motion video","old_url":"http://joreteg.com/post/352044220/awesome-stop-motion-book-video","url":"/blog/awesome-stop-motion-book-video","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/01/awesome-stop-motion-book-video.html","markdown":"<p>I was really blown away by the creativity of this video. Very cool.</p>\n\n<p><object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/F_jyXJTlrH0&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1\"><param name=\"allowFullScreen\" value=\"true\"><param name=\"allowScriptAccess\" value=\"always\"><embed src=\"http://www.youtube.com/v/F_jyXJTlrH0&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\"425\" height=\"344\"></embed></object></p>","outputFile":"/blog/awesome-stop-motion-book-video.html","html":"<p>I was really blown away by the creativity of this video. Very cool.</p><p><object width=425 height=344><param name=movie value=\"http://www.youtube.com/v/F_jyXJTlrH0&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1\"><param name=allowFullScreen value=true><param name=allowScriptAccess value=always><embed src=\"http://www.youtube.com/v/F_jyXJTlrH0&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1\" type=application/x-shockwave-flash allowfullscreen=true allowscriptaccess=always width=425 height=344></object></p>","preview":"<p>I was really blown away by the creativity of this video. Very cool.</p><p><object width=425 height=344><param name=movie value=\"http://www.youtube.com/v/F_jyXJTlrH0&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1\"><param name=allowFullScreen value=true><param name=allowScriptAccess value=always><embed src=\"http://www.youtube.com/v/F_jyXJTlrH0&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1\" type=application/x-shockwave-flash allowfullscreen=true allowscriptaccess=always width=425 height=344></object></p>"},{"slug":"new-years-resolutions-2010","type":"text","date":"2010-01-11T16:11:37.000Z","title":"New Years Resolutions","old_url":"http://joreteg.com/post/328901284/new-years-resolutions-2010","url":"/blog/new-years-resolutions-2010","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2010/01/new-years-resolutions-2010.html","markdown":"<p>Definitely a bit late, but nonetheless, here&rsquo;s a few resolutions for 2010</p>\n\n<ul><li>Get 100 churches signed up for my new <a href=\"http://BulletinApp.com\">BulletinApp.com</a> service.</li>\n<li>Make 50% of my household income from passive (or at least semi-passive) sources. </li>\n<li>Do 100 pushups in a row.</li>\n<li>Learn how to hold a hand-stand for more than 1 minute.</li>\n<li>Take my home office as close to paperless as possible. (<a href=\"http://evernote.com\">Evernote</a> rocks!)</li>\n<li>Buy a house.</li>\n</ul><p>It&rsquo;s a start&hellip; I may add to this list, but I&rsquo;m not gonna take anything off!</p>","outputFile":"/blog/new-years-resolutions-2010.html","html":"<p>Definitely a bit late, but nonetheless, here&rsquo;s a few resolutions for 2010</p><p><ul><li>Get 100 churches signed up for my new <a href=http://BulletinApp.com>BulletinApp.com</a> service.</li></ul></p><p><li>Make 50% of my household income from passive (or at least semi-passive) sources.</li></p><p><li>Do 100 pushups in a row.</li></p><p><li>Learn how to hold a hand-stand for more than 1 minute.</li></p><p><li>Take my home office as close to paperless as possible. (<a href=http://evernote.com>Evernote</a> rocks!)</li></p><p><li>Buy a house.</li></p><p>It&rsquo;s a start&hellip; I may add to this list, but I&rsquo;m not gonna take anything off!</p><p></p>","preview":"<p>Definitely a bit late, but nonetheless, here&rsquo;s a few resolutions for 2010</p><p><ul><li>Get 100 churches signed up for my new <a href=http://BulletinApp.com>BulletinApp.com</a> service.</li></ul></p><p><li>Make 50% of my household income from passive (or at least semi-passive) sources.</li></p>"},{"slug":"webapp-for-building-iphone-apps","type":"text","date":"2009-12-18T07:49:00.000Z","title":"A Webapp for Building iPhone Apps","old_url":"http://joreteg.com/post/288671745/webapp-for-building-iphone-apps","url":"/blog/webapp-for-building-iphone-apps","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/12/webapp-for-building-iphone-apps.html","markdown":"<p>Normally having a custom iPhone or Android app is something that is out of reach for smaller organizations. Also, as you may have heard the Apple&rsquo;s app approval process is quite a headache. Several of my friends and co-workers have written iPhone apps and the truth is, that it&rsquo;s a very real possibility that your app won&rsquo;t be accepted and all your work will have been wasted.</p>\n\n<p>When I saw David Kaneda&rsquo;s amazing <a href=\"http://www.jqtouch.com\">jQTouch</a> project, it made me realize that you could actually build &ldquo;navtive-feeling&rdquo; applications using nothing but HTML, CSS, and JavaScript. So I started playing with it.</p>\n\n<p>But the beauty of the web, is that it&rsquo;s dynamic. That&rsquo;s when I had a bit of an epiphany: <strong>I realized that it&rsquo;s possible to build tools that will let people build their own custom iPhone app and completely circumvent the App Store</strong>. Check out this little demo that I built. It&rsquo;s still needs a bunch of styling and other work but I thought it was interesting nonetheless.</p>\n\n<p>I&rsquo;d recommend watching the HD version just to see things more clearly.</p>\n\n<p><object width=\"501\" height=\"313\"><param name=\"allowfullscreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><param name=\"movie\" value=\"http://vimeo.com/moogaloop.swf?clip_id=8254856&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\"><embed src=\"http://vimeo.com/moogaloop.swf?clip_id=8254856&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\"501\" height=\"313\"></embed></object></p>\n\n<p><a href=\"http://vimeo.com/8254856\">A Webapp for Building an iPhone Apps</a> from <a href=\"http://vimeo.com/henrikjoreteg\">Henrik Joreteg</a> on <a href=\"http://vimeo.com\">Vimeo</a>.</p>\n\n<p>Let me know what you think.</p>","outputFile":"/blog/webapp-for-building-iphone-apps.html","html":"<p>Normally having a custom iPhone or Android app is something that is out of reach for smaller organizations. Also, as you may have heard the Apple&rsquo;s app approval process is quite a headache. Several of my friends and co-workers have written iPhone apps and the truth is, that it&rsquo;s a very real possibility that your app won&rsquo;t be accepted and all your work will have been wasted.</p><p>When I saw David Kaneda&rsquo;s amazing <a href=http://www.jqtouch.com>jQTouch</a> project, it made me realize that you could actually build &ldquo;navtive-feeling&rdquo; applications using nothing but HTML, CSS, and JavaScript. So I started playing with it.</p><p>But the beauty of the web, is that it&rsquo;s dynamic. That&rsquo;s when I had a bit of an epiphany: <strong>I realized that it&rsquo;s possible to build tools that will let people build their own custom iPhone app and completely circumvent the App Store</strong>. Check out this little demo that I built. It&rsquo;s still needs a bunch of styling and other work but I thought it was interesting nonetheless.</p><p>I&rsquo;d recommend watching the HD version just to see things more clearly.</p><p><object width=501 height=313><param name=allowfullscreen value=true><param name=allowscriptaccess value=always><param name=movie value=\"http://vimeo.com/moogaloop.swf?clip_id=8254856&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\"><embed src=\"http://vimeo.com/moogaloop.swf?clip_id=8254856&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=00ADEF&amp;fullscreen=1\" type=application/x-shockwave-flash allowfullscreen=true allowscriptaccess=always width=501 height=313></object></p><p><a href=http://vimeo.com/8254856>A Webapp for Building an iPhone Apps</a> from <a href=http://vimeo.com/henrikjoreteg>Henrik Joreteg</a> on <a href=http://vimeo.com>Vimeo</a>.</p><p>Let me know what you think.</p>","preview":"<p>Normally having a custom iPhone or Android app is something that is out of reach for smaller organizations. Also, as you may have heard the Apple&rsquo;s app approval process is quite a headache. Several of my friends and co-workers have written iPhone apps and the truth is, that it&rsquo;s a very real possibility that your app won&rsquo;t be accepted and all your work will have been wasted.</p>"},{"slug":"guido-van-rossum-development-philosophy","type":"quote","date":"2009-12-02T04:04:54.000Z","old_url":"http://joreteg.com/post/265793207/guido-van-rossum-development-philosophy","title":"Guido Van Rossum on development philosophy and speed","url":"/blog/guido-van-rossum-development-philosophy","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/12/guido-van-rossum-development-philosophy.html","markdown":"<blockquote>We have results when we have them&hellip;we don&rsquo;t set a date and then say we have to release this feature by a certain date and then suddenly the team has to pull several all-nighters and the quality of the feature is compromised. We don&rsquo;t like to work that way. It&rsquo;s too important to get things right.</blockquote>\nGuido van Rossum, inventor of Python","outputFile":"/blog/guido-van-rossum-development-philosophy.html","html":"<p><blockquote>We have results when we have them&hellip;we don&rsquo;t set a date and then say we have to release this feature by a certain date and then suddenly the team has to pull several all-nighters and the quality of the feature is compromised. We don&rsquo;t like to work that way. It&rsquo;s too important to get things right.</blockquote>Guido van Rossum, inventor of Python</p>","preview":"<p><blockquote>We have results when we have them&hellip;we don&rsquo;t set a date and then say we have to release this feature by a certain date and then suddenly the team has to pull several all-nighters and the quality of the feature is compromised. We don&rsquo;t like to work that way. It&rsquo;s too important to get things right.</blockquote>Guido van Rossum, inventor of Python</p>"},{"slug":"when-forced-to-work-in-xp","type":"text","date":"2009-11-23T16:34:00.000Z","title":"Must have changes for when forced to work in XP","old_url":"http://joreteg.com/post/254468098/when-forced-to-work-in-xp","url":"/blog/when-forced-to-work-in-xp","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/when-forced-to-work-in-xp.html","markdown":"<p>This post is different than most of my posts in that there&rsquo;s nothing cool or sexy about it. It&rsquo;s about comfort while dealing with having to work with an old windows system.</p>\n\n<p>I have been living in Mac land for so long, that I didn&rsquo;t even realize that some of these changes were possible. I just chalked it up to Microsoft&rsquo;s way of punishing the people that use their systems.</p>\n\n<p>God bless lifehacker for <a href=\"http://lifehacker.com/149003/avoid-computer-eye-strain\">their write-up of this</a>, you <em>can</em> fix some of the annoyances of windows to reduce eye strain and avoid staring at ugly pixelated text.</p>\n\n<p><strong>First</strong>: Turn on Clear Type: Go to Display -&gt; Appearance -&gt; Effects and make sure you check the &ldquo;Use the following method to smooth edges of screen fonts&rdquo; and set it to &ldquo;ClearType&rdquo;</p>\n\n<p><img src=\"http://38.media.tumblr.com/tumblr_ktklft4gJq1qzx3i9.jpg\" alt=\"screenshot of clear-type setting in XP\"/></p>\n\n<p><strong>Second</strong>: Crank up the refresh rate on your monitor: Go to Display -&gt; Settings -&gt; Advanced, then look for a setting for the screen refresh rate. Mine looked as follows, it was set on 60hz i put it on 75, which was the highest it would go. These two changes will reduce eye strain&hellip; highly recommended if you spend a lot of time staring at an XP system.\n<img src=\"http://33.media.tumblr.com/tumblr_ktklujQzbN1qzx3i9.jpg\" alt=\"\"/></p>","outputFile":"/blog/when-forced-to-work-in-xp.html","html":"<p>This post is different than most of my posts in that there&rsquo;s nothing cool or sexy about it. It&rsquo;s about comfort while dealing with having to work with an old windows system.</p><p>I have been living in Mac land for so long, that I didn&rsquo;t even realize that some of these changes were possible. I just chalked it up to Microsoft&rsquo;s way of punishing the people that use their systems.</p><p>God bless lifehacker for <a href=http://lifehacker.com/149003/avoid-computer-eye-strain>their write-up of this</a>, you <em>can</em> fix some of the annoyances of windows to reduce eye strain and avoid staring at ugly pixelated text.</p><p><strong>First</strong>: Turn on Clear Type: Go to Display -&gt; Appearance -&gt; Effects and make sure you check the &ldquo;Use the following method to smooth edges of screen fonts&rdquo; and set it to &ldquo;ClearType&rdquo;</p><p><img src=http://38.media.tumblr.com/tumblr_ktklft4gJq1qzx3i9.jpg alt=\"screenshot of clear-type setting in XP\"></p><p><strong>Second</strong>: Crank up the refresh rate on your monitor: Go to Display -&gt; Settings -&gt; Advanced, then look for a setting for the screen refresh rate. Mine looked as follows, it was set on 60hz i put it on 75, which was the highest it would go. These two changes will reduce eye strain&hellip; highly recommended if you spend a lot of time staring at an XP system. <img src=http://33.media.tumblr.com/tumblr_ktklujQzbN1qzx3i9.jpg></p>","preview":"<p>This post is different than most of my posts in that there&rsquo;s nothing cool or sexy about it. It&rsquo;s about comfort while dealing with having to work with an old windows system.</p><p>I have been living in Mac land for so long, that I didn&rsquo;t even realize that some of these changes were possible. I just chalked it up to Microsoft&rsquo;s way of punishing the people that use their systems.</p>"},{"slug":"espress-for-mac-sweetness","type":"text","date":"2009-11-21T20:09:55.000Z","title":"Impressed with MacRabbit's Espresso editor","old_url":"http://joreteg.com/post/252182405/espress-for-mac-sweetness","url":"/blog/espress-for-mac-sweetness","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/espress-for-mac-sweetness.html","markdown":"<p>I&rsquo;m going to purchase a license for either <a href=\"http://macrabbit.com/espresso/\">Espresso</a> or <a href=\"http://macrabbit.com/espresso/\">TextMate</a> and so I&rsquo;m going to use each for their full trial period, then decide. Right now I&rsquo;m using Espresso, I&rsquo;ve been pretty happy with it so far.</p>\n\n<p>It&rsquo;s always the little things that impress me. Case in point:</p>\n\n<p><img src=\"http://38.media.tumblr.com/tumblr_kth6k0mlVY1qzx3i9.png\" alt=\"\"/></p>\n\n<p>Notice the last two open files, they&rsquo;re both named &ldquo;urls.py&rdquo;. This follows naming conventions in Django. But can cause problems in most editors where all you see is the name. Espresso was smart enough to recognize what was happening and tack on the name of the folder so I can see which file I&rsquo;m working on. So sweet! Nice work!</p>","outputFile":"/blog/espress-for-mac-sweetness.html","html":"<p>I&rsquo;m going to purchase a license for either <a href=\"http://macrabbit.com/espresso/\">Espresso</a> or <a href=\"http://macrabbit.com/espresso/\">TextMate</a> and so I&rsquo;m going to use each for their full trial period, then decide. Right now I&rsquo;m using Espresso, I&rsquo;ve been pretty happy with it so far.</p><p>It&rsquo;s always the little things that impress me. Case in point:</p><p><img src=http://38.media.tumblr.com/tumblr_kth6k0mlVY1qzx3i9.png></p><p>Notice the last two open files, they&rsquo;re both named &ldquo;urls.py&rdquo;. This follows naming conventions in Django. But can cause problems in most editors where all you see is the name. Espresso was smart enough to recognize what was happening and tack on the name of the folder so I can see which file I&rsquo;m working on. So sweet! Nice work!</p>","preview":"<p>I&rsquo;m going to purchase a license for either <a href=\"http://macrabbit.com/espresso/\">Espresso</a> or <a href=\"http://macrabbit.com/espresso/\">TextMate</a> and so I&rsquo;m going to use each for their full trial period, then decide. Right now I&rsquo;m using Espresso, I&rsquo;ve been pretty happy with it so far.</p>"},{"slug":"how-to-run-google-chrome-os-on-virtualbox-mac","type":"text","date":"2009-11-20T08:40:00.000Z","title":"How to Run Google Chrome OS in Virtual Box on Mac","old_url":"http://joreteg.com/post/250625952/how-to-run-google-chrome-os-on-virtualbox-mac","url":"/blog/how-to-run-google-chrome-os-on-virtualbox-mac","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/how-to-run-google-chrome-os-on-virtualbox-mac.html","markdown":"<p>If any of you fellow mac users want to try running Chrome OS in a VirtualBox you can follow the really straightforward instructions here: \n<a href=\"http://gsiegman.com/2009/nov/20/google-chrome-os-running-virtualbox/\">http://gsiegman.com/2009/nov/20/google-chrome-os-running-virtualbox/</a></p>\n\n<p><img src=\"http://31.media.tumblr.com/tumblr_ktefy5sq4C1qzx3i9.png\" alt=\"\"/></p>\n\n<p><img src=\"http://38.media.tumblr.com/tumblr_ktefyh1Xjw1qzx3i9.png\" alt=\"\"/></p>\n\n<p>I had it up and running in minutes. Not much to look at yet, but fun if you&rsquo;re into general nerdery.</p>\n\n<p>Thanks <a href=\"http://twitter.com/gsiegman\">@gsiegman</a> you rock!</p>","outputFile":"/blog/how-to-run-google-chrome-os-on-virtualbox-mac.html","html":"<p>If any of you fellow mac users want to try running Chrome OS in a VirtualBox you can follow the really straightforward instructions here: <a href=\"http://gsiegman.com/2009/nov/20/google-chrome-os-running-virtualbox/\">http://gsiegman.com/2009/nov/20/google-chrome-os-running-virtualbox/</a></p><p><img src=http://31.media.tumblr.com/tumblr_ktefy5sq4C1qzx3i9.png></p><p><img src=http://38.media.tumblr.com/tumblr_ktefyh1Xjw1qzx3i9.png></p><p>I had it up and running in minutes. Not much to look at yet, but fun if you&rsquo;re into general nerdery.</p><p>Thanks <a href=http://twitter.com/gsiegman>@gsiegman</a> you rock!</p>","preview":"<p>If any of you fellow mac users want to try running Chrome OS in a VirtualBox you can follow the really straightforward instructions here: <a href=\"http://gsiegman.com/2009/nov/20/google-chrome-os-running-virtualbox/\">http://gsiegman.com/2009/nov/20/google-chrome-os-running-virtualbox/</a></p><p><img src=http://31.media.tumblr.com/tumblr_ktefy5sq4C1qzx3i9.png></p>"},{"slug":"clock-built-with-scroll-bars-mootools","type":"link","date":"2009-11-19T04:58:14.000Z","title":"Clock built out of scroll bars with JavaScript, so sweet","url":"/blog/clock-built-with-scroll-bars-mootools","old_url":"http://joreteg.com/post/249281476/clock-built-with-scroll-bars-mootools","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/clock-built-with-scroll-bars-mootools.html","markdown":"<a href=\"http://toki-woki.net/p/scroll-clock/\">http://toki-woki.net/p/scroll-clock/</a>\n\n<p>They built this with MooTools&hellip; I&rsquo;ve gotta say I&rsquo;ve gotten so into jQuery that I really haven&rsquo;t given MooTools a chance. I probably should, I&rsquo;ve heard it&rsquo;s a bit more advanced and very powerful.</p>","outputFile":"/blog/clock-built-with-scroll-bars-mootools.html","html":"<p><a href=\"http://toki-woki.net/p/scroll-clock/\">http://toki-woki.net/p/scroll-clock/</a></p><p>They built this with MooTools&hellip; I&rsquo;ve gotta say I&rsquo;ve gotten so into jQuery that I really haven&rsquo;t given MooTools a chance. I probably should, I&rsquo;ve heard it&rsquo;s a bit more advanced and very powerful.</p>","preview":"<p><a href=\"http://toki-woki.net/p/scroll-clock/\">http://toki-woki.net/p/scroll-clock/</a></p><p>They built this with MooTools&hellip; I&rsquo;ve gotta say I&rsquo;ve gotten so into jQuery that I really haven&rsquo;t given MooTools a chance. I probably should, I&rsquo;ve heard it&rsquo;s a bit more advanced and very powerful.</p>"},{"slug":"for-tag-reversed-django","type":"text","date":"2009-11-18T04:58:00.000Z","title":"The Djangonauts thought of everything: {% for %} tag, reversed","old_url":"http://joreteg.com/post/248088892/for-tag-reversed-django","url":"/blog/for-tag-reversed-django","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/for-tag-reversed-django.html","markdown":"<p>I can&rsquo;t tell you how often I&rsquo;ve hit a snag while building something in Django, only to find out that a solution to my problem is already part of the framework. Here&rsquo;s one such example:</p>\n\n<p>I&rsquo;m passing a list of &ldquo;Program&rdquo; objects to the template and need to loop through them in the template. In a single request I&rsquo;m outputting a fairly complex html file that I&rsquo;m using to display multiple &ldquo;pages&rdquo; within a  jQTouch app. That may sound strange unless your familiar with jQTouch. You see, the thing is, I want to do as few server requests as possible since having to use the iPhone&rsquo;s data connection takes away from the super fast &ldquo;native&rdquo; feel that you can achieve with a pre-loaded app in jQTouch.</p>\n\n<p>The reason is irrelevant, but in one part of the template I need this list sorted in descending order, and in another part of the same template I want to loop through the same list in ascending order. Obviously passing the same list twice in different orders seems unnecessary.</p>\n\n<p>After some digging, I realized all I have to do is tack-on a &ldquo;reversed&rdquo; argument to the &ldquo;for&rdquo; tag.</p>\n\n<pre><code>&lt;ul&gt;\n    {% for program in programs reversed %}\n    &lt;li&gt;{{ program.name }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre>\n\n<p>Problem solved. So sweet&hellip; I &lt;3 Django!</p>","outputFile":"/blog/for-tag-reversed-django.html","html":"<p>I can&rsquo;t tell you how often I&rsquo;ve hit a snag while building something in Django, only to find out that a solution to my problem is already part of the framework. Here&rsquo;s one such example:</p><p>I&rsquo;m passing a list of &ldquo;Program&rdquo; objects to the template and need to loop through them in the template. In a single request I&rsquo;m outputting a fairly complex html file that I&rsquo;m using to display multiple &ldquo;pages&rdquo; within a jQTouch app. That may sound strange unless your familiar with jQTouch. You see, the thing is, I want to do as few server requests as possible since having to use the iPhone&rsquo;s data connection takes away from the super fast &ldquo;native&rdquo; feel that you can achieve with a pre-loaded app in jQTouch.</p><p>The reason is irrelevant, but in one part of the template I need this list sorted in descending order, and in another part of the same template I want to loop through the same list in ascending order. Obviously passing the same list twice in different orders seems unnecessary.</p><p>After some digging, I realized all I have to do is tack-on a &ldquo;reversed&rdquo; argument to the &ldquo;for&rdquo; tag.</p><pre><code>&lt;ul&gt;\n    {% for program in programs reversed %}\n    &lt;li&gt;{{ program.name }}&lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</code></pre><p>Problem solved. So sweet&hellip; I &lt;3 Django!</p>","preview":"<p>I can&rsquo;t tell you how often I&rsquo;ve hit a snag while building something in Django, only to find out that a solution to my problem is already part of the framework. Here&rsquo;s one such example:</p><p>I&rsquo;m passing a list of &ldquo;Program&rdquo; objects to the template and need to loop through them in the template. In a single request I&rsquo;m outputting a fairly complex html file that I&rsquo;m using to display multiple &ldquo;pages&rdquo; within a jQTouch app. That may sound strange unless your familiar with jQTouch. You see, the thing is, I want to do as few server requests as possible since having to use the iPhone&rsquo;s data connection takes away from the super fast &ldquo;native&rdquo; feel that you can achieve with a pre-loaded app in jQTouch.</p>"},{"slug":"using-fixtures-sqlite3-for-dev-django","type":"text","date":"2009-11-14T07:17:51.000Z","title":"Using Fixtures and SQLite for easy dev in Django","old_url":"http://joreteg.com/post/243414048/using-fixtures-sqlite3-for-dev-django","url":"/blog/using-fixtures-sqlite3-for-dev-django","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/using-fixtures-sqlite3-for-dev-django.html","markdown":"<p>When I&rsquo;m building out a new app I don&rsquo;t want to deal with setting up databases or repeatedly entering dummy data if I make changes to my models. Django fixtures and SQLite to the rescue!</p>\n\n<p>Here&rsquo;s how I do it:</p>\n\n<p>In my <code>settings.py</code> here are my relevant db settings:</p>\n\n<pre><code># create site root variable\nimport os \nSITE_ROOT = os.path.dirname(os.path.realpath(__file__))\n\nDATABASE_ENGINE = 'sqlite3'\nDATABASE_NAME = os.path.join(SITE_ROOT, 'dev.db')\nDATABASE_USER = ''\nDATABASE_PASSWORD = ''\n</code></pre>\n\n<p>Now, when I define my <code>models.py</code> and then run <code>python manage.py syncdb</code>, Django will create all the tables for me based on my models and put the entire database in a single self-contained file called <code>dev.db</code> at the root of my project folder.</p>\n\n<p>Then I can enter my test data in the amazing auto-generated django admin.</p>\n\n<p>Now, to create my fixtures, all I have to do it run:</p>\n\n<pre><code>python manage.py dumpdata --indent=4 &gt; my_app_name/fixtures/initial_data.json\n</code></pre>\n\n<p>(If your django app doesn&rsquo;t already have a &ldquo;fixtures&rdquo; directory, you&rsquo;ll have to create it first.)</p>\n\n<p>This command will write all your data to a JSON file. The <code>--indent=4</code> flag is just so it&rsquo;s easier to read. But after running this command look in your fixtures folder you&rsquo;ll see a <code>initial_data.json</code> file that looks something like this:</p>\n\n<pre><code>[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n</code></pre>\n\n<p>But here&rsquo;s the kicker&hellip; now, if for some reason you need to delete your entire <code>dev.db</code> database, all you have to do is run <code>python manage.py syncdb</code>, and it will automatically re-inflate the database with all your test data! Pretty freakin&rsquo; sweet eh? (no I&rsquo;m not canadian).</p>\n\n<p>Obviously, if you make changes to your models that the dummy data incorrect, this trick won&rsquo;t help you much. But it&rsquo;s perfect for the models that probably won&rsquo;t change so much during development.</p>\n\n<p>So, thanks to Django you can now quickly whip up a prototype without having to build a database or worry about database drivers, AND you can even completely delete your database without losing all your test/dummy data. So sweet!</p>\n\n<p>This one deserves the  #awesomecode tag IMHO.</p>","outputFile":"/blog/using-fixtures-sqlite3-for-dev-django.html","html":"<p>When I&rsquo;m building out a new app I don&rsquo;t want to deal with setting up databases or repeatedly entering dummy data if I make changes to my models. Django fixtures and SQLite to the rescue!</p><p>Here&rsquo;s how I do it:</p><p>In my <code>settings.py</code> here are my relevant db settings:</p><pre><code># create site root variable\nimport os \nSITE_ROOT = os.path.dirname(os.path.realpath(__file__))\n\nDATABASE_ENGINE = 'sqlite3'\nDATABASE_NAME = os.path.join(SITE_ROOT, 'dev.db')\nDATABASE_USER = ''\nDATABASE_PASSWORD = ''\n</code></pre><p>Now, when I define my <code>models.py</code> and then run <code>python manage.py syncdb</code>, Django will create all the tables for me based on my models and put the entire database in a single self-contained file called <code>dev.db</code> at the root of my project folder.</p><p>Then I can enter my test data in the amazing auto-generated django admin.</p><p>Now, to create my fixtures, all I have to do it run:</p><pre><code>python manage.py dumpdata --indent=4 &gt; my_app_name/fixtures/initial_data.json\n</code></pre><p>(If your django app doesn&rsquo;t already have a &ldquo;fixtures&rdquo; directory, you&rsquo;ll have to create it first.)</p><p>This command will write all your data to a JSON file. The <code>--indent=4</code> flag is just so it&rsquo;s easier to read. But after running this command look in your fixtures folder you&rsquo;ll see a <code>initial_data.json</code> file that looks something like this:</p><pre><code>[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n</code></pre><p>But here&rsquo;s the kicker&hellip; now, if for some reason you need to delete your entire <code>dev.db</code> database, all you have to do is run <code>python manage.py syncdb</code>, and it will automatically re-inflate the database with all your test data! Pretty freakin&rsquo; sweet eh? (no I&rsquo;m not canadian).</p><p>Obviously, if you make changes to your models that the dummy data incorrect, this trick won&rsquo;t help you much. But it&rsquo;s perfect for the models that probably won&rsquo;t change so much during development.</p><p>So, thanks to Django you can now quickly whip up a prototype without having to build a database or worry about database drivers, AND you can even completely delete your database without losing all your test/dummy data. So sweet!</p><p>This one deserves the #awesomecode tag IMHO.</p>","preview":"<p>When I&rsquo;m building out a new app I don&rsquo;t want to deal with setting up databases or repeatedly entering dummy data if I make changes to my models. Django fixtures and SQLite to the rescue!</p><p>Here&rsquo;s how I do it:</p><p>In my <code>settings.py</code> here are my relevant db settings:</p><pre><code># create site root variable\nimport os \nSITE_ROOT = os.path.dirname(os.path.realpath(__file__))\n\nDATABASE_ENGINE = 'sqlite3'\nDATABASE_NAME = os.path.join(SITE_ROOT, 'dev.db')\nDATABASE_USER = ''\nDATABASE_PASSWORD = ''\n</code></pre>"},{"slug":"recipebin-new-iphone-recipe-app","type":"text","date":"2009-11-08T09:04:00.000Z","title":"RecipeBin, my new iPhone/WebApp","old_url":"http://joreteg.com/post/236837591/recipebin-new-iphone-recipe-app","url":"/blog/recipebin-new-iphone-recipe-app","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/11/recipebin-new-iphone-recipe-app.html","markdown":"<p><img src=\"http://farm3.static.flickr.com/2788/4085556634_182f8a6763.jpg\" alt=\"RecipeBin Screnshot\"/></p>\n\n<p>My wife was looking for a good way to organize her recipes, naturally I thought it would be cool to have it on the web, or her iPhone or something. I couldn&rsquo;t find anything that I liked.</p>\n\n<p>All the apps I saw were over-engineered and even simple tasks like adding a new recipe were unnecessarily complicated. So I figured I&rsquo;d build one in my spare time. I was looking for an excuse to learn how to use jQTouch anyways.</p>\n\n<h3>Here were my main goals:</h3>\n\n<ol><li>Web-based, but iPhone optimized. I wanted to easily be able to type in new recipes using a real keyboard on my computer and then view/edit them anywhere from the web or my iPhone.</li>\n<li>I really wanted solid iPhone support for viewing recipes (preferably other high-end smartphones as well, like Palm Pre and Android). This is because I don&rsquo;t want to be forced to put my laptop on a messy kitchen counter with food everywhere.</li>\n<li>Super easy, or non-existant sign-up process.</li>\n<li>Delicious interface.</li>\n</ol><h3>What I didn&rsquo;t care about:</h3>\n\n<ol><li>IE support - this is a free app. I built it for me and IE doesn&rsquo;t support any of the fun CSS3 stuff, so frankly, I don&rsquo;t care if it looks terrible in IE. I don&rsquo;t wanna mess with it because I&rsquo;m not getting paid for this and supporting IE would be way too much work. It&rsquo;ll work in IE it&rsquo;ll just be ugly. If you&rsquo;re tech-savvy enough to have an iPhone, you have no business using something as old and lame as IE (switch to Chrome or FireFox).</li>\n<li>Social features - I may add some of this stuff later, but for now I just want a good, simple bucket for storing my own stuff.</li>\n<li>Complex functionality like unit conversions for measurements, etc. Doing this requires users to enter stuff in a more structured format which makes entering recipes harder than it needs to be. I didn&rsquo;t want to deal with it and realistically, that stuff appeals more to nerds than people like my wife who will actually use this.</li>\n<li>Other, crazy complex features - just simple and usable, please.</li>\n</ol><h3>What I used to build it:</h3>\n\n<ol><li><a href=\"http://www.jquery.com\">jQuery</a> - The JavaScript library that take the headaches out of JavaScript.</li>\n<li><a href=\"http://www.jqtouch.com\">jQTouch</a> - jQTouch makes it simple to build an webapp that feels like a native iPhone app. I have&rsquo;t tested it on Android or WebOS yet, but supposedly it will fully support these someday as well. Once I saw what you could do with jQTouch this decision was a no-brainer. Much props to <a href=\"http://twitter.com/davidkaneda\">David Kaneda</a> for jQTouch.</li>\n<li><a href=\"http://www.djangoproject.com\">Django</a> - Rock solid, feature-rich open source web application framework written in pure Python. It doesn&rsquo;t get any better than this.</li>\n<li><a href=\"http://code.google.com/appengine\">Google App Engine</a> - Fast scalable Python hosting environment that&rsquo;s free until you hit really high usage limits (roughly 5,000,000 page views per month). AppEngine supports Django 1.1 (not in it&rsquo;s entirety, but not too bad) and also makes authentication with Google Accounts <em>super</em> simple. Plus, if for some reason my App gets really popular I don&rsquo;t have to worry about scaling headaches or hardware issues because it runs on Google&rsquo;s architecture. There are definitely some limitations, but for a simple app like this, the benefits made it worth it. Plus, I wanted to learn how to do it and find out what limitations it had.</li>\n<li>CSS3 + HTML5 - Even though these technologies aren&rsquo;t fully implemented in all browsers (*cough* IE *cough*) they make styling stuff fun again because you can do so much without needing javascript and loading a bunch of images. So far I didn&rsquo;t use too much from the up-and-coming HTML5 spec. But, I may use the client storage stuff to optimize speed on the iPhone down the road. For now, though it just uses some choice cuts of CSS3.</li>\n</ol><h3>Features I&rsquo;d still consider adding:</h3>\n\n<ol><li>Ability to share your entire library with other people. Say for example that I want to be able to access my wife&rsquo;s recipes without having to log in with her account and vise-versa. So, if you could specify who to share recipes with, that may be useful. </li>\n<li>Ability to mark recipes as public.</li>\n<li>Ability to select different templates for printing out recipes. If you wanted to use it to make a book or something.</li>\n<li>A public API (possibly).</li>\n</ol><p>This project is still definitely in development stages, but I thought I&rsquo;d put it out there now, just to get some feedback. If you want to check it out got to: <a href=\"http://www.RecipeBinApp.com\">http://www.RecipeBinApp.com</a> from a modern browser or your iPhone, just sign in with your Google Account and start entering recipes. While it&rsquo;s possible to add and edit recipes on your phone, realistically, you&rsquo;ll want to do that in a regular browser. I highly recommend adding pictures of your recipes, because I built the web app portion with a highly visual display.</p>\n\n<p>I&rsquo;m curious to hear some feedback from anybody who wants to test it out. Feel free to sound off in the comments or just <a href=\"mailto:hjoreteg@gmail.com\">email me</a>.</p>","outputFile":"/blog/recipebin-new-iphone-recipe-app.html","html":"<p><img src=http://farm3.static.flickr.com/2788/4085556634_182f8a6763.jpg alt=\"RecipeBin Screnshot\"></p><p>My wife was looking for a good way to organize her recipes, naturally I thought it would be cool to have it on the web, or her iPhone or something. I couldn&rsquo;t find anything that I liked.</p><p>All the apps I saw were over-engineered and even simple tasks like adding a new recipe were unnecessarily complicated. So I figured I&rsquo;d build one in my spare time. I was looking for an excuse to learn how to use jQTouch anyways.</p><h3>Here were my main goals:</h3><p><ol><li>Web-based, but iPhone optimized. I wanted to easily be able to type in new recipes using a real keyboard on my computer and then view/edit them anywhere from the web or my iPhone.</li></ol></p><p><li>I really wanted solid iPhone support for viewing recipes (preferably other high-end smartphones as well, like Palm Pre and Android). This is because I don&rsquo;t want to be forced to put my laptop on a messy kitchen counter with food everywhere.</li></p><p><li>Super easy, or non-existant sign-up process.</li></p><p><li>Delicious interface.</li></p><h3>What I didn&rsquo;t care about:</h3><p></p><p><ol><li>IE support - this is a free app. I built it for me and IE doesn&rsquo;t support any of the fun CSS3 stuff, so frankly, I don&rsquo;t care if it looks terrible in IE. I don&rsquo;t wanna mess with it because I&rsquo;m not getting paid for this and supporting IE would be way too much work. It&rsquo;ll work in IE it&rsquo;ll just be ugly. If you&rsquo;re tech-savvy enough to have an iPhone, you have no business using something as old and lame as IE (switch to Chrome or FireFox).</li></ol></p><p><li>Social features - I may add some of this stuff later, but for now I just want a good, simple bucket for storing my own stuff.</li></p><p><li>Complex functionality like unit conversions for measurements, etc. Doing this requires users to enter stuff in a more structured format which makes entering recipes harder than it needs to be. I didn&rsquo;t want to deal with it and realistically, that stuff appeals more to nerds than people like my wife who will actually use this.</li></p><p><li>Other, crazy complex features - just simple and usable, please.</li></p><h3>What I used to build it:</h3><p></p><p><ol><li><a href=http://www.jquery.com>jQuery</a> - The JavaScript library that take the headaches out of JavaScript.</li></ol></p><p><li><a href=http://www.jqtouch.com>jQTouch</a> - jQTouch makes it simple to build an webapp that feels like a native iPhone app. I have&rsquo;t tested it on Android or WebOS yet, but supposedly it will fully support these someday as well. Once I saw what you could do with jQTouch this decision was a no-brainer. Much props to <a href=http://twitter.com/davidkaneda>David Kaneda</a> for jQTouch.</li></p><p><li><a href=http://www.djangoproject.com>Django</a> - Rock solid, feature-rich open source web application framework written in pure Python. It doesn&rsquo;t get any better than this.</li></p><p><li><a href=http://code.google.com/appengine>Google App Engine</a> - Fast scalable Python hosting environment that&rsquo;s free until you hit really high usage limits (roughly 5,000,000 page views per month). AppEngine supports Django 1.1 (not in it&rsquo;s entirety, but not too bad) and also makes authentication with Google Accounts <em>super</em> simple. Plus, if for some reason my App gets really popular I don&rsquo;t have to worry about scaling headaches or hardware issues because it runs on Google&rsquo;s architecture. There are definitely some limitations, but for a simple app like this, the benefits made it worth it. Plus, I wanted to learn how to do it and find out what limitations it had.</li></p><p><li>CSS3 + HTML5 - Even though these technologies aren&rsquo;t fully implemented in all browsers (<em>cough</em> IE <em>cough</em>) they make styling stuff fun again because you can do so much without needing javascript and loading a bunch of images. So far I didn&rsquo;t use too much from the up-and-coming HTML5 spec. But, I may use the client storage stuff to optimize speed on the iPhone down the road. For now, though it just uses some choice cuts of CSS3.</li></p><h3>Features I&rsquo;d still consider adding:</h3><p></p><p><ol><li>Ability to share your entire library with other people. Say for example that I want to be able to access my wife&rsquo;s recipes without having to log in with her account and vise-versa. So, if you could specify who to share recipes with, that may be useful.</li></ol></p><p><li>Ability to mark recipes as public.</li></p><p><li>Ability to select different templates for printing out recipes. If you wanted to use it to make a book or something.</li></p><p><li>A public API (possibly).</li></p><p>This project is still definitely in development stages, but I thought I&rsquo;d put it out there now, just to get some feedback. If you want to check it out got to: <a href=http://www.RecipeBinApp.com>http://www.RecipeBinApp.com</a> from a modern browser or your iPhone, just sign in with your Google Account and start entering recipes. While it&rsquo;s possible to add and edit recipes on your phone, realistically, you&rsquo;ll want to do that in a regular browser. I highly recommend adding pictures of your recipes, because I built the web app portion with a highly visual display.</p><p></p><p>I&rsquo;m curious to hear some feedback from anybody who wants to test it out. Feel free to sound off in the comments or just <a href=mailto:hjoreteg@gmail.com>email me</a>.</p>","preview":"<p><img src=http://farm3.static.flickr.com/2788/4085556634_182f8a6763.jpg alt=\"RecipeBin Screnshot\"></p><p>My wife was looking for a good way to organize her recipes, naturally I thought it would be cool to have it on the web, or her iPhone or something. I couldn&rsquo;t find anything that I liked.</p>"},{"slug":"two-great-rules-quote","type":"quote","date":"2009-10-14T16:01:47.000Z","old_url":"http://joreteg.com/post/212941780/two-great-rules-quote","title":"Two great rules of life","tags":"quote","url":"/blog/two-great-rules-quote","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/10/two-great-rules-quote.html","markdown":"<blockquote>There are two great rules of life: never tell everything at once.</blockquote>\nKen Venturi","outputFile":"/blog/two-great-rules-quote.html","html":"<p><blockquote>There are two great rules of life: never tell everything at once.</blockquote>Ken Venturi</p>","preview":"<p><blockquote>There are two great rules of life: never tell everything at once.</blockquote>Ken Venturi</p>"},{"slug":"google-auto-suggest-fail","type":"photo","date":"2009-10-08T23:48:00.000Z","title":"Google Auto Suggest - FAIL!","old_url":"http://joreteg.com/post/207934379/google-auto-suggest-fail","url":"/blog/google-auto-suggest-fail","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/10/google-auto-suggest-fail.html","markdown":"Google Auto Suggest - FAIL!\n\n<img src=\"http://40.media.tumblr.com/tumblr_kr7zh39HsV1qzy2uro1_500.jpg\">\n\n<p>(Look at suggestion number two)</p>\n\n<p>By the way all credit goes to <a href=\"http://twitter.com/nhan1\">Nick Han @nhan1</a> for showing me this.</p>","outputFile":"/blog/google-auto-suggest-fail.html","html":"<p>Google Auto Suggest - FAIL!</p><p><img src=http://40.media.tumblr.com/tumblr_kr7zh39HsV1qzy2uro1_500.jpg></p><p>(Look at suggestion number two)</p><p>By the way all credit goes to <a href=http://twitter.com/nhan1>Nick Han @nhan1</a> for showing me this.</p>","preview":"<p>Google Auto Suggest - FAIL!</p><p><img src=http://40.media.tumblr.com/tumblr_kr7zh39HsV1qzy2uro1_500.jpg></p><p>(Look at suggestion number two)</p><p>By the way all credit goes to <a href=http://twitter.com/nhan1>Nick Han @nhan1</a> for showing me this.</p>"},{"slug":"forcing-html5-support-in-ie8","type":"text","date":"2009-09-23T01:57:00.000Z","title":"Forcing HTML5 support in IE8!","old_url":"http://joreteg.com/post/194611613/forcing-html5-support-in-ie8","url":"/blog/forcing-html5-support-in-ie8","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/09/forcing-html5-support-in-ie8.html","markdown":"<p>** UPDATE: this plugin works for IE6, IE7 and IE8, not just IE8 as this article suggests **</p>\n\n<p>Every web-developer knows how hard IE sux. IE8 is at least somewhat standards compliant, but I&rsquo;d be willing to bet that they&rsquo;re going to drag their feet in implementing all the HTML5 awesomeness that makes the web even more promising than it already is.</p>\n\n<p>It&rsquo;s not a perfect solution, but the boys at Google wrote an IE8 plugin called <a href=\"http://code.google.com/chrome/chromeframe/developers_guide.html\">Chrome Frame</a> that uses Chrome&rsquo;s rendering engine (Webkit) to render certain pages. As a dev you can sniff for it and prompt them to install it if it&rsquo;s not there. Here&rsquo;s the magic:</p>\n\n<p><code>&lt;meta http-equiv=\"X-UA-Compatible\" content=\"chrome=1\"/&gt;</code></p>\n\n<p>Adding this meta tag will tell IE8 to render the page with Chrome Frame if the plugin is installed.</p>\n\n<p>However, since most IE8 users won&rsquo;t have it installed, (at least at this point) simply adding that tag won&rsquo;t help you too much. So you need to sniff for it and you can prompt the user to install the plugin if it&rsquo;s not present:</p>\n\n<pre><code>&lt;body&gt;\n&lt;script type=\"text/javascript\"\nsrc=\"http://ajax.googleapis.com/ajax/libs/chromeframe/1/CFInstall.min.js\"&gt;\n&lt;/script&gt;\n\n&lt;div id=\"placeholder\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    CFInstall.check({\n        node: \"placeholder\",\n        destination: \"http://www.waikiki.com\"\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>You can modify how to prompt the user by changing the configuration, just refer to the <a href=\"http://code.google.com/chrome/chromeframe/developers_guide.html#CFInstall_check_Options\">developer documentation</a>. I for one am quite excited about this because it&rsquo;s a way to circumvent Microsoft&rsquo;s slowness in adopting HTML5 and users will simply be prompted to install a plugin, which is an experience they&rsquo;re already used to for flash sites, etc.</p>\n\n<p>Obviously this doesn&rsquo;t help us for IE 6 and 7 but odds are pretty good that when Windows 7 is released we&rsquo;ll see a significant boost in IE8 usage. I, for one, plan on building a bunch of stuff that requires HTML5 support so any expansion in support for that in &ldquo;Microsoft land&rdquo; is exciting to me.</p>\n\n<p>Also, here&rsquo;s the <a href=\"http://googlecode.blogspot.com/2009/09/introducing-google-chrome-frame.html\">announcement</a> and the official explanation vid:</p>\n\n<p><object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/sjW0Bchdj-w&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\"><param name=\"allowFullScreen\" value=\"true\"><param name=\"allowScriptAccess\" value=\"always\"><embed src=\"http://www.youtube.com/v/sjW0Bchdj-w&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\"425\" height=\"344\"></embed></object></p>","outputFile":"/blog/forcing-html5-support-in-ie8.html","html":"<p><strong>UPDATE: this plugin works for IE6, IE7 and IE8, not just IE8 as this article suggests</strong></p><p>Every web-developer knows how hard IE sux. IE8 is at least somewhat standards compliant, but I&rsquo;d be willing to bet that they&rsquo;re going to drag their feet in implementing all the HTML5 awesomeness that makes the web even more promising than it already is.</p><p>It&rsquo;s not a perfect solution, but the boys at Google wrote an IE8 plugin called <a href=http://code.google.com/chrome/chromeframe/developers_guide.html>Chrome Frame</a> that uses Chrome&rsquo;s rendering engine (Webkit) to render certain pages. As a dev you can sniff for it and prompt them to install it if it&rsquo;s not there. Here&rsquo;s the magic:</p><p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;chrome=1&quot;/&gt;</code></p><p>Adding this meta tag will tell IE8 to render the page with Chrome Frame if the plugin is installed.</p><p>However, since most IE8 users won&rsquo;t have it installed, (at least at this point) simply adding that tag won&rsquo;t help you too much. So you need to sniff for it and you can prompt the user to install the plugin if it&rsquo;s not present:</p><pre><code>&lt;body&gt;\n&lt;script type=\"text/javascript\"\nsrc=\"http://ajax.googleapis.com/ajax/libs/chromeframe/1/CFInstall.min.js\"&gt;\n&lt;/script&gt;\n\n&lt;div id=\"placeholder\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    CFInstall.check({\n        node: \"placeholder\",\n        destination: \"http://www.waikiki.com\"\n    });\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre><p>You can modify how to prompt the user by changing the configuration, just refer to the <a href=http://code.google.com/chrome/chromeframe/developers_guide.html#CFInstall_check_Options>developer documentation</a>. I for one am quite excited about this because it&rsquo;s a way to circumvent Microsoft&rsquo;s slowness in adopting HTML5 and users will simply be prompted to install a plugin, which is an experience they&rsquo;re already used to for flash sites, etc.</p><p>Obviously this doesn&rsquo;t help us for IE 6 and 7 but odds are pretty good that when Windows 7 is released we&rsquo;ll see a significant boost in IE8 usage. I, for one, plan on building a bunch of stuff that requires HTML5 support so any expansion in support for that in &ldquo;Microsoft land&rdquo; is exciting to me.</p><p>Also, here&rsquo;s the <a href=http://googlecode.blogspot.com/2009/09/introducing-google-chrome-frame.html>announcement</a> and the official explanation vid:</p><p><object width=425 height=344><param name=movie value=\"http://www.youtube.com/v/sjW0Bchdj-w&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\"><param name=allowFullScreen value=true><param name=allowScriptAccess value=always><embed src=\"http://www.youtube.com/v/sjW0Bchdj-w&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\" type=application/x-shockwave-flash allowfullscreen=true allowscriptaccess=always width=425 height=344></object></p>","preview":"<p><strong>UPDATE: this plugin works for IE6, IE7 and IE8, not just IE8 as this article suggests</strong></p><p>Every web-developer knows how hard IE sux. IE8 is at least somewhat standards compliant, but I&rsquo;d be willing to bet that they&rsquo;re going to drag their feet in implementing all the HTML5 awesomeness that makes the web even more promising than it already is.</p>"},{"slug":"how-to-run-pandora-as-menu-item-and-play-wirelessly-mac","type":"text","date":"2009-09-06T16:37:24.000Z","title":"How to run Pandora as a menubar item and play wirelessly on Mac","old_url":"http://joreteg.com/post/181248477/how-to-run-pandora-as-menu-item-and-play-wirelessly-mac","url":"/blog/how-to-run-pandora-as-menu-item-and-play-wirelessly-mac","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/09/how-to-run-pandora-as-menu-item-and-play-wirelessly-mac.html","markdown":"<p>I recently had a discussion with <a href=\"http://twitter.com/johnderosa\">@johnderosa</a> on Twitter about a good Pandora setup that doesn&rsquo;t require keeping a browser tab open all the time. So I thought I&rsquo;d whip up a quick explanation of my setup.</p>\n\n<p>The key to all this is a free mac app called <a href=\"http://fluidapp.com\">Fluid</a>:</p>\n\n<p><a href=\"http://www.flickr.com/photos/hjoreteg/3893275212/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=\"http://farm3.static.flickr.com/2614/3893275212_cc8e413b49_o.png\" width=\"113\" height=\"110\" alt=\"Pandora, Fluid, Airfoil setup\"/></a></p>\n\n<p>Fluid let&rsquo;s you create &ldquo;Site Specific Browsers&rdquo;. Which creates a &ldquo;desktop&rdquo; application out of your favorite web apps. Basically, it&rsquo;s just a browser that runs as it&rsquo;s own process and opens your favorite web application without showing you the toolbars and other nonsense that most browsers have. When you first run fluid you just see this dialog:</p>\n\n<p><a href=\"http://www.flickr.com/photos/hjoreteg/3892487367/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=\"http://farm3.static.flickr.com/2548/3892487367_c9aa4b7088.jpg\" width=\"500\" height=\"295\" alt=\"Pandora, Fluid, Airfoil setup\"/></a></p>\n\n<p>You just enter the url of the site you want, in our case <a href=\"http://www.pandora.com\">http://www.pandora.com</a> and you&rsquo;re off to the races. Now you&rsquo;ve got a new &ldquo;Pandora&rdquo; app in your applications folder. Go ahead and fire it up and you&rsquo;ll see Pandora running in it&rsquo;s own very stripped down browser window. Next, just select &ldquo;Convert to MenuExtra SSB&rdquo; from the application menu:</p>\n\n<p><a href=\"http://www.flickr.com/photos/hjoreteg/3893275500/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=\"http://farm4.static.flickr.com/3643/3893275500_cba7283fce.jpg\" width=\"363\" height=\"439\" alt=\"Pandora, Fluid, Airfoil setup\"/></a></p>\n\n<p>Now you&rsquo;ve got a Pandora logo in your menu bar. Your Pandora app now runs independent of any other browser on your system and you can access it anytime just by clicking the icon in your menu. How sweet it that!</p>\n\n<p>To take it to the next step you can now combine your Pandora app with <a href=\"http://www.rogueamoeba.com/airfoil/\">AirFoil</a> ($25) and your <a href=\"http://www.amazon.com/gp/product/B0015YJOK2?ie=UTF8&amp;tag=h084-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0015YJOK2\">Apple Airport Express</a> and you can play Pandora through your home stereo without any wires:</p>\n\n<p><a href=\"http://www.flickr.com/photos/hjoreteg/3892487087/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=\"http://farm3.static.flickr.com/2433/3892487087_8fc0595bfd.jpg\" width=\"500\" height=\"307\" alt=\"Pandora, Fluid, Airfoil setup\"/></a></p>\n\n<p>There&rsquo;s lot of other great uses for Fluid. A few examples would be Gmail, Facebook, online developer docs, or any site that you access often can be really convenient to have as a separate app instead of having to hunt through your tabs to find it. <a href=\"http://www.google.com/chrome\">Chrome</a> for Windows already has the ability to create SSB&rsquo;s, look for &ldquo;Create Application Shortcut&rdquo; in the page menu, it&rsquo;s a greyed out menu item on the current Mac version, so it should be on the way for the Mac version too. I think we&rsquo;ll be seeing a lot more of this type of stuff in the next few years as the line between desktop and web apps continues to blur.</p>","outputFile":"/blog/how-to-run-pandora-as-menu-item-and-play-wirelessly-mac.html","html":"<p>I recently had a discussion with <a href=http://twitter.com/johnderosa>@johnderosa</a> on Twitter about a good Pandora setup that doesn&rsquo;t require keeping a browser tab open all the time. So I thought I&rsquo;d whip up a quick explanation of my setup.</p><p>The key to all this is a free mac app called <a href=http://fluidapp.com>Fluid</a>:</p><p><a href=\"http://www.flickr.com/photos/hjoreteg/3893275212/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=http://farm3.static.flickr.com/2614/3893275212_cc8e413b49_o.png width=113 height=110 alt=\"Pandora, Fluid, Airfoil setup\"></a></p><p>Fluid let&rsquo;s you create &ldquo;Site Specific Browsers&rdquo;. Which creates a &ldquo;desktop&rdquo; application out of your favorite web apps. Basically, it&rsquo;s just a browser that runs as it&rsquo;s own process and opens your favorite web application without showing you the toolbars and other nonsense that most browsers have. When you first run fluid you just see this dialog:</p><p><a href=\"http://www.flickr.com/photos/hjoreteg/3892487367/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=http://farm3.static.flickr.com/2548/3892487367_c9aa4b7088.jpg width=500 height=295 alt=\"Pandora, Fluid, Airfoil setup\"></a></p><p>You just enter the url of the site you want, in our case <a href=http://www.pandora.com>http://www.pandora.com</a> and you&rsquo;re off to the races. Now you&rsquo;ve got a new &ldquo;Pandora&rdquo; app in your applications folder. Go ahead and fire it up and you&rsquo;ll see Pandora running in it&rsquo;s own very stripped down browser window. Next, just select &ldquo;Convert to MenuExtra SSB&rdquo; from the application menu:</p><p><a href=\"http://www.flickr.com/photos/hjoreteg/3893275500/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=http://farm4.static.flickr.com/3643/3893275500_cba7283fce.jpg width=363 height=439 alt=\"Pandora, Fluid, Airfoil setup\"></a></p><p>Now you&rsquo;ve got a Pandora logo in your menu bar. Your Pandora app now runs independent of any other browser on your system and you can access it anytime just by clicking the icon in your menu. How sweet it that!</p><p>To take it to the next step you can now combine your Pandora app with <a href=\"http://www.rogueamoeba.com/airfoil/\">AirFoil</a> ($25) and your <a href=\"http://www.amazon.com/gp/product/B0015YJOK2?ie=UTF8&amp;tag=h084-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0015YJOK2\">Apple Airport Express</a> and you can play Pandora through your home stereo without any wires:</p><p><a href=\"http://www.flickr.com/photos/hjoreteg/3892487087/\" title=\"Pandora, Fluid, Airfoil setup by Henrik Joreteg, on Flickr\"><img src=http://farm3.static.flickr.com/2433/3892487087_8fc0595bfd.jpg width=500 height=307 alt=\"Pandora, Fluid, Airfoil setup\"></a></p><p>There&rsquo;s lot of other great uses for Fluid. A few examples would be Gmail, Facebook, online developer docs, or any site that you access often can be really convenient to have as a separate app instead of having to hunt through your tabs to find it. <a href=http://www.google.com/chrome>Chrome</a> for Windows already has the ability to create SSB&rsquo;s, look for &ldquo;Create Application Shortcut&rdquo; in the page menu, it&rsquo;s a greyed out menu item on the current Mac version, so it should be on the way for the Mac version too. I think we&rsquo;ll be seeing a lot more of this type of stuff in the next few years as the line between desktop and web apps continues to blur.</p>","preview":"<p>I recently had a discussion with <a href=http://twitter.com/johnderosa>@johnderosa</a> on Twitter about a good Pandora setup that doesn&rsquo;t require keeping a browser tab open all the time. So I thought I&rsquo;d whip up a quick explanation of my setup.</p><p>The key to all this is a free mac app called <a href=http://fluidapp.com>Fluid</a>:</p>"},{"slug":"working-in-business-or-on-business","type":"quote","date":"2009-09-04T14:33:41.000Z","old_url":"http://joreteg.com/post/179644044/working-in-business-or-on-business","title":"Working in the business vs. on the business","url":"/blog/working-in-business-or-on-business","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/09/working-in-business-or-on-business.html","markdown":"<blockquote>So many managers and businesses spend so much time completing tasks that they rarely stand back and ask, “Is this the most effective way to work on this task?” It is the age-old problem of spending too much time working <em>in</em> the business and forgetting to work <em>on</em> the business.</blockquote>\n<a href=\"http://www.smashingmagazine.com/2009/09/03/professional-team-management-tips-for-creative-folks/\">Smashing Magazine: Professional Team Management Tips For Creative Folks</a>","outputFile":"/blog/working-in-business-or-on-business.html","html":"<p><blockquote>So many managers and businesses spend so much time completing tasks that they rarely stand back and ask, “Is this the most effective way to work on this task?” It is the age-old problem of spending too much time working <em>in</em> the business and forgetting to work <em>on</em> the business.</blockquote><a href=\"http://www.smashingmagazine.com/2009/09/03/professional-team-management-tips-for-creative-folks/\">Smashing Magazine: Professional Team Management Tips For Creative Folks</a></p>","preview":"<p><blockquote>So many managers and businesses spend so much time completing tasks that they rarely stand back and ask, “Is this the most effective way to work on this task?” It is the age-old problem of spending too much time working <em>in</em> the business and forgetting to work <em>on</em> the business.</blockquote><a href=\"http://www.smashingmagazine.com/2009/09/03/professional-team-management-tips-for-creative-folks/\">Smashing Magazine: Professional Team Management Tips For Creative Folks</a></p>"},{"slug":"luke-wroblewski-on-inline-form-vaildation","type":"link","date":"2009-09-03T14:55:21.000Z","title":"Luke Wroblewski on Inline Validation","url":"/blog/luke-wroblewski-on-inline-form-vaildation","old_url":"http://joreteg.com/post/178825485/luke-wroblewski-on-inline-form-vaildation","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/09/luke-wroblewski-on-inline-form-vaildation.html","markdown":"<a href=\"http://www.alistapart.com/articles/inline-validation-in-web-forms/\">http://www.alistapart.com/articles/inline-validation-in-web-forms/</a>\n\n<p>When it comes to web form design and usability testing Luke Wroblewski is <em>the</em> guru. This is his latest study, showing how to best do inline validation (and showing that it&rsquo;s well worth the effort).</p>\n\n<p>When done right it showed:</p>\n\n<ul><li>22% increase in success rates</li>\n<li>22% decrease in errors made</li>\n<li>31% increase in satisfaction rating</li>\n<li>42% decrease in completion times</li>\n<li>47% decrease in the number of eye fixations</li>\n</ul>","outputFile":"/blog/luke-wroblewski-on-inline-form-vaildation.html","html":"<p><a href=\"http://www.alistapart.com/articles/inline-validation-in-web-forms/\">http://www.alistapart.com/articles/inline-validation-in-web-forms/</a></p><p>When it comes to web form design and usability testing Luke Wroblewski is <em>the</em> guru. This is his latest study, showing how to best do inline validation (and showing that it&rsquo;s well worth the effort).</p><p>When done right it showed:</p><ul><li>22% increase in success rates</li><li>22% decrease in errors made</li><li>31% increase in satisfaction rating</li><li>42% decrease in completion times</li><li>47% decrease in the number of eye fixations</li></ul>","preview":"<p><a href=\"http://www.alistapart.com/articles/inline-validation-in-web-forms/\">http://www.alistapart.com/articles/inline-validation-in-web-forms/</a></p><p>When it comes to web form design and usability testing Luke Wroblewski is <em>the</em> guru. This is his latest study, showing how to best do inline validation (and showing that it&rsquo;s well worth the effort).</p>"},{"slug":"fun-little-easter-egg-in-the-google-iphone-app","type":"photo","date":"2009-08-22T01:26:49.000Z","title":"Fun little easter egg: In the Google iPhone app. Continually swiping up from the bottom of the settings pane reveals this secret &ldquo;Bells and Whistles&rdquo; pane.","old_url":"http://joreteg.com/post/168569193/fun-little-easter-egg-in-the-google-iphone-app","url":"/blog/fun-little-easter-egg-in-the-google-iphone-app","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/fun-little-easter-egg-in-the-google-iphone-app.html","markdown":"Fun little easter egg: In the Google iPhone app. Continually swiping up from the bottom of the settings pane reveals this secret &ldquo;Bells and Whistles&rdquo; pane.\n\n<img src=\"http://36.media.tumblr.com/tumblr_kor80sGFEP1qzy2uro1_400.jpg\">","outputFile":"/blog/fun-little-easter-egg-in-the-google-iphone-app.html","html":"<p>Fun little easter egg: In the Google iPhone app. Continually swiping up from the bottom of the settings pane reveals this secret &ldquo;Bells and Whistles&rdquo; pane.</p><p><img src=http://36.media.tumblr.com/tumblr_kor80sGFEP1qzy2uro1_400.jpg></p>","preview":"<p>Fun little easter egg: In the Google iPhone app. Continually swiping up from the bottom of the settings pane reveals this secret &ldquo;Bells and Whistles&rdquo; pane.</p><p><img src=http://36.media.tumblr.com/tumblr_kor80sGFEP1qzy2uro1_400.jpg></p>"},{"slug":"google-chrome-adds-bookmark-sync","type":"link","date":"2009-08-20T22:24:36.000Z","title":"Google Chrome Dev Channel Enables Bookmark Sync","url":"/blog/google-chrome-adds-bookmark-sync","old_url":"http://joreteg.com/post/167641755/google-chrome-adds-bookmark-sync","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/google-chrome-adds-bookmark-sync.html","markdown":"<a href=\"http://blog.chromium.org/2009/08/bookmarks-here-bookmarks-there.html\">http://blog.chromium.org/2009/08/bookmarks-here-bookmarks-there.html</a>\n\n<p>I&rsquo;ve been waiting for this. Now you can sync your bookmarks from one Chrome instance to another using your Google Account. You can even view your bookmarks in a new folder that gets added to Google Docs&hellip; pretty sweet.</p>","outputFile":"/blog/google-chrome-adds-bookmark-sync.html","html":"<p><a href=http://blog.chromium.org/2009/08/bookmarks-here-bookmarks-there.html>http://blog.chromium.org/2009/08/bookmarks-here-bookmarks-there.html</a></p><p>I&rsquo;ve been waiting for this. Now you can sync your bookmarks from one Chrome instance to another using your Google Account. You can even view your bookmarks in a new folder that gets added to Google Docs&hellip; pretty sweet.</p>","preview":"<p><a href=http://blog.chromium.org/2009/08/bookmarks-here-bookmarks-there.html>http://blog.chromium.org/2009/08/bookmarks-here-bookmarks-there.html</a></p><p>I&rsquo;ve been waiting for this. Now you can sync your bookmarks from one Chrome instance to another using your Google Account. You can even view your bookmarks in a new folder that gets added to Google Docs&hellip; pretty sweet.</p>"},{"slug":"punypng-crushing-your-images-even-more","type":"link","date":"2009-08-17T15:20:21.000Z","title":"punypng: crushing your images even more","url":"/blog/punypng-crushing-your-images-even-more","old_url":"http://joreteg.com/post/164933727/punypng-crushing-your-images-even-more","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/punypng-crushing-your-images-even-more.html","markdown":"<a href=\"http://feedproxy.google.com/~r/ajaxian/~3/Tf2VQXA_10E/punypng\">http://feedproxy.google.com/~r/ajaxian/~3/Tf2VQXA_10E/punypng</a>\n\n<p>If you&rsquo;re hardcore about reducing image file sizes&hellip; this is sweet!</p>","outputFile":"/blog/punypng-crushing-your-images-even-more.html","html":"<p><a href=http://feedproxy.google.com/~r/ajaxian/~3/Tf2VQXA_10E/punypng>http://feedproxy.google.com/~r/ajaxian/~3/Tf2VQXA_10E/punypng</a></p><p>If you&rsquo;re hardcore about reducing image file sizes&hellip; this is sweet!</p>","preview":"<p><a href=http://feedproxy.google.com/~r/ajaxian/~3/Tf2VQXA_10E/punypng>http://feedproxy.google.com/~r/ajaxian/~3/Tf2VQXA_10E/punypng</a></p><p>If you&rsquo;re hardcore about reducing image file sizes&hellip; this is sweet!</p>"},{"slug":"10-harsh-truths-about-corporate-websites","type":"link","date":"2009-08-14T05:12:06.000Z","title":"10 Harsh Truths About Corporate Websites","url":"/blog/10-harsh-truths-about-corporate-websites","old_url":"http://joreteg.com/post/162592151/10-harsh-truths-about-corporate-websites","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/10-harsh-truths-about-corporate-websites.html","markdown":"<a href=\"http://www.smashingmagazine.com/2009/02/10/10-harsh-truths-about-corporate-websites/\">http://www.smashingmagazine.com/2009/02/10/10-harsh-truths-about-corporate-websites/</a>\n\n<p>Great roundup by Smashing Magazine (from a few months back) summarizing many of the web design traps that corporations can fall into if they&rsquo;re not careful.</p>","outputFile":"/blog/10-harsh-truths-about-corporate-websites.html","html":"<p><a href=\"http://www.smashingmagazine.com/2009/02/10/10-harsh-truths-about-corporate-websites/\">http://www.smashingmagazine.com/2009/02/10/10-harsh-truths-about-corporate-websites/</a></p><p>Great roundup by Smashing Magazine (from a few months back) summarizing many of the web design traps that corporations can fall into if they&rsquo;re not careful.</p>","preview":"<p><a href=\"http://www.smashingmagazine.com/2009/02/10/10-harsh-truths-about-corporate-websites/\">http://www.smashingmagazine.com/2009/02/10/10-harsh-truths-about-corporate-websites/</a></p><p>Great roundup by Smashing Magazine (from a few months back) summarizing many of the web design traps that corporations can fall into if they&rsquo;re not careful.</p>"},{"slug":"on2-google-open-video","type":"text","date":"2009-08-07T23:52:11.000Z","title":"Google, On2 and open video","old_url":"http://joreteg.com/post/158217298/on2-google-open-video","url":"/blog/on2-google-open-video","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/on2-google-open-video.html","markdown":"<p>Google is buying On2 technologies. Why does this matter?</p>\n\n<p>Open video. Period.</p>\n\n<p>What do I mean? In 2004 the On2 VP6 codec was selected for use as the Flash 8 video codec. So many of the FLV files playing on the web today are compressed using On2&rsquo;s technology. Since then they&rsquo;ve also released another generation of codec called VP7 (they need better names). What you have to understand about these compression technologies from a technical standpoint is that they&rsquo;re freakin&rsquo; voodoo! From my own experience working with VP6 several years ago when I built <a href=\"http://www.houseflix.com\">HouseFLIX.com</a>, I was completely dumbfounded at the minimal file sizes that could be produced. Our 3 minute video tours were rarely more than 12 or 13MB and the quality was still looked pretty decent in full-screen mode. I once connected it to a 63&quot; tv and blew it up to full size. It still looked good!</p>\n\n<p>What is Google big mo these days? Open web. They want to make the web into a viable alternative platform to a traditional OS. Therefore, they&rsquo;re pushing non-proprietary web technologies forward in order to make web-based applications a more compelling alternative to their desktop counterparts. I would be very surprised if they didn&rsquo;t turn around and open source some of these technologies from On2 so that all of us eager HTML5 developers would have good codec options for use in our <code>&lt;video&gt;</code> tags. If the web is going to be ready to be a replacement for desktop applications by the time Google releases <a href=\"http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html\">Chrome OS</a> next fall, some really good, non-proprietary video options are a necessity. I think On2&rsquo;s technology has the potential to make that happen.</p>","outputFile":"/blog/on2-google-open-video.html","html":"<p>Google is buying On2 technologies. Why does this matter?</p><p>Open video. Period.</p><p>What do I mean? In 2004 the On2 VP6 codec was selected for use as the Flash 8 video codec. So many of the FLV files playing on the web today are compressed using On2&rsquo;s technology. Since then they&rsquo;ve also released another generation of codec called VP7 (they need better names). What you have to understand about these compression technologies from a technical standpoint is that they&rsquo;re freakin&rsquo; voodoo! From my own experience working with VP6 several years ago when I built <a href=http://www.houseflix.com>HouseFLIX.com</a>, I was completely dumbfounded at the minimal file sizes that could be produced. Our 3 minute video tours were rarely more than 12 or 13MB and the quality was still looked pretty decent in full-screen mode. I once connected it to a 63&quot; tv and blew it up to full size. It still looked good!</p><p>What is Google big mo these days? Open web. They want to make the web into a viable alternative platform to a traditional OS. Therefore, they&rsquo;re pushing non-proprietary web technologies forward in order to make web-based applications a more compelling alternative to their desktop counterparts. I would be very surprised if they didn&rsquo;t turn around and open source some of these technologies from On2 so that all of us eager HTML5 developers would have good codec options for use in our <code>&lt;video&gt;</code> tags. If the web is going to be ready to be a replacement for desktop applications by the time Google releases <a href=http://googleblog.blogspot.com/2009/07/introducing-google-chrome-os.html>Chrome OS</a> next fall, some really good, non-proprietary video options are a necessity. I think On2&rsquo;s technology has the potential to make that happen.</p>","preview":"<p>Google is buying On2 technologies. Why does this matter?</p><p>Open video. Period.</p><p>What do I mean? In 2004 the On2 VP6 codec was selected for use as the Flash 8 video codec. So many of the FLV files playing on the web today are compressed using On2&rsquo;s technology. Since then they&rsquo;ve also released another generation of codec called VP7 (they need better names). What you have to understand about these compression technologies from a technical standpoint is that they&rsquo;re freakin&rsquo; voodoo! From my own experience working with VP6 several years ago when I built <a href=http://www.houseflix.com>HouseFLIX.com</a>, I was completely dumbfounded at the minimal file sizes that could be produced. Our 3 minute video tours were rarely more than 12 or 13MB and the quality was still looked pretty decent in full-screen mode. I once connected it to a 63&quot; tv and blew it up to full size. It still looked good!</p>"},{"slug":"webkit-css-animations","type":"text","date":"2009-08-07T02:27:00.000Z","title":"Playing around with CSS animations in WebKit","old_url":"http://joreteg.com/post/157587869/webkit-css-animations","url":"/blog/webkit-css-animations","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/webkit-css-animations.html","markdown":"<p>NOTE: This will only work on webkit based browsers like <a href=\"http://www.apple.com/safari\">Safari</a> or <a href=\"http://www.google.com/chrome\">Chrome</a>.</p>\n\n<p>If you mouse over the blue &ldquo;RSS&rdquo; button below (which conveniently happens to be a link to my blog feed). You should see something cool.\n<style>\na#rss_demo_button {\n    width: 43px;\n    height: 23px;\n    margin: 30px 200px;\n    font-size: 18px;\n    background: #6498CC;\n    color: white;\n    padding: 5px 3px;\n    line-height: 23px;\n    text-decoration: none;\n    text-align: center;\n    position: absolute;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    -webkit-transition: all 2s ease-out;\n}\na#rss_demo_button:hover, a#rss_demo_button:focus {\n    -webkit-transform: scale(1.50) rotate(-360deg);\n}\ndiv#demo_container {\n    width:100%;\n    height: 100px;\n}\n</style></p>\n\n<div id=\"demo_container\"><a href=\"http://feeds.feedburner.com/joretegdotcom\" id=\"rss_demo_button\">RSS</a></div>\n\n<p>You should see the button spin and zoom when you mouse over. A bit corny, yes, but the cool thing is that it&rsquo;s done with absolutely zero JavaScript. It&rsquo;s all CSS!</p>\n\n<p>It may seem pointless just because only webkit browsers support it. But it&rsquo;s actually something you can use as a <a href=\"http://en.wikipedia.org/wiki/Progressive_enhancement\">progressive enhancement</a> since other browsers will just ignore it.</p>\n\n<p>The magic all happens in the following two lines:</p>\n\n<pre><code>a#rss_demo_button{\n    position:absolute;\n    -webkit-transition: all 2s ease-out;\n}\na#rss_demo_button:hover, a#rss_demo_button:focus {\n    -webkit-transform: scale(1.50) rotate(-360deg);\n}\n</code></pre>\n\n<p>The <code>-webkit-trasition</code> sets how transformations will take place, and the second statement adds the transformation effect on <code>focus</code> and <code>hover</code>. I&rsquo;m still digging deeper into all of this, so right now that&rsquo;s all I&rsquo;ve got. But play around with it, there&rsquo;s a lot more that can be done with this stuff. If you&rsquo;ve done something cool with it. Throw a link in the comments.</p>","outputFile":"/blog/webkit-css-animations.html","html":"<p>NOTE: This will only work on webkit based browsers like <a href=http://www.apple.com/safari>Safari</a> or <a href=http://www.google.com/chrome>Chrome</a>.</p><p>If you mouse over the blue &ldquo;RSS&rdquo; button below (which conveniently happens to be a link to my blog feed). You should see something cool.<style>\na#rss_demo_button {\n    width: 43px;\n    height: 23px;\n    margin: 30px 200px;\n    font-size: 18px;\n    background: #6498CC;\n    color: white;\n    padding: 5px 3px;\n    line-height: 23px;\n    text-decoration: none;\n    text-align: center;\n    position: absolute;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    -webkit-transition: all 2s ease-out;\n}\na#rss_demo_button:hover, a#rss_demo_button:focus {\n    -webkit-transform: scale(1.50) rotate(-360deg);\n}\ndiv#demo_container {\n    width:100%;\n    height: 100px;\n}\n</style></p><div id=demo_container><a href=http://feeds.feedburner.com/joretegdotcom id=rss_demo_button>RSS</a></div><p>You should see the button spin and zoom when you mouse over. A bit corny, yes, but the cool thing is that it&rsquo;s done with absolutely zero JavaScript. It&rsquo;s all CSS!</p><p>It may seem pointless just because only webkit browsers support it. But it&rsquo;s actually something you can use as a <a href=http://en.wikipedia.org/wiki/Progressive_enhancement>progressive enhancement</a> since other browsers will just ignore it.</p><p>The magic all happens in the following two lines:</p><pre><code>a#rss_demo_button{\n    position:absolute;\n    -webkit-transition: all 2s ease-out;\n}\na#rss_demo_button:hover, a#rss_demo_button:focus {\n    -webkit-transform: scale(1.50) rotate(-360deg);\n}\n</code></pre><p>The <code>-webkit-trasition</code> sets how transformations will take place, and the second statement adds the transformation effect on <code>focus</code> and <code>hover</code>. I&rsquo;m still digging deeper into all of this, so right now that&rsquo;s all I&rsquo;ve got. But play around with it, there&rsquo;s a lot more that can be done with this stuff. If you&rsquo;ve done something cool with it. Throw a link in the comments.</p>","preview":"<p>NOTE: This will only work on webkit based browsers like <a href=http://www.apple.com/safari>Safari</a> or <a href=http://www.google.com/chrome>Chrome</a>.</p><p>If you mouse over the blue &ldquo;RSS&rdquo; button below (which conveniently happens to be a link to my blog feed). You should see something cool.<style>\na#rss_demo_button {\n    width: 43px;\n    height: 23px;\n    margin: 30px 200px;\n    font-size: 18px;\n    background: #6498CC;\n    color: white;\n    padding: 5px 3px;\n    line-height: 23px;\n    text-decoration: none;\n    text-align: center;\n    position: absolute;\n    -moz-border-radius: 3px;\n    -webkit-border-radius: 3px;\n    -webkit-transition: all 2s ease-out;\n}\na#rss_demo_button:hover, a#rss_demo_button:focus {\n    -webkit-transform: scale(1.50) rotate(-360deg);\n}\ndiv#demo_container {\n    width:100%;\n    height: 100px;\n}\n</style></p><div id=demo_container><a href=http://feeds.feedburner.com/joretegdotcom id=rss_demo_button>RSS</a></div>"},{"slug":"youtube-in-html5","type":"text","date":"2009-08-06T02:14:32.000Z","title":"YouTube in HTML5","old_url":"http://joreteg.com/post/156826527/youtube-in-html5","url":"/blog/youtube-in-html5","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/08/youtube-in-html5.html","markdown":"<p>This has actually been online since the Google I/O conference a couple months ago, but it&rsquo;s a cool demo using the <code>&lt;video&gt;</code> tag for a YouTube video. The <code>&lt;video&gt;</code> tag is an awesome part of the up-and-coming HTML5 spec.</p>\n\n<p>You&rsquo;ll need either <a href=\"http://www.google.com/chrome\">Chrome</a>, <a href=\"http://www.firefox.com\">FireFox 3.5</a>, or <a href=\"http://www.apple.com/safari\">Safari</a> for it to work. It won&rsquo;t look much different than what you&rsquo;re used to, but the cool thing is that it&rsquo;s not using ANY proprietary software or video codecs and it&rsquo;s implemented without any plugins whatsoever. Cool stuff, check it out:</p>\n\n<p><a href=\"http://www.youtube.com/html5\">http://www.youtube.com/html5</a></p>","outputFile":"/blog/youtube-in-html5.html","html":"<p>This has actually been online since the Google I/O conference a couple months ago, but it&rsquo;s a cool demo using the <code>&lt;video&gt;</code> tag for a YouTube video. The <code>&lt;video&gt;</code> tag is an awesome part of the up-and-coming HTML5 spec.</p><p>You&rsquo;ll need either <a href=http://www.google.com/chrome>Chrome</a>, <a href=http://www.firefox.com>FireFox 3.5</a>, or <a href=http://www.apple.com/safari>Safari</a> for it to work. It won&rsquo;t look much different than what you&rsquo;re used to, but the cool thing is that it&rsquo;s not using ANY proprietary software or video codecs and it&rsquo;s implemented without any plugins whatsoever. Cool stuff, check it out:</p><p><a href=http://www.youtube.com/html5>http://www.youtube.com/html5</a></p>","preview":"<p>This has actually been online since the Google I/O conference a couple months ago, but it&rsquo;s a cool demo using the <code>&lt;video&gt;</code> tag for a YouTube video. The <code>&lt;video&gt;</code> tag is an awesome part of the up-and-coming HTML5 spec.</p><p>You&rsquo;ll need either <a href=http://www.google.com/chrome>Chrome</a>, <a href=http://www.firefox.com>FireFox 3.5</a>, or <a href=http://www.apple.com/safari>Safari</a> for it to work. It won&rsquo;t look much different than what you&rsquo;re used to, but the cool thing is that it&rsquo;s not using ANY proprietary software or video codecs and it&rsquo;s implemented without any plugins whatsoever. Cool stuff, check it out:</p>"},{"slug":"seth-godin-quote-buy-assets","type":"quote","date":"2009-07-31T00:04:31.000Z","old_url":"http://joreteg.com/post/152566508/seth-godin-quote-buy-assets","title":"Organize to win","url":"/blog/seth-godin-quote-buy-assets","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/seth-godin-quote-buy-assets.html","markdown":"<blockquote>Organize to win. To do anything else is a waste of your time, your talent and your momentum. Ignore apparent risk, buy the assets you need to matter, avoid the compromises that your competitors have made and do something worth doing.</blockquote>\n<a href=\"http://sethgodin.typepad.com/seths_blog/2009/07/win-place-or-show.html\">Seth Godin</a> (via <a href=\"http://www.davidkaneda.com/\">davidkaneda</a>)","outputFile":"/blog/seth-godin-quote-buy-assets.html","html":"<p><blockquote>Organize to win. To do anything else is a waste of your time, your talent and your momentum. Ignore apparent risk, buy the assets you need to matter, avoid the compromises that your competitors have made and do something worth doing.</blockquote><a href=http://sethgodin.typepad.com/seths_blog/2009/07/win-place-or-show.html>Seth Godin</a> (via <a href=\"http://www.davidkaneda.com/\">davidkaneda</a>)</p>","preview":"<p><blockquote>Organize to win. To do anything else is a waste of your time, your talent and your momentum. Ignore apparent risk, buy the assets you need to matter, avoid the compromises that your competitors have made and do something worth doing.</blockquote><a href=http://sethgodin.typepad.com/seths_blog/2009/07/win-place-or-show.html>Seth Godin</a> (via <a href=\"http://www.davidkaneda.com/\">davidkaneda</a>)</p>"},{"slug":"involuntary-car-wash","type":"video","date":"2009-07-25T21:58:48.000Z","thumbnail_url":"https://i.ytimg.com/vi/3D8Tm1W7CoI/hqdefault.jpg","video_type":"youtube","title":"Involuntary Car Wash","old_url":"http://joreteg.com/post/149089126/involuntary-car-wash","url":"/blog/involuntary-car-wash","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/involuntary-car-wash.html","markdown":"Involuntary Car Wash\n\n<iframe width=\"500\" height=\"375\"  id=\"youtube_iframe\" src=\"https://www.youtube.com/embed/3D8Tm1W7CoI?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=\"0\" allowfullscreen></iframe>","outputFile":"/blog/involuntary-car-wash.html","html":"<p>Involuntary Car Wash</p><iframe width=500 height=375 id=youtube_iframe src=\"https://www.youtube.com/embed/3D8Tm1W7CoI?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>","preview":"<p>Involuntary Car Wash</p><iframe width=500 height=375 id=youtube_iframe src=\"https://www.youtube.com/embed/3D8Tm1W7CoI?feature=oembed&amp;enablejsapi=1&amp;origin=http://safe.txmblr.com&amp;wmode=opaque\" frameborder=0 allowfullscreen></iframe>"},{"slug":"laugh-at-yourself","type":"quote","date":"2009-07-25T06:48:04.000Z","old_url":"http://joreteg.com/post/148754263/laugh-at-yourself","title":"Laugh at yourself","url":"/blog/laugh-at-yourself","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/laugh-at-yourself.html","markdown":"<blockquote>When a person can no longer laugh at himself, it is time for others to laugh at him.</blockquote>\nThomas Szasz","outputFile":"/blog/laugh-at-yourself.html","html":"<p><blockquote>When a person can no longer laugh at himself, it is time for others to laugh at him.</blockquote>Thomas Szasz</p>","preview":"<p><blockquote>When a person can no longer laugh at himself, it is time for others to laugh at him.</blockquote>Thomas Szasz</p>"},{"slug":"using-a-skidding-car-to-create-a-font","type":"video","date":"2009-07-23T03:55:52.000Z","thumbnail_url":"https://i.vimeocdn.com/video/19091775_295x166.jpg","video_type":"vimeo","title":"Using a skidding car to create a font.","old_url":"http://joreteg.com/post/147267861/using-a-skidding-car-to-create-a-font","url":"/blog/using-a-skidding-car-to-create-a-font","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/using-a-skidding-car-to-create-a-font.html","markdown":"Using a skidding car to create a font. Interesting idea, unique marketing for Toyota and free font for you.\n\nYou can download the font from the Toyota site.\n\n<iframe src=\"https://player.vimeo.com/video/5233789?title=0&byline=0&portrait=0\" width=\"500\" height=\"281\" frameborder=\"0\" title=\"iQ font - When driving becomes writing / Full making of\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>","outputFile":"/blog/using-a-skidding-car-to-create-a-font.html","html":"<p>Using a skidding car to create a font. Interesting idea, unique marketing for Toyota and free font for you.</p><p>You can download the font from the Toyota site.</p><iframe src=\"https://player.vimeo.com/video/5233789?title=0&byline=0&portrait=0\" width=500 height=281 frameborder=0 title=\"iQ font - When driving becomes writing / Full making of\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>","preview":"<p>Using a skidding car to create a font. Interesting idea, unique marketing for Toyota and free font for you.</p><p>You can download the font from the Toyota site.</p><iframe src=\"https://player.vimeo.com/video/5233789?title=0&byline=0&portrait=0\" width=500 height=281 frameborder=0 title=\"iQ font - When driving becomes writing / Full making of\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>"},{"slug":"your-xhtml-efforts-are-wasted-use-html5-doctypes","type":"text","date":"2009-07-22T05:05:00.000Z","title":"Your XHTML efforts are (probably) wasted","old_url":"http://joreteg.com/post/146572148/your-xhtml-efforts-are-wasted-use-html5-doctypes","url":"/blog/your-xhtml-efforts-are-wasted-use-html5-doctypes","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/your-xhtml-efforts-are-wasted-use-html5-doctypes.html","markdown":"<p>So, last night I read <a href=\"http://www.zurb.com/article/282/doctypes-for-designers\">this blog post about starting to use the HTML 5 doctype</a>. That got me curious, because according to them it&rsquo;s perfectly fine to use the HTML 5 doctype which is gloriously simplified compared to other doctypes:</p>\n\n<p>HTML 5 looks like this:</p>\n\n<blockquote>\n  <p>&lt;!DOCTYPE html&gt;</p>\n</blockquote>\n\n<p>(X)HTML 1.0 Strict looks like this:</p>\n\n<blockquote>\n  <p>&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Strict//EN&rdquo;\n  &ldquo;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&rdquo;&gt;</p>\n</blockquote>\n\n<p>Clearly, the HTML 5 version is actually memorizable (not a word&hellip; but should be), where any other doctype I&rsquo;ve ever seen nearly brought tears to my eyes. So I&rsquo;ve done a fair amount of digging and reading and learned something very interesting:</p>\n\n<p>Tons and tons of web-developers, write XHTML compliant sites, but they still serve it using text/html mime-types which means, the browser treats it like plain &lsquo;ol html anyways!</p>\n\n<p>Here&rsquo;s the crux of the matter as described by <a href=\"http://webkit.org/blog/68/understanding-html-xml-and-xhtml/\">Maciej Stachowiak on the web-kit blog</a>:</p>\n\n<blockquote>\n  <p>So what really determines if a document is HTML or XHTML? The one and only thing that controls whether a document is HTML or XHTML is the MIME type. If the document is served with a text/html MIME type, it is treated as HTML. If it is served as application/xhtml+xml or text/xml, it gets treated as XHTML. In particular, none of the following things will cause your document to be treated as XHTML:</p>\n  \n  <ul><li>Using an XHTML doctype declaration</li>\n  <li>Putting an XML declaration at the top</li>\n  <li>Using XHTML-specific syntax like self-closing tags</li>\n  <li>Validating it as XHTML</li>\n  </ul><p>In fact, the vast majority of supposedly XHTML documents on the internet are served as text/html. Which means they are not XHTML at all, but actually invalid HTML that’s getting by on the error handling of HTML parsers. All those “Valid XHTML 1.0!” links on the web are really saying “Invalid HTML 4.01!”.</p>\n</blockquote>\n\n<p>So who cares?!? What should we do? Well, arguably, as long as it renders properly it doesn&rsquo;t really matter does it?!? But if you care, here&rsquo;s what I suggest:</p>\n\n<p>Either start serving your (X)HTML with the correct mime/type: application/xhtml+xml and deal with the fact that IE6 can&rsquo;t handle that. (not that I care too much about IE6)</p>\n\n<p>&hellip;OR&hellip;</p>\n\n<p>Change your doctype to match what you&rsquo;re actually serving up, which means switching your doctype back the HTML 4.01 Strict:</p>\n\n<blockquote>\n  <p>&lt;!DOCTYPE HTML PUBLIC &ldquo;-//W3C//DTD HTML 4.01//EN&rdquo; &ldquo;http://www.w3.org/TR/html4/strict.dtd&rdquo;&gt;</p>\n</blockquote>\n\n<p>&hellip;OR&hellip;</p>\n\n<p>Just do what <a href=\"https://developer.mozilla.org/en/Mozilla_Web_Developer_FAQ#xhtmldiff\">Mozilla&rsquo;s Web-Developer FAQ&rsquo;s</a> recommend and myself, <a href=\"http://google.com\">Google</a>, <a href=\"http://www.apple.com/safari/\">Apple</a> (in some cases) and <a href=\"http://aneventapart.com\">others</a> have started doing: <strong>just use the HTML 5 doctype!</strong> It puts everything into standards mode all the way back to IE6 and you don&rsquo;t really have to worry about copying funky doctypes ever again.</p>\n\n<p>Then, you can tell your XHTML junkie friends that they&rsquo;re on to something about accessibility and clean code, but unless they&rsquo;re serving in xml they&rsquo;re not actually gaining much of anything from their precious (X)HTML strict doctypes.</p>\n\n<p>I&rsquo;m not claiming to be the end-all expert. But I do my best to take well qualified advice. I consider the sources listed below and other example sites mentioned above to be <em>very</em> qualified. I hope this posts helps somebody who was as confused as I was.</p>\n\n<p>Here&rsquo;s all the relevant posts and documents that I referenced (all are worth reading):</p>\n\n<ul><li><a href=\"http://webkit.org/blog/68/understanding-html-xml-and-xhtml/\">The Webkit blog - Understanding HTML, XML and XHTML</a></li>\n<li><a href=\"http://www.b-list.org/weblog/2008/jun/21/xhtml/\">James Bennet&rsquo;s blog - Why HTML</a></li>\n<li><a href=\"http://www.b-list.org/weblog/2008/jun/21/xhtml/\">James Bennet&rsquo;s follow up post addressing criticisms to first post</a></li>\n<li><a href=\"https://developer.mozilla.org/en/Mozilla_Web_Developer_FAQ#xhtmldiff\">Mozilla&rsquo;s web dev FAQ</a></li>\n<li><a href=\"http://keystonewebsites.com/articles/mime_type.php\">Ian Hickson W3C contributor discusses mime/types and xhtml</a></li>\n<li><a href=\"http://www.zurb.com/article/282/doctypes-for-designers\">Zurb Blog - Doctypes for designers</a></li>\n</ul><p>Other potentially interesting items:</p>\n\n<ul><li><a href=\"http://html5.validator.nu/\">Experimental HTML5 validator</a></li>\n</ul>","outputFile":"/blog/your-xhtml-efforts-are-wasted-use-html5-doctypes.html","html":"<p>So, last night I read <a href=http://www.zurb.com/article/282/doctypes-for-designers>this blog post about starting to use the HTML 5 doctype</a>. That got me curious, because according to them it&rsquo;s perfectly fine to use the HTML 5 doctype which is gloriously simplified compared to other doctypes:</p><p>HTML 5 looks like this:</p><blockquote><p>&lt;!DOCTYPE html&gt;</p></blockquote><p>(X)HTML 1.0 Strict looks like this:</p><blockquote><p>&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&rdquo;&gt;</p></blockquote><p>Clearly, the HTML 5 version is actually memorizable (not a word&hellip; but should be), where any other doctype I&rsquo;ve ever seen nearly brought tears to my eyes. So I&rsquo;ve done a fair amount of digging and reading and learned something very interesting:</p><p>Tons and tons of web-developers, write XHTML compliant sites, but they still serve it using text/html mime-types which means, the browser treats it like plain &lsquo;ol html anyways!</p><p>Here&rsquo;s the crux of the matter as described by <a href=\"http://webkit.org/blog/68/understanding-html-xml-and-xhtml/\">Maciej Stachowiak on the web-kit blog</a>:</p><blockquote><p>So what really determines if a document is HTML or XHTML? The one and only thing that controls whether a document is HTML or XHTML is the MIME type. If the document is served with a text/html MIME type, it is treated as HTML. If it is served as application/xhtml+xml or text/xml, it gets treated as XHTML. In particular, none of the following things will cause your document to be treated as XHTML:</p><ul><li>Using an XHTML doctype declaration</li><li>Putting an XML declaration at the top</li><li>Using XHTML-specific syntax like self-closing tags</li><li>Validating it as XHTML</li></ul><p>In fact, the vast majority of supposedly XHTML documents on the internet are served as text/html. Which means they are not XHTML at all, but actually invalid HTML that’s getting by on the error handling of HTML parsers. All those “Valid XHTML 1.0!” links on the web are really saying “Invalid HTML 4.01!”.</p></blockquote><p>So who cares?!? What should we do? Well, arguably, as long as it renders properly it doesn&rsquo;t really matter does it?!? But if you care, here&rsquo;s what I suggest:</p><p>Either start serving your (X)HTML with the correct mime/type: application/xhtml+xml and deal with the fact that IE6 can&rsquo;t handle that. (not that I care too much about IE6)</p><p>&hellip;OR&hellip;</p><p>Change your doctype to match what you&rsquo;re actually serving up, which means switching your doctype back the HTML 4.01 Strict:</p><blockquote><p>&lt;!DOCTYPE HTML PUBLIC &ldquo;-//W3C//DTD HTML 4.01//EN&rdquo; &ldquo;http://www.w3.org/TR/html4/strict.dtd&rdquo;&gt;</p></blockquote><p>&hellip;OR&hellip;</p><p>Just do what <a href=https://developer.mozilla.org/en/Mozilla_Web_Developer_FAQ#xhtmldiff>Mozilla&rsquo;s Web-Developer FAQ&rsquo;s</a> recommend and myself, <a href=http://google.com>Google</a>, <a href=\"http://www.apple.com/safari/\">Apple</a> (in some cases) and <a href=http://aneventapart.com>others</a> have started doing: <strong>just use the HTML 5 doctype!</strong> It puts everything into standards mode all the way back to IE6 and you don&rsquo;t really have to worry about copying funky doctypes ever again.</p><p>Then, you can tell your XHTML junkie friends that they&rsquo;re on to something about accessibility and clean code, but unless they&rsquo;re serving in xml they&rsquo;re not actually gaining much of anything from their precious (X)HTML strict doctypes.</p><p>I&rsquo;m not claiming to be the end-all expert. But I do my best to take well qualified advice. I consider the sources listed below and other example sites mentioned above to be <em>very</em> qualified. I hope this posts helps somebody who was as confused as I was.</p><p>Here&rsquo;s all the relevant posts and documents that I referenced (all are worth reading):</p><ul><li><a href=\"http://webkit.org/blog/68/understanding-html-xml-and-xhtml/\">The Webkit blog - Understanding HTML, XML and XHTML</a></li><li><a href=\"http://www.b-list.org/weblog/2008/jun/21/xhtml/\">James Bennet&rsquo;s blog - Why HTML</a></li><li><a href=\"http://www.b-list.org/weblog/2008/jun/21/xhtml/\">James Bennet&rsquo;s follow up post addressing criticisms to first post</a></li><li><a href=https://developer.mozilla.org/en/Mozilla_Web_Developer_FAQ#xhtmldiff>Mozilla&rsquo;s web dev FAQ</a></li><li><a href=http://keystonewebsites.com/articles/mime_type.php>Ian Hickson W3C contributor discusses mime/types and xhtml</a></li><li><a href=http://www.zurb.com/article/282/doctypes-for-designers>Zurb Blog - Doctypes for designers</a></li></ul><p>Other potentially interesting items:</p><ul><li><a href=\"http://html5.validator.nu/\">Experimental HTML5 validator</a></li></ul>","preview":"<p>So, last night I read <a href=http://www.zurb.com/article/282/doctypes-for-designers>this blog post about starting to use the HTML 5 doctype</a>. That got me curious, because according to them it&rsquo;s perfectly fine to use the HTML 5 doctype which is gloriously simplified compared to other doctypes:</p>"},{"slug":"using-html5-canvas-draw-polar-clock-in-javascript-demo","type":"text","date":"2009-07-12T21:33:00.000Z","title":"Building a Polar Clock imitation using the canvas tag and javascript","old_url":"http://joreteg.com/post/140356005/using-html5-canvas-draw-polar-clock-in-javascript-demo","url":"/blog/using-html5-canvas-draw-polar-clock-in-javascript-demo","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/using-html5-canvas-draw-polar-clock-in-javascript-demo.html","markdown":"<p>I&rsquo;ve recently started playing around with some of the stuff that is available in HTML 5. It&rsquo;s pretty sweet, I can&rsquo;t wait until more web developers start building stuff with these new technologies. We desperately need a killer app like <a href=\"http://www.facebook.com\">facebook</a> to start using HTML 5 elements and asking users to upgrade. That would either force IE to join the ranks of modern browsers and actually start supporting some of this stuff or make people upgrade to a modern browser like <a href=\"http://www.google.com/chrome\">Chrome</a>, <a href=\"http://www.firefox.com\">FireFox</a>, <a href=\"http://www.apple.com/safari\">Safari</a>, or <a href=\"http://www.opera.com\">Opera</a>.</p>\n\n<p>Enough of the rant&hellip; on to the demo:</p>\n\n<p><canvas id=\"clockCanvas\" height=\"400\" width=\"400\"></canvas></p>\n\n<p>To see this you need a modern browser that supports the &lt;canvas&gt; tag such as <a href=\"http://www.google.com/chrome\">Chrome</a>, <a href=\"http://www.firefox.com\">FireFox</a>, <a href=\"http://www.apple.com/safari/\">Safari</a> or <a href=\"http://www.opera.com\">Opera</a></p>\n\n\n\n<script type=\"text/javascript\">\n    function clock(){\n        // get current time from client\n        var now = new Date();\n        \n        // get 2D context from the canvas element\n        var ctx = document.getElementById('clockCanvas').getContext('2d');\n        \n        // You'll see a save and restore all over the place. These are because we\n        // are redrawing the entire image every time, so we have to save the existing\n        // state of the canvas and then add our other shape and then restore what we \n        // saved.\n        ctx.save();\n        ctx.clearRect(0,0,400,400);\n        ctx.translate(200,200);\n        ctx.scale(1,1);\n        // this rotates the canvas so that the arcs we draw will start at the middle\n        // top rather than horizontally.\n        ctx.rotate(-Math.PI/2);\n        // sets the width of all lines we're going to draw\n        ctx.lineWidth = 17;\n        // gives our lines a rounded edge.\n        // it also supports \"butt\" and \"square\"\n        ctx.lineCap = \"round\";\n        \n        // I wanted to get a smooth movement so I'm basing all time measurments off\n        // of the millisecond and building partial seconds and minutes by adding the\n        // smaller increment to the larger one. For example getting current millisecond\n        // count and adding that to the current second to build a partial second.\n        var milliSec = now.getMilliseconds();         \n        var sec = now.getSeconds();\n        sec = milliSec/1000+sec;\n        var min = now.getMinutes();\n        min = sec/60 + min;\n        // this is a 24 hour clock\n        var hr  = now.getHours();\n        // if you uncomment the following line, it'd become a 12 hour clock.\n        // hr = hr>=12 ? hr-12 : hr;\n        hr = min/60 + hr;\n        var dow = now.getDay() + 1;\n        var day = now.getDate();\n        var month = now.getMonth() + 1;\n        \n        // turn times into percentages\n        var secPer = sec/60;\n        var minPer = min/60;\n        // if you wanted a 12 hour clock, you'd have to change this to 12 too.\n        var hrPer = hr/24;\n        var dowPer = dow/7;\n        var monthPer = month/12;\n        var dayPer = 0;\n        \n        // handles the fact that there are different amount of total days in different months\n        if (month == 2){\n            dayPer = day/29;\n        }\n        else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n            dayPer = day/31;\n        }\n        else {\n            dayPer = day/30;\n        }   \n        \n        // call the functions that draw each arc and pass in the radius of the circle we want\n        // and the calculated percentages from above.\n        writeTime(ctx,40,monthPer);\n        writeTime(ctx,60,dayPer);\n        writeTime(ctx,80,dowPer);\n        writeTime(ctx,100,hrPer);\n        writeTime(ctx,120,minPer);\n        writeTime(ctx,140,secPer);\n        \n        ctx.restore();\n    }\n    \n    // draws arcs and sets color based on percentages\n    function writeTime(ctx,radius,per){\n        ctx.save();\n        ctx.strokeStyle = calculateColor(per);\n        ctx.beginPath();\n        partialCircle(ctx,0,0,radius,per);\n        ctx.stroke();\n        ctx.restore();  \n    }   \n    \n    // turns a percentage into an RGB color string\n    function calculateColor(per){\n        var brightness = 255;\n        var red = 0;\n        var green = 0;\n        var blue = 0;\n        \n        blue = per * brightness;\n        green = brightness - blue;\n        \n        result = 'rgba('+ Math.round(red) + ',' + Math.round(green) + ',' + Math.round(blue) + ',1)';\n        return result;\n    }\n    \n    // helper function for partial circles          \n    function partialCircle(ctx,x,y,rad,percentage){\n        ctx.arc(x,y,rad,0,percentage*(Math.PI*2),false);\n        return ctx;\n    }\n    \n    // call the function repeatedly. 66 is the equivalent of about 15 frames per second\n    // this seemed enough to make the animation look smooth look without overdoing it.\n    setInterval(clock,66);\n</script><p>The <code>&lt;canvas&gt;</code> tag is just a blank slate that you can draw on with Javascript. Currently it only has a 2D context, but Google is promoting and open source 3D context called O3D that I hope will become the standard for 3D rendering in browsers. It would open the browser up to building full 3D games and other complex 3D rendering. It&rsquo;s currently available as a plugin, but the idea is to integrate it into all modern browsers as an open standard. If you haven&rsquo;t heard about it, or want to learn more you can <a href=\"http://code.google.com/apis/o3d/\">check out some O3D samples on Google Code</a>.</p>\n\n<p>This is my first real attempt at animations using canvas. For now, I&rsquo;m just using the 2D context. This is a simplified javascript imitation of my favorite screen saver: <a href=\"http://blog.pixelbreaker.com/polarclock/\">Polar Clock by Pixel Breaker</a> (free to download BTW). It&rsquo;s an alternative clock. The outside ring represents seconds, then minutes, hours, day of the week, day of the month, and then month. So far, it&rsquo;s pretty basic and not particularly useful or readable, but I did it more as an exercise.</p>\n\n<p>If you view source on this page you can see my heavily commented code to see what&rsquo;s going on. But if you really want to learn more <a href=\"https://developer.mozilla.org/en/Canvas_tutorial\">Mozilla has a great canvas tutorial</a> you might also wanna check out this <a href=\"http://blog.nihilogic.dk/2009/02/html5-canvas-cheat-sheet.html\"><code>&lt;canvas&gt;</code> cheat sheet by Jacob Seidelin</a>. If you&rsquo;re a web developer&hellip; start using this stuff! It&rsquo;s fun, it doesn&rsquo;t require plugins and I&rsquo;m sure you could build something waaaay cooler than this little demo. If you have any thoughts or suggestions, I&rsquo;m all ears.</p>","outputFile":"/blog/using-html5-canvas-draw-polar-clock-in-javascript-demo.html","html":"<p>I&rsquo;ve recently started playing around with some of the stuff that is available in HTML 5. It&rsquo;s pretty sweet, I can&rsquo;t wait until more web developers start building stuff with these new technologies. We desperately need a killer app like <a href=http://www.facebook.com>facebook</a> to start using HTML 5 elements and asking users to upgrade. That would either force IE to join the ranks of modern browsers and actually start supporting some of this stuff or make people upgrade to a modern browser like <a href=http://www.google.com/chrome>Chrome</a>, <a href=http://www.firefox.com>FireFox</a>, <a href=http://www.apple.com/safari>Safari</a>, or <a href=http://www.opera.com>Opera</a>.</p><p>Enough of the rant&hellip; on to the demo:</p><p><canvas id=clockCanvas height=400 width=400></canvas></p><p>To see this you need a modern browser that supports the &lt;canvas&gt; tag such as <a href=http://www.google.com/chrome>Chrome</a>, <a href=http://www.firefox.com>FireFox</a>, <a href=\"http://www.apple.com/safari/\">Safari</a> or <a href=http://www.opera.com>Opera</a></p><p><script type=text/javascript>\n    function clock(){\n        // get current time from client\n        var now = new Date();</p>\n<pre><code>    // get 2D context from the canvas element\n    var ctx = document.getElementById(&#39;clockCanvas&#39;).getContext(&#39;2d&#39;);\n\n    // You&#39;ll see a save and restore all over the place. These are because we\n    // are redrawing the entire image every time, so we have to save the existing\n    // state of the canvas and then add our other shape and then restore what we \n    // saved.\n    ctx.save();\n    ctx.clearRect(0,0,400,400);\n    ctx.translate(200,200);\n    ctx.scale(1,1);\n    // this rotates the canvas so that the arcs we draw will start at the middle\n    // top rather than horizontally.\n    ctx.rotate(-Math.PI/2);\n    // sets the width of all lines we&#39;re going to draw\n    ctx.lineWidth = 17;\n    // gives our lines a rounded edge.\n    // it also supports &quot;butt&quot; and &quot;square&quot;\n    ctx.lineCap = &quot;round&quot;;\n\n    // I wanted to get a smooth movement so I&#39;m basing all time measurments off\n    // of the millisecond and building partial seconds and minutes by adding the\n    // smaller increment to the larger one. For example getting current millisecond\n    // count and adding that to the current second to build a partial second.\n    var milliSec = now.getMilliseconds();         \n    var sec = now.getSeconds();\n    sec = milliSec/1000+sec;\n    var min = now.getMinutes();\n    min = sec/60 + min;\n    // this is a 24 hour clock\n    var hr  = now.getHours();\n    // if you uncomment the following line, it&#39;d become a 12 hour clock.\n    // hr = hr&gt;=12 ? hr-12 : hr;\n    hr = min/60 + hr;\n    var dow = now.getDay() + 1;\n    var day = now.getDate();\n    var month = now.getMonth() + 1;\n\n    // turn times into percentages\n    var secPer = sec/60;\n    var minPer = min/60;\n    // if you wanted a 12 hour clock, you&#39;d have to change this to 12 too.\n    var hrPer = hr/24;\n    var dowPer = dow/7;\n    var monthPer = month/12;\n    var dayPer = 0;\n\n    // handles the fact that there are different amount of total days in different months\n    if (month == 2){\n        dayPer = day/29;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        dayPer = day/31;\n    }\n    else {\n        dayPer = day/30;\n    }   \n\n    // call the functions that draw each arc and pass in the radius of the circle we want\n    // and the calculated percentages from above.\n    writeTime(ctx,40,monthPer);\n    writeTime(ctx,60,dayPer);\n    writeTime(ctx,80,dowPer);\n    writeTime(ctx,100,hrPer);\n    writeTime(ctx,120,minPer);\n    writeTime(ctx,140,secPer);\n\n    ctx.restore();\n}\n\n// draws arcs and sets color based on percentages\nfunction writeTime(ctx,radius,per){\n    ctx.save();\n    ctx.strokeStyle = calculateColor(per);\n    ctx.beginPath();\n    partialCircle(ctx,0,0,radius,per);\n    ctx.stroke();\n    ctx.restore();  \n}   \n\n// turns a percentage into an RGB color string\nfunction calculateColor(per){\n    var brightness = 255;\n    var red = 0;\n    var green = 0;\n    var blue = 0;\n\n    blue = per * brightness;\n    green = brightness - blue;\n\n    result = &#39;rgba(&#39;+ Math.round(red) + &#39;,&#39; + Math.round(green) + &#39;,&#39; + Math.round(blue) + &#39;,1)&#39;;\n    return result;\n}\n\n// helper function for partial circles          \nfunction partialCircle(ctx,x,y,rad,percentage){\n    ctx.arc(x,y,rad,0,percentage*(Math.PI*2),false);\n    return ctx;\n}\n\n// call the function repeatedly. 66 is the equivalent of about 15 frames per second\n// this seemed enough to make the animation look smooth look without overdoing it.\nsetInterval(clock,66);\n</code></pre><p></script></p><p>The <code>&lt;canvas&gt;</code> tag is just a blank slate that you can draw on with Javascript. Currently it only has a 2D context, but Google is promoting and open source 3D context called O3D that I hope will become the standard for 3D rendering in browsers. It would open the browser up to building full 3D games and other complex 3D rendering. It&rsquo;s currently available as a plugin, but the idea is to integrate it into all modern browsers as an open standard. If you haven&rsquo;t heard about it, or want to learn more you can <a href=\"http://code.google.com/apis/o3d/\">check out some O3D samples on Google Code</a>.</p><p></p><p>This is my first real attempt at animations using canvas. For now, I&rsquo;m just using the 2D context. This is a simplified javascript imitation of my favorite screen saver: <a href=\"http://blog.pixelbreaker.com/polarclock/\">Polar Clock by Pixel Breaker</a> (free to download BTW). It&rsquo;s an alternative clock. The outside ring represents seconds, then minutes, hours, day of the week, day of the month, and then month. So far, it&rsquo;s pretty basic and not particularly useful or readable, but I did it more as an exercise.</p><p>If you view source on this page you can see my heavily commented code to see what&rsquo;s going on. But if you really want to learn more <a href=https://developer.mozilla.org/en/Canvas_tutorial>Mozilla has a great canvas tutorial</a> you might also wanna check out this <a href=http://blog.nihilogic.dk/2009/02/html5-canvas-cheat-sheet.html><code>&lt;canvas&gt;</code> cheat sheet by Jacob Seidelin</a>. If you&rsquo;re a web developer&hellip; start using this stuff! It&rsquo;s fun, it doesn&rsquo;t require plugins and I&rsquo;m sure you could build something waaaay cooler than this little demo. If you have any thoughts or suggestions, I&rsquo;m all ears.</p>","preview":"<p>I&rsquo;ve recently started playing around with some of the stuff that is available in HTML 5. It&rsquo;s pretty sweet, I can&rsquo;t wait until more web developers start building stuff with these new technologies. We desperately need a killer app like <a href=http://www.facebook.com>facebook</a> to start using HTML 5 elements and asking users to upgrade. That would either force IE to join the ranks of modern browsers and actually start supporting some of this stuff or make people upgrade to a modern browser like <a href=http://www.google.com/chrome>Chrome</a>, <a href=http://www.firefox.com>FireFox</a>, <a href=http://www.apple.com/safari>Safari</a>, or <a href=http://www.opera.com>Opera</a>.</p>"},{"slug":"einstein-and-vegetarian-diet","type":"quote","date":"2009-07-12T01:48:00.000Z","old_url":"http://joreteg.com/post/139906166/einstein-and-vegetarian-diet","title":"Einstein on vegetarianism","url":"/blog/einstein-and-vegetarian-diet","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/einstein-and-vegetarian-diet.html","markdown":"<blockquote>Nothing will benefit human health and increase the chances for survival of life on Earth as much as the evolution to a vegetarian diet.</blockquote>\n<p>Albert Einstein</p>\n\n<p>I find it interesting that this quote came from Einstein. I love steak, but there are some serious global issues caused by the human infatuation with eating meat. Everything from potential farmland to feed the locals being used for cattle shipped overseas to methane levels and unsanitary-hormone-pumped cow factories.</p>\n\n<p>I&rsquo;ve considered going vegetarian for those reasons, but like many, I&rsquo;d have a really hard time knowing I&rsquo;d never eat another steak. I think, despite the fact that it&rsquo;s a bit creepy at first glance, there are huge potential benefits to lab grown flesh. Mark my words, that day is coming soon. <a href=\"http://www.google.com/search?q=lab+grown+meat\">Google lab grown meat</a> if you&rsquo;re curious. Would you eat it though? I would.</p>","outputFile":"/blog/einstein-and-vegetarian-diet.html","html":"<p><blockquote>Nothing will benefit human health and increase the chances for survival of life on Earth as much as the evolution to a vegetarian diet.</blockquote></p><p>Albert Einstein</p><p>I find it interesting that this quote came from Einstein. I love steak, but there are some serious global issues caused by the human infatuation with eating meat. Everything from potential farmland to feed the locals being used for cattle shipped overseas to methane levels and unsanitary-hormone-pumped cow factories.</p><p>I&rsquo;ve considered going vegetarian for those reasons, but like many, I&rsquo;d have a really hard time knowing I&rsquo;d never eat another steak. I think, despite the fact that it&rsquo;s a bit creepy at first glance, there are huge potential benefits to lab grown flesh. Mark my words, that day is coming soon. <a href=\"http://www.google.com/search?q=lab+grown+meat\">Google lab grown meat</a> if you&rsquo;re curious. Would you eat it though? I would.</p>","preview":"<p><blockquote>Nothing will benefit human health and increase the chances for survival of life on Earth as much as the evolution to a vegetarian diet.</blockquote></p><p>Albert Einstein</p><p>I find it interesting that this quote came from Einstein. I love steak, but there are some serious global issues caused by the human infatuation with eating meat. Everything from potential farmland to feed the locals being used for cattle shipped overseas to methane levels and unsanitary-hormone-pumped cow factories.</p>"},{"slug":"i-applied-as-contestant-to-wipeout","type":"text","date":"2009-07-11T05:43:35.000Z","title":"I just applied to be a contenstant on Wipeout","old_url":"http://joreteg.com/post/139476833/i-applied-as-contestant-to-wipeout","url":"/blog/i-applied-as-contestant-to-wipeout","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/07/i-applied-as-contestant-to-wipeout.html","markdown":"<p><img src=\"http://farm4.static.flickr.com/3468/3708466627_970e326c44_o.jpg\" alt=\"Wipeout logo\"/></p>\n\n<p>Yeah, so you know all those douchebags who fall on their faces on ABC&rsquo;s hit show &ldquo;Wipeout&rdquo;? That could be me! I&rsquo;ve never tried to apply for anything like this before, they had me fill out this whole long questionnaire about all kinds of stuff, such as specifying my skydiving skills on a scale of 1 to 7. It&rsquo;d be awesome if they picked me&hellip; probably won&rsquo;t happen, but I guess we&rsquo;ll see. Wish me luck!</p>","outputFile":"/blog/i-applied-as-contestant-to-wipeout.html","html":"<p><img src=http://farm4.static.flickr.com/3468/3708466627_970e326c44_o.jpg alt=\"Wipeout logo\"></p><p>Yeah, so you know all those douchebags who fall on their faces on ABC&rsquo;s hit show &ldquo;Wipeout&rdquo;? That could be me! I&rsquo;ve never tried to apply for anything like this before, they had me fill out this whole long questionnaire about all kinds of stuff, such as specifying my skydiving skills on a scale of 1 to 7. It&rsquo;d be awesome if they picked me&hellip; probably won&rsquo;t happen, but I guess we&rsquo;ll see. Wish me luck!</p>","preview":"<p><img src=http://farm4.static.flickr.com/3468/3708466627_970e326c44_o.jpg alt=\"Wipeout logo\"></p><p>Yeah, so you know all those douchebags who fall on their faces on ABC&rsquo;s hit show &ldquo;Wipeout&rdquo;? That could be me! I&rsquo;ve never tried to apply for anything like this before, they had me fill out this whole long questionnaire about all kinds of stuff, such as specifying my skydiving skills on a scale of 1 to 7. It&rsquo;d be awesome if they picked me&hellip; probably won&rsquo;t happen, but I guess we&rsquo;ll see. Wish me luck!</p>"},{"slug":"we-all-want-progress-cs-lewis","type":"quote","date":"2009-06-06T03:56:00.000Z","old_url":"http://joreteg.com/post/118787228/we-all-want-progress-cs-lewis","title":"We all want progress","url":"/blog/we-all-want-progress-cs-lewis","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/06/we-all-want-progress-cs-lewis.html","markdown":"<blockquote>We all want progress. But progress means getting nearer to the place you want to be. And if you have taken a wrong turning, then to go forward does not get you any nearer. If you are on the wrong road, progress means doing an about-turn and walking back to the right road; and in that case the man who turns back the soonest is the most progressive man.</blockquote>\nC.S. Lewis","outputFile":"/blog/we-all-want-progress-cs-lewis.html","html":"<p><blockquote>We all want progress. But progress means getting nearer to the place you want to be. And if you have taken a wrong turning, then to go forward does not get you any nearer. If you are on the wrong road, progress means doing an about-turn and walking back to the right road; and in that case the man who turns back the soonest is the most progressive man.</blockquote>C.S. Lewis</p>","preview":"<p><blockquote>We all want progress. But progress means getting nearer to the place you want to be. And if you have taken a wrong turning, then to go forward does not get you any nearer. If you are on the wrong road, progress means doing an about-turn and walking back to the right road; and in that case the man who turns back the soonest is the most progressive man.</blockquote>C.S. Lewis</p>"},{"slug":"is-microsoft-purposely-holding-back-the-web","type":"text","date":"2009-05-28T02:29:19.000Z","title":"Is Microsoft purposely holding back the web?","old_url":"http://joreteg.com/post/114081856/is-microsoft-purposely-holding-back-the-web","url":"/blog/is-microsoft-purposely-holding-back-the-web","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/05/is-microsoft-purposely-holding-back-the-web.html","markdown":"<p>Google keeps saying that they want to &ldquo;move the web forward&rdquo; is it possible that Microsoft is actually trying to &ldquo;hold the web back&rdquo;? The reason I bring this up is one word: motivation.</p>\n\n<p>Why would Microsoft <em>want</em> to move the web forward? Microsoft hasn&rsquo;t really figured out how make money on the web yet. In fact, many people would say that they have repeatedly failed at all things web-related. So one could argue, that it would be in Microsoft&rsquo;s best interest if people kept using desktop applications and just kept doing what they&rsquo;re doing. That is, buying a new computer (and the new Windows license that comes with it) every time their Windows installation gets bloated with spy-ware and various other crap-ware. That has worked for Microsoft for years, and they&rsquo;re struggling to find their role in the new &ldquo;open web&rdquo; model where so much is given away for free.</p>\n\n<p>So what power do they really have? Well, because of the success of Windows they still have the largest share of the browser market. Web developers can build amazing web applications with modern browser technology. However, in order to have wide appeal, they are often forced to build apps that conform to the lowest common browser denominator (which is almost always IE).</p>\n\n<p>Web developers have been pushing the limits of web-technologies for years; trying to re-create the &ldquo;feel&rdquo; and functionality of desktop applications within a browser. There have been some incredible advances in these areas, examples that come to mind are <a href=\"https://bespin.mozilla.com/\">Mozilla&rsquo;s Bespin</a>, <a href=\"http://docs.google.com\">Google Docs</a>, <a href=\"http://www.zoho.com\">Zoho&rsquo;s office tools</a>, <a href=\"https://www.photoshop.com/express/landing.html\">Adobe&rsquo;s Photoshop Express</a>, and <a href=\"http://www.picnik.com/\">picnik</a>. Also, if you want to be blown away by what can be done in a browser head over to <a href=\"http://www.chromeexperiments.com\">ChromeExperiements.com</a></p>\n\n<p>However, much of the added &ldquo;zing&rdquo; needed to make web applications really seem comparable to desktop apps requires use of some of the more progressive web technologies that will be available in the yet-to-be-completely-defined standards of HTML 5. But, all other major browsers such as <a href=\"http://www.firefox.com\">FireFox</a>, <a href=\"http://www.google.com/chrome\">Chrome</a>, <a href=\"http://www.apple.com/safari/\">Safari</a>, and <a href=\"http://www.opera.com\">Opera</a> are already implementing some of the more powerful features of HTML 5 such as the &ldquo;canvas&rdquo; tag that enable some of the most impressive web applications, like the aforementioned <a href=\"https://bespin.mozilla.com/\">Bespin</a> (a web based IDE for coders).</p>\n\n<p>Given the fact that Microsoft has had very limited success on the web, is it really such a stretch to imagine that they would use their position in the browser market to slow down that transition?</p>\n\n<p>Are they doing it on purpose? Who knows. Are they slowing down the evolution of the web? No doubt.</p>\n\n<p>What do you think?</p>","outputFile":"/blog/is-microsoft-purposely-holding-back-the-web.html","html":"<p>Google keeps saying that they want to &ldquo;move the web forward&rdquo; is it possible that Microsoft is actually trying to &ldquo;hold the web back&rdquo;? The reason I bring this up is one word: motivation.</p><p>Why would Microsoft <em>want</em> to move the web forward? Microsoft hasn&rsquo;t really figured out how make money on the web yet. In fact, many people would say that they have repeatedly failed at all things web-related. So one could argue, that it would be in Microsoft&rsquo;s best interest if people kept using desktop applications and just kept doing what they&rsquo;re doing. That is, buying a new computer (and the new Windows license that comes with it) every time their Windows installation gets bloated with spy-ware and various other crap-ware. That has worked for Microsoft for years, and they&rsquo;re struggling to find their role in the new &ldquo;open web&rdquo; model where so much is given away for free.</p><p>So what power do they really have? Well, because of the success of Windows they still have the largest share of the browser market. Web developers can build amazing web applications with modern browser technology. However, in order to have wide appeal, they are often forced to build apps that conform to the lowest common browser denominator (which is almost always IE).</p><p>Web developers have been pushing the limits of web-technologies for years; trying to re-create the &ldquo;feel&rdquo; and functionality of desktop applications within a browser. There have been some incredible advances in these areas, examples that come to mind are <a href=\"https://bespin.mozilla.com/\">Mozilla&rsquo;s Bespin</a>, <a href=http://docs.google.com>Google Docs</a>, <a href=http://www.zoho.com>Zoho&rsquo;s office tools</a>, <a href=https://www.photoshop.com/express/landing.html>Adobe&rsquo;s Photoshop Express</a>, and <a href=\"http://www.picnik.com/\">picnik</a>. Also, if you want to be blown away by what can be done in a browser head over to <a href=http://www.chromeexperiments.com>ChromeExperiements.com</a></p><p>However, much of the added &ldquo;zing&rdquo; needed to make web applications really seem comparable to desktop apps requires use of some of the more progressive web technologies that will be available in the yet-to-be-completely-defined standards of HTML 5. But, all other major browsers such as <a href=http://www.firefox.com>FireFox</a>, <a href=http://www.google.com/chrome>Chrome</a>, <a href=\"http://www.apple.com/safari/\">Safari</a>, and <a href=http://www.opera.com>Opera</a> are already implementing some of the more powerful features of HTML 5 such as the &ldquo;canvas&rdquo; tag that enable some of the most impressive web applications, like the aforementioned <a href=\"https://bespin.mozilla.com/\">Bespin</a> (a web based IDE for coders).</p><p>Given the fact that Microsoft has had very limited success on the web, is it really such a stretch to imagine that they would use their position in the browser market to slow down that transition?</p><p>Are they doing it on purpose? Who knows. Are they slowing down the evolution of the web? No doubt.</p><p>What do you think?</p>","preview":"<p>Google keeps saying that they want to &ldquo;move the web forward&rdquo; is it possible that Microsoft is actually trying to &ldquo;hold the web back&rdquo;? The reason I bring this up is one word: motivation.</p><p>Why would Microsoft <em>want</em> to move the web forward? Microsoft hasn&rsquo;t really figured out how make money on the web yet. In fact, many people would say that they have repeatedly failed at all things web-related. So one could argue, that it would be in Microsoft&rsquo;s best interest if people kept using desktop applications and just kept doing what they&rsquo;re doing. That is, buying a new computer (and the new Windows license that comes with it) every time their Windows installation gets bloated with spy-ware and various other crap-ware. That has worked for Microsoft for years, and they&rsquo;re struggling to find their role in the new &ldquo;open web&rdquo; model where so much is given away for free.</p>"},{"slug":"the-new-google-search-options","type":"text","date":"2009-05-15T14:07:47.000Z","title":"Google Search Options","old_url":"http://joreteg.com/post/108176107/the-new-google-search-options","url":"/blog/the-new-google-search-options","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/05/the-new-google-search-options.html","markdown":"<p>There&rsquo;s been a lot of talk recently about how <a href=\"http://search.twitter.com\">twitter&rsquo;s search</a> will impact the search industry, mainly because of the &ldquo;real-time&rdquo;, &ldquo;as-it&rsquo;s-happening&rdquo; aspect of it that hasn&rsquo;t been available in Google.</p>\n\n<p>Well, a couple days ago, Google released some search improvements of their own. Say hello to &ldquo;search options&rdquo;:</p>\n\n<p><img src=\"http://farm4.static.flickr.com/3325/3533684696_d61be11618.jpg\" alt=\"screenshot of Google Search Options\"/></p>\n\n<p>They introduce several new filtering options, most notably (IMO), the ability to filter by &ldquo;recency&rdquo;. I gave it a quick try by Googling my name and selecting &ldquo;Past 24 hours&rdquo;:</p>\n\n<p><img src=\"http://farm3.static.flickr.com/2429/3533684754_d56e259d4b.jpg\" alt=\"screen shot of recent search for Henrik Joreteg\"/></p>\n\n<p>It wasn&rsquo;t too bad. It included one (of several) Twitter posts from last night, a comment on a Friend Feed post, and my friend <a href=\"http://www.joshhighland.com\">Josh Highland&rsquo;s</a> blog post from yesterday, who has me in his blog roll.</p>\n\n<p>I&rsquo;m guessing with time, the accuracy and completeness of these more recent results will improve. So far, though, it wasn&rsquo;t too bad. Finally, Google added a few other features that are probably more fun than useful like the &ldquo;Wonder Wheel&rdquo; option that displays a visuallization of related searches and lets you quickly switch from one to the other:</p>\n\n<p><img src=\"http://farm3.static.flickr.com/2077/3533684722_0223099e52.jpg\" alt=\"screen shot of Google's new Wonder Wheel\"/></p>\n\n<p>So far, I&rsquo;m a fan and I plan on leaving this option turned on. Have you tried search options? What are your reactions?</p>","outputFile":"/blog/the-new-google-search-options.html","html":"<p>There&rsquo;s been a lot of talk recently about how <a href=http://search.twitter.com>twitter&rsquo;s search</a> will impact the search industry, mainly because of the &ldquo;real-time&rdquo;, &ldquo;as-it&rsquo;s-happening&rdquo; aspect of it that hasn&rsquo;t been available in Google.</p><p>Well, a couple days ago, Google released some search improvements of their own. Say hello to &ldquo;search options&rdquo;:</p><p><img src=http://farm4.static.flickr.com/3325/3533684696_d61be11618.jpg alt=\"screenshot of Google Search Options\"></p><p>They introduce several new filtering options, most notably (IMO), the ability to filter by &ldquo;recency&rdquo;. I gave it a quick try by Googling my name and selecting &ldquo;Past 24 hours&rdquo;:</p><p><img src=http://farm3.static.flickr.com/2429/3533684754_d56e259d4b.jpg alt=\"screen shot of recent search for Henrik Joreteg\"></p><p>It wasn&rsquo;t too bad. It included one (of several) Twitter posts from last night, a comment on a Friend Feed post, and my friend <a href=http://www.joshhighland.com>Josh Highland&rsquo;s</a> blog post from yesterday, who has me in his blog roll.</p><p>I&rsquo;m guessing with time, the accuracy and completeness of these more recent results will improve. So far, though, it wasn&rsquo;t too bad. Finally, Google added a few other features that are probably more fun than useful like the &ldquo;Wonder Wheel&rdquo; option that displays a visuallization of related searches and lets you quickly switch from one to the other:</p><p><img src=http://farm3.static.flickr.com/2077/3533684722_0223099e52.jpg alt=\"screen shot of Google's new Wonder Wheel\"></p><p>So far, I&rsquo;m a fan and I plan on leaving this option turned on. Have you tried search options? What are your reactions?</p>","preview":"<p>There&rsquo;s been a lot of talk recently about how <a href=http://search.twitter.com>twitter&rsquo;s search</a> will impact the search industry, mainly because of the &ldquo;real-time&rdquo;, &ldquo;as-it&rsquo;s-happening&rdquo; aspect of it that hasn&rsquo;t been available in Google.</p><p>Well, a couple days ago, Google released some search improvements of their own. Say hello to &ldquo;search options&rdquo;:</p>"},{"slug":"swine-flu-map","type":"text","date":"2009-05-01T00:09:00.000Z","title":"Track the swine flu on a map","old_url":"http://joreteg.com/post/102055366/swine-flu-map","url":"/blog/swine-flu-map","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/05/swine-flu-map.html","markdown":"<iframe width=\"600\" height=\"480\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" src=\"http://maps.google.com/maps/ms?ie=UTF8&amp;hl=en&amp;msa=0&amp;msid=109496610648025582911.0004686892fbefe515012&amp;source=embed&amp;ll=32.398516,-86.308594&amp;spn=35.272869,56.25&amp;z=4&amp;output=embed\"></iframe>\n\n<p>You can see a bigger version on <a href=\"http://maps.google.com/maps/ms?ie=UTF8&amp;hl=en&amp;msa=0&amp;msid=109496610648025582911.0004686892fbefe515012&amp;source=embed&amp;ll=37.0625,-95.677068&amp;spn=23.875,57.630033\">Google Maps</a></p>","outputFile":"/blog/swine-flu-map.html","html":"<iframe width=600 height=480 frameborder=0 scrolling=no marginheight=0 marginwidth=0 src=\"http://maps.google.com/maps/ms?ie=UTF8&amp;hl=en&amp;msa=0&amp;msid=109496610648025582911.0004686892fbefe515012&amp;source=embed&amp;ll=32.398516,-86.308594&amp;spn=35.272869,56.25&amp;z=4&amp;output=embed\"></iframe><p>You can see a bigger version on <a href=\"http://maps.google.com/maps/ms?ie=UTF8&amp;hl=en&amp;msa=0&amp;msid=109496610648025582911.0004686892fbefe515012&amp;source=embed&amp;ll=37.0625,-95.677068&amp;spn=23.875,57.630033\">Google Maps</a></p>","preview":"<iframe width=600 height=480 frameborder=0 scrolling=no marginheight=0 marginwidth=0 src=\"http://maps.google.com/maps/ms?ie=UTF8&amp;hl=en&amp;msa=0&amp;msid=109496610648025582911.0004686892fbefe515012&amp;source=embed&amp;ll=32.398516,-86.308594&amp;spn=35.272869,56.25&amp;z=4&amp;output=embed\"></iframe>"},{"slug":"adding-human-element-to-your-apps","type":"link","date":"2009-04-29T15:26:18.000Z","title":"Great tips on adding a human element to your sites/products/apps","url":"/blog/adding-human-element-to-your-apps","old_url":"http://joreteg.com/post/101484631/adding-human-element-to-your-apps","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/04/adding-human-element-to-your-apps.html","markdown":"<a href=\"http://www.lukew.com/ff/entry.asp?808\">http://www.lukew.com/ff/entry.asp?808</a>\n\n<p>This is form design guru <a href=\"http://www.lukew.com/ff/about.asp\">Luke Wroblewski&rsquo;s</a> summary of a talk given by Bill DeRouchey from the 2009 Wep App Summit in Newport Beach, CA.</p>\n\n<p>Simple, take-home tips for giving your apps a bit of much-needed personality. Too many apps are boring and &ldquo;stuffy&rdquo; make it personal, make it fun and people will like it.</p>","outputFile":"/blog/adding-human-element-to-your-apps.html","html":"<p><a href=http://www.lukew.com/ff/entry.asp?808>http://www.lukew.com/ff/entry.asp?808</a></p><p>This is form design guru <a href=http://www.lukew.com/ff/about.asp>Luke Wroblewski&rsquo;s</a> summary of a talk given by Bill DeRouchey from the 2009 Wep App Summit in Newport Beach, CA.</p><p>Simple, take-home tips for giving your apps a bit of much-needed personality. Too many apps are boring and &ldquo;stuffy&rdquo; make it personal, make it fun and people will like it.</p>","preview":"<p><a href=http://www.lukew.com/ff/entry.asp?808>http://www.lukew.com/ff/entry.asp?808</a></p><p>This is form design guru <a href=http://www.lukew.com/ff/about.asp>Luke Wroblewski&rsquo;s</a> summary of a talk given by Bill DeRouchey from the 2009 Wep App Summit in Newport Beach, CA.</p><p>Simple, take-home tips for giving your apps a bit of much-needed personality. Too many apps are boring and &ldquo;stuffy&rdquo; make it personal, make it fun and people will like it.</p>"},{"slug":"advances-confidently-in-direction-of-his-dream-thoreau","type":"quote","date":"2009-04-27T15:23:00.000Z","old_url":"http://joreteg.com/post/100684226/advances-confidently-in-direction-of-his-dream-thoreau","title":"If one advances confidently in the direction of his dreams...","url":"/blog/advances-confidently-in-direction-of-his-dream-thoreau","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/04/advances-confidently-in-direction-of-his-dream-thoreau.html","markdown":"\"\n...\n\n<blockquote>If one advances confidently in the direction of his dreams, and endeavors to live the life which he has imagined, he will meet with a success unexpected in common hours.</blockquote>\nHenry David Thoreau\n<br/>This is one my favorite quotes. I used to have it framed on my desk.","outputFile":"/blog/advances-confidently-in-direction-of-his-dream-thoreau.html","html":"<p>&quot; ...</p><p><blockquote>If one advances confidently in the direction of his dreams, and endeavors to live the life which he has imagined, he will meet with a success unexpected in common hours.</blockquote>Henry David Thoreau<br>This is one my favorite quotes. I used to have it framed on my desk.</p>","preview":"<p>&quot; ...</p><p><blockquote>If one advances confidently in the direction of his dreams, and endeavors to live the life which he has imagined, he will meet with a success unexpected in common hours.</blockquote>Henry David Thoreau<br>This is one my favorite quotes. I used to have it framed on my desk.</p>"},{"slug":"on-the-shortness-of-life-seneca","type":"quote","date":"2009-04-24T15:03:06.000Z","old_url":"http://joreteg.com/post/99674966/on-the-shortness-of-life-seneca","title":"Seneca on the shortness of life","url":"/blog/on-the-shortness-of-life-seneca","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/04/on-the-shortness-of-life-seneca.html","markdown":"<blockquote>They lose the day in expectation of the night, and the night in fear of the dawn&hellip;it&rsquo;s not that we have a short time to live, but that we waste a lot of it.</blockquote>\nTaken from &ldquo;On The Shortness of Life&rdquo; by the stoic philosopher Lucious Annaeus Seneca","outputFile":"/blog/on-the-shortness-of-life-seneca.html","html":"<p><blockquote>They lose the day in expectation of the night, and the night in fear of the dawn&hellip;it&rsquo;s not that we have a short time to live, but that we waste a lot of it.</blockquote>Taken from &ldquo;On The Shortness of Life&rdquo; by the stoic philosopher Lucious Annaeus Seneca</p>","preview":"<p><blockquote>They lose the day in expectation of the night, and the night in fear of the dawn&hellip;it&rsquo;s not that we have a short time to live, but that we waste a lot of it.</blockquote>Taken from &ldquo;On The Shortness of Life&rdquo; by the stoic philosopher Lucious Annaeus Seneca</p>"},{"slug":"philips-led-bulb","type":"photo","date":"2009-04-22T15:17:00.000Z","link_url":"http://www.lighting.philips.com/in_en/global_sites/led_lighting/products/master_led/product_range.php?main=gb_en&parent=1&id=in_en_led_lighting&lang=en","title":"Meet your future lightbulb.","old_url":"http://joreteg.com/post/98925051/philips-led-bulb","url":"/blog/philips-led-bulb","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/04/philips-led-bulb.html","markdown":"Meet your future lightbulb. This LED lasts 45,000 hours and is bright enough to replace a 40w bulb. I don&rsquo;t think you can buy them just yet though. LEDs are awesome and waaaay more enviromentally friendly because they don&rsquo;t contain mercury, like CFLs. Not to mention they last longer and consume a fraction of the energy.\n\n<img src=\"http://41.media.tumblr.com/wiTflIDkmkv0mhuneMA2JEfPo1_500.jpg\">\n\n<p>via: <a href=\"http://simplify.tumblr.com/post/84964834/via-davidkaneda\">simplify</a></p>","outputFile":"/blog/philips-led-bulb.html","html":"<p>Meet your future lightbulb. This LED lasts 45,000 hours and is bright enough to replace a 40w bulb. I don&rsquo;t think you can buy them just yet though. LEDs are awesome and waaaay more enviromentally friendly because they don&rsquo;t contain mercury, like CFLs. Not to mention they last longer and consume a fraction of the energy.</p><p><img src=http://41.media.tumblr.com/wiTflIDkmkv0mhuneMA2JEfPo1_500.jpg></p><p>via: <a href=http://simplify.tumblr.com/post/84964834/via-davidkaneda>simplify</a></p>","preview":"<p>Meet your future lightbulb. This LED lasts 45,000 hours and is bright enough to replace a 40w bulb. I don&rsquo;t think you can buy them just yet though. LEDs are awesome and waaaay more enviromentally friendly because they don&rsquo;t contain mercury, like CFLs. Not to mention they last longer and consume a fraction of the energy.</p>"},{"slug":"i-really-wish-more-people-understood-this-cartoon","type":"photo","date":"2009-04-22T06:18:17.000Z","title":"I really wish more people understood this cartoon. The world would be a better place.","old_url":"http://joreteg.com/post/98809092/i-really-wish-more-people-understood-this-cartoon","url":"/blog/i-really-wish-more-people-understood-this-cartoon","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/04/i-really-wish-more-people-understood-this-cartoon.html","markdown":"I really wish more people understood this cartoon. The world would be a better place.\n\n<img src=\"http://40.media.tumblr.com/kGrOdmtr7ml6hlugLgC9SKxbo1_500.jpg\">\n\n<p>Credit: <a href=\"http://www.xkcd.com\">www.xkcd.com</a></p>","outputFile":"/blog/i-really-wish-more-people-understood-this-cartoon.html","html":"<p>I really wish more people understood this cartoon. The world would be a better place.</p><p><img src=http://40.media.tumblr.com/kGrOdmtr7ml6hlugLgC9SKxbo1_500.jpg></p><p>Credit: <a href=http://www.xkcd.com>www.xkcd.com</a></p>","preview":"<p>I really wish more people understood this cartoon. The world would be a better place.</p><p><img src=http://40.media.tumblr.com/kGrOdmtr7ml6hlugLgC9SKxbo1_500.jpg></p><p>Credit: <a href=http://www.xkcd.com>www.xkcd.com</a></p>"},{"slug":"average-annual-vacation-days","type":"text","date":"2009-04-22T02:26:00.000Z","title":"Average Annual Vacation Days, USA v. World","old_url":"http://joreteg.com/post/98628454/average-annual-vacation-days","url":"/blog/average-annual-vacation-days","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/04/average-annual-vacation-days.html","markdown":"<p>It’s an interesting set of numbers and it says a lot about national values in the US. However, maybe our values need a second look:</p>\n\n<p>The following is an excerpt from the blog of Tim Ferris: <a href=\"http://www.fourhourworkweek.com/blog/the-truth/#_usa_world\">http://www.fourhourworkweek.com/blog/the-truth/#_usa_world</a></p>\n\n<hr><p>Average Annual Vacation Days</p>\n\n<table><tr><td>Italy</td><td>42</td></tr><tr><td>France</td><td>37</td></tr><tr><td>Germany</td><td>35</td></tr><tr><td>Brazil</td><td>34</td></tr><tr><td>Britain</td><td>28</td></tr><tr><td>Canada</td><td>26</td></tr><tr><td>Japan</td><td>25</td></tr><tr><td>USA</td><td>13</td></tr></table><p>Is it any wonder that US Bureau of Labor Statistics tracks just about everything but worker satisfaction?</p>\n\n<p>Americans work 137 more hours per year than Japanese workers, 260 more hours per year than British workers, and 499 more hours per year than French workers [22].</p>\n\n<p>The Japanese document approximately 10,000 cases per year of “death by overwork,” or karoosh [23]. Considering the above stats, what must the undocumented US numbers be??</p>\n\n<p>The US is the only nation in the industrialized world with no minimum paid-leave laws. European law provides each worker with 4-5 weeks per year of paid-leave.</p>\n\n<p>Nonetheless, Europe has had a higher productivity rate than the U.S. for 14 out of the 19 years between 1981 and 2000 [24]. More just isn’t better.</p>\n\n<hr><p>Thanks Tim! Keep up the good work!</p>","outputFile":"/blog/average-annual-vacation-days.html","html":"<p>It’s an interesting set of numbers and it says a lot about national values in the US. However, maybe our values need a second look:</p><p>The following is an excerpt from the blog of Tim Ferris: <a href=http://www.fourhourworkweek.com/blog/the-truth/#_usa_world>http://www.fourhourworkweek.com/blog/the-truth/#_usa_world</a></p><p><hr></p><p>Average Annual Vacation Days</p><p></p><p><table><tr><td>Italy</td><td>42</td></tr><tr><td>France</td><td>37</td></tr><tr><td>Germany</td><td>35</td></tr><tr><td>Brazil</td><td>34</td></tr><tr><td>Britain</td><td>28</td></tr><tr><td>Canada</td><td>26</td></tr><tr><td>Japan</td><td>25</td></tr><tr><td>USA</td><td>13</td></tr></table></p><p>Is it any wonder that US Bureau of Labor Statistics tracks just about everything but worker satisfaction?</p><p></p><p>Americans work 137 more hours per year than Japanese workers, 260 more hours per year than British workers, and 499 more hours per year than French workers [22].</p><p>The Japanese document approximately 10,000 cases per year of “death by overwork,” or karoosh [23]. Considering the above stats, what must the undocumented US numbers be??</p><p>The US is the only nation in the industrialized world with no minimum paid-leave laws. European law provides each worker with 4-5 weeks per year of paid-leave.</p><p>Nonetheless, Europe has had a higher productivity rate than the U.S. for 14 out of the 19 years between 1981 and 2000 [24]. More just isn’t better.</p><p><hr></p><p>Thanks Tim! Keep up the good work!</p><p></p>","preview":"<p>It’s an interesting set of numbers and it says a lot about national values in the US. However, maybe our values need a second look:</p><p>The following is an excerpt from the blog of Tim Ferris: <a href=http://www.fourhourworkweek.com/blog/the-truth/#_usa_world>http://www.fourhourworkweek.com/blog/the-truth/#_usa_world</a></p>"},{"slug":"make-firefox-start-faster","type":"text","date":"2009-03-23T07:00:00.000Z","title":"Make FireFox start faster","old_url":"http://joreteg.com/post/98752027/make-firefox-start-faster","url":"/blog/make-firefox-start-faster","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/03/make-firefox-start-faster.html","markdown":"<p>If you&rsquo;re more than just a casual web user and Firefox is your browser of choice&hellip; you may have noticed that it&rsquo;s gotten a bit sluggish at startup. This tip is for you.</p>\n\n<p>It&rsquo;s a very simple trick: simply reduce the number of days of history you save in FF. It&rsquo;s <strong>90</strong> by default! If you&rsquo;re a web-nut, (like yours truly) that&rsquo;s a <em>ridiculous</em> amount of history. Put your history at something like 5 days and you should see a significant improvement in start-up times.</p>\n\n<p>I read this on <a href=\"http://www.lifehacker.com\">lifehacker</a>, and it worked like a charm for me&hellip; thought I&rsquo;d pass it on.</p>","outputFile":"/blog/make-firefox-start-faster.html","html":"<p>If you&rsquo;re more than just a casual web user and Firefox is your browser of choice&hellip; you may have noticed that it&rsquo;s gotten a bit sluggish at startup. This tip is for you.</p><p>It&rsquo;s a very simple trick: simply reduce the number of days of history you save in FF. It&rsquo;s <strong>90</strong> by default! If you&rsquo;re a web-nut, (like yours truly) that&rsquo;s a <em>ridiculous</em> amount of history. Put your history at something like 5 days and you should see a significant improvement in start-up times.</p><p>I read this on <a href=http://www.lifehacker.com>lifehacker</a>, and it worked like a charm for me&hellip; thought I&rsquo;d pass it on.</p>","preview":"<p>If you&rsquo;re more than just a casual web user and Firefox is your browser of choice&hellip; you may have noticed that it&rsquo;s gotten a bit sluggish at startup. This tip is for you.</p><p>It&rsquo;s a very simple trick: simply reduce the number of days of history you save in FF. It&rsquo;s <strong>90</strong> by default! If you&rsquo;re a web-nut, (like yours truly) that&rsquo;s a <em>ridiculous</em> amount of history. Put your history at something like 5 days and you should see a significant improvement in start-up times.</p>"},{"slug":"review-mbk-homes-beaumont-ca","type":"text","date":"2009-03-16T07:00:00.000Z","title":"My review of MBK Medallion Homes in Beaumont, CA - Shady at best.","old_url":"http://joreteg.com/post/98751716/review-mbk-homes-beaumont-ca","url":"/blog/review-mbk-homes-beaumont-ca","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/03/review-mbk-homes-beaumont-ca.html","markdown":"<p>This weekend my wife and I were getting ready to buy a beautiful new home in the Medallion neighborhood from MBK homes in Beaumont, CA. We were excited, everything seemed great, it&rsquo;s a buyer&rsquo;s market so we were offered great incentives by the builder.</p>\n\n<p>But, something just wasn&rsquo;t right when we were negotiating. The sales rep Jim (James Zures)  was really insistent about us using their lender. I understand that it&rsquo;s far more convenient for them if we do. They&rsquo;re familiar with their lender&rsquo;s practices and they have had good experiences with them being able to close the deals on time. Also, if they have several homes being sold at the same time, it&rsquo;s far more convenient for them to get status updates from one lender instead of several different ones.</p>\n\n<p>They repeatedly told us that they have no financial relationship with the lender (because if they did that&rsquo;s illegal). Yet, they funny thing is that they were only willing to cover closing costs if we used their lender. In this case, they were going to cover up to the legal maximum of 6% or $12,000. If we didn&rsquo;t use their lender, we&rsquo;d get nothing. Obviously, that&rsquo;s a HUGE incentive. So, they were telling us, we have the option&hellip; but in reality you&rsquo;re way better off if you use our lender.</p>\n\n<p>To me, that&rsquo;s starting to sound a lot like a financial relationship. Sure, they&rsquo;re not paying the lender directly but they sure are steering business toward them with a heavy hand. Essentially, they are paying them through the customer. It&rsquo;s the builder&rsquo;s money, going into escrow (in our name) and then being directly applied to cover the loan fees. Now, this makes you wonder <strong>if there&rsquo;s no financial relationship, why would they care so much which lender we choose?</strong></p>\n\n<p>It gets more interesting, they wanted us to sign the purchase contract yesterday but we were not supposed to close on the house until the end of June because it wasn&rsquo;t built yet. But, we wouldn&rsquo;t get final loan terms until sometime at the end of May. That means, that as soon as we sign the purchase contract, our only options would be to use their lender and pay whatever rates and fees that they decide to charge, forfeit $12,000 in closing costs by using our lender, or forfeit our $5000 deposit! <strong>Not much of a choice if you ask me</strong>.</p>\n\n<p>I told them over and over again: &ldquo;I don&rsquo;t mind using your lender&hellip; I just want the option to go with another lender if I&rsquo;m not happy with the terms I&rsquo;m given.&rdquo; But, the more I said that, the more it sounded like it wasn&rsquo;t even an option.</p>\n\n<p>Because I believe in doing due diligence, I told Jim that I wanted to read over the contract. He was going to call his manager and check on something anyway so went out of his office for a while and brought the contract to look it over. I found the section about &ldquo;Choice of Lender.&rdquo; Turns out, the contract states that we can use our own lender. There were a few little hoops we had to jump through and a couple of forms to submit, but they legally have to give us the choice of using our own lender. When we went back to talk to Jim I pointed that out to him. He got all weird on us and then he was going to talk to his manager again.</p>\n\n<p>GET THIS. We come back in and now he&rsquo;s saying that the list price has jumped from $212,990 to about $340,000 and the only reason he quoted us $212,990 is because it supposedly included a $128,000 incentive for us to use their lender!!!! So now we went from a $12,000 incentive to over $120,000 incentive for using their lender. <strong>It became clear that we really did not have the choice of using our own lender.</strong> Ostensibly, we did, in reality they were not about to let us have that choice.</p>\n\n<p>I looked at Jim and said&hellip; &ldquo;What?!?! Now you&rsquo;re telling me the house price is $340,000 unless we use your lender?!?&rdquo;</p>\n\n<p>Jim: &ldquo;yes, we just hadn&rsquo;t gotten to that part yet. That&rsquo;s why we&rsquo;re going over the contract so we can answer all your questions.&rdquo;</p>\n\n<p>Me: &ldquo;You&rsquo;re telling me that if I walked in here with cash, you would tell me the house price was $340,000?!?! (easily more than $100,000 above current home prices in the neighborhood)&rdquo;</p>\n\n<p>Jim: &hellip;silence&hellip;</p>\n\n<p>Me: &ldquo;Jim, we&rsquo;re not doing that. Call your manager, whatever you need to do, but that&rsquo;s not happening!&rdquo;</p>\n\n<p>Then Holly and I left to get some lunch and talk it over. We couldn&rsquo;t believe what just happened. They were dead set on us using their lender and now they were saying that the price was $100,000 more if we didn&rsquo;t. <strong>WHAT A JOKE!!!</strong></p>\n\n<p>After talking for a bit, Holly and I decided that since we no longer trusted them, we were even more set on making sure we had the option. So I called him, here&rsquo;s how the conversation went:</p>\n\n<p>Me: &ldquo;Jim, what you did just now really damaged your credibility with us.&rdquo;</p>\n\n<p>Jim: &ldquo;&hellip;ok&rdquo;</p>\n\n<p>Me: &ldquo;We decided that unless you give us the same incentive with our lender, we&rsquo;re going home&rdquo;</p>\n\n<p>Jim: &ldquo;I can tell you right now, that&rsquo;s not happening, you may as well come and pick up your check&rdquo;</p>\n\n<p>Me: &ldquo;Ok, we will&hellip;bye&rdquo;</p>\n\n<p>Wow! We feel like we dodged a bullet. Imagine being committed to buying the house without knowing what the loan terms are going to be. At that point, what&rsquo;s stopping them from adding fees, giving you a higher interest rate or making up bogus fees before closing. They know you&rsquo;re stuck. The only way out is to lose your deposit. Ridiculous! We saw the price jump from $212,990 to well over $300,000 as soon as they realized we may not use their lender. That&rsquo;s dishonest (and probably illegal).</p>\n\n<p>I hope somebody from the California Department of Real Estate reads this. In fact, I thinking about reporting the incident and filing a formal complaint.</p>\n\n<p>My recommendation, don&rsquo;t work with them. This is not the kind of market where you let a seller push you into a corner. They talk about trust and integrity, but actions speak louder than words.</p>\n\n<p><strong>UPDATE 3/17/2009</strong>: I just found the following disclaimer in small print at the bottom of their website:</p>\n\n<p>&ldquo;Builder incentives have been used to lower the purchase price and is based on buyer closing with MBK Homes preferred lender. &rdquo;</p>\n\n<p>So apparently what they did to me was not anything unusual, it is STANDARD PRACTICE FOR THEM! That also means that the entire time I was asking Jim questions about using our lender and their incentives <em>he knew that the price was completely different if didn&rsquo;t use their lender</em>. Every time he mentioned the price he should have included that disclaimer but&hellip; <em>it never even came up</em> until we were nearly ready to sign the contract!</p>\n\n<p>Now I&rsquo;m really upset, I will be filing a complaint. James David Zures license number: 00609535 and MBK Southern California Residential Inc license number: 01304983 will soon have complaints on their records with the department of real estate.</p>","outputFile":"/blog/review-mbk-homes-beaumont-ca.html","html":"<p>This weekend my wife and I were getting ready to buy a beautiful new home in the Medallion neighborhood from MBK homes in Beaumont, CA. We were excited, everything seemed great, it&rsquo;s a buyer&rsquo;s market so we were offered great incentives by the builder.</p><p>But, something just wasn&rsquo;t right when we were negotiating. The sales rep Jim (James Zures) was really insistent about us using their lender. I understand that it&rsquo;s far more convenient for them if we do. They&rsquo;re familiar with their lender&rsquo;s practices and they have had good experiences with them being able to close the deals on time. Also, if they have several homes being sold at the same time, it&rsquo;s far more convenient for them to get status updates from one lender instead of several different ones.</p><p>They repeatedly told us that they have no financial relationship with the lender (because if they did that&rsquo;s illegal). Yet, they funny thing is that they were only willing to cover closing costs if we used their lender. In this case, they were going to cover up to the legal maximum of 6% or $12,000. If we didn&rsquo;t use their lender, we&rsquo;d get nothing. Obviously, that&rsquo;s a HUGE incentive. So, they were telling us, we have the option&hellip; but in reality you&rsquo;re way better off if you use our lender.</p><p>To me, that&rsquo;s starting to sound a lot like a financial relationship. Sure, they&rsquo;re not paying the lender directly but they sure are steering business toward them with a heavy hand. Essentially, they are paying them through the customer. It&rsquo;s the builder&rsquo;s money, going into escrow (in our name) and then being directly applied to cover the loan fees. Now, this makes you wonder <strong>if there&rsquo;s no financial relationship, why would they care so much which lender we choose?</strong></p><p>It gets more interesting, they wanted us to sign the purchase contract yesterday but we were not supposed to close on the house until the end of June because it wasn&rsquo;t built yet. But, we wouldn&rsquo;t get final loan terms until sometime at the end of May. That means, that as soon as we sign the purchase contract, our only options would be to use their lender and pay whatever rates and fees that they decide to charge, forfeit $12,000 in closing costs by using our lender, or forfeit our $5000 deposit! <strong>Not much of a choice if you ask me</strong>.</p><p>I told them over and over again: &ldquo;I don&rsquo;t mind using your lender&hellip; I just want the option to go with another lender if I&rsquo;m not happy with the terms I&rsquo;m given.&rdquo; But, the more I said that, the more it sounded like it wasn&rsquo;t even an option.</p><p>Because I believe in doing due diligence, I told Jim that I wanted to read over the contract. He was going to call his manager and check on something anyway so went out of his office for a while and brought the contract to look it over. I found the section about &ldquo;Choice of Lender.&rdquo; Turns out, the contract states that we can use our own lender. There were a few little hoops we had to jump through and a couple of forms to submit, but they legally have to give us the choice of using our own lender. When we went back to talk to Jim I pointed that out to him. He got all weird on us and then he was going to talk to his manager again.</p><p>GET THIS. We come back in and now he&rsquo;s saying that the list price has jumped from $212,990 to about $340,000 and the only reason he quoted us $212,990 is because it supposedly included a $128,000 incentive for us to use their lender!!!! So now we went from a $12,000 incentive to over $120,000 incentive for using their lender. <strong>It became clear that we really did not have the choice of using our own lender.</strong> Ostensibly, we did, in reality they were not about to let us have that choice.</p><p>I looked at Jim and said&hellip; &ldquo;What?!?! Now you&rsquo;re telling me the house price is $340,000 unless we use your lender?!?&rdquo;</p><p>Jim: &ldquo;yes, we just hadn&rsquo;t gotten to that part yet. That&rsquo;s why we&rsquo;re going over the contract so we can answer all your questions.&rdquo;</p><p>Me: &ldquo;You&rsquo;re telling me that if I walked in here with cash, you would tell me the house price was $340,000?!?! (easily more than $100,000 above current home prices in the neighborhood)&rdquo;</p><p>Jim: &hellip;silence&hellip;</p><p>Me: &ldquo;Jim, we&rsquo;re not doing that. Call your manager, whatever you need to do, but that&rsquo;s not happening!&rdquo;</p><p>Then Holly and I left to get some lunch and talk it over. We couldn&rsquo;t believe what just happened. They were dead set on us using their lender and now they were saying that the price was $100,000 more if we didn&rsquo;t. <strong>WHAT A JOKE!!!</strong></p><p>After talking for a bit, Holly and I decided that since we no longer trusted them, we were even more set on making sure we had the option. So I called him, here&rsquo;s how the conversation went:</p><p>Me: &ldquo;Jim, what you did just now really damaged your credibility with us.&rdquo;</p><p>Jim: &ldquo;&hellip;ok&rdquo;</p><p>Me: &ldquo;We decided that unless you give us the same incentive with our lender, we&rsquo;re going home&rdquo;</p><p>Jim: &ldquo;I can tell you right now, that&rsquo;s not happening, you may as well come and pick up your check&rdquo;</p><p>Me: &ldquo;Ok, we will&hellip;bye&rdquo;</p><p>Wow! We feel like we dodged a bullet. Imagine being committed to buying the house without knowing what the loan terms are going to be. At that point, what&rsquo;s stopping them from adding fees, giving you a higher interest rate or making up bogus fees before closing. They know you&rsquo;re stuck. The only way out is to lose your deposit. Ridiculous! We saw the price jump from $212,990 to well over $300,000 as soon as they realized we may not use their lender. That&rsquo;s dishonest (and probably illegal).</p><p>I hope somebody from the California Department of Real Estate reads this. In fact, I thinking about reporting the incident and filing a formal complaint.</p><p>My recommendation, don&rsquo;t work with them. This is not the kind of market where you let a seller push you into a corner. They talk about trust and integrity, but actions speak louder than words.</p><p><strong>UPDATE 3/17/2009</strong>: I just found the following disclaimer in small print at the bottom of their website:</p><p>&ldquo;Builder incentives have been used to lower the purchase price and is based on buyer closing with MBK Homes preferred lender. &rdquo;</p><p>So apparently what they did to me was not anything unusual, it is STANDARD PRACTICE FOR THEM! That also means that the entire time I was asking Jim questions about using our lender and their incentives <em>he knew that the price was completely different if didn&rsquo;t use their lender</em>. Every time he mentioned the price he should have included that disclaimer but&hellip; <em>it never even came up</em> until we were nearly ready to sign the contract!</p><p>Now I&rsquo;m really upset, I will be filing a complaint. James David Zures license number: 00609535 and MBK Southern California Residential Inc license number: 01304983 will soon have complaints on their records with the department of real estate.</p>","preview":"<p>This weekend my wife and I were getting ready to buy a beautiful new home in the Medallion neighborhood from MBK homes in Beaumont, CA. We were excited, everything seemed great, it&rsquo;s a buyer&rsquo;s market so we were offered great incentives by the builder.</p><p>But, something just wasn&rsquo;t right when we were negotiating. The sales rep Jim (James Zures) was really insistent about us using their lender. I understand that it&rsquo;s far more convenient for them if we do. They&rsquo;re familiar with their lender&rsquo;s practices and they have had good experiences with them being able to close the deals on time. Also, if they have several homes being sold at the same time, it&rsquo;s far more convenient for them to get status updates from one lender instead of several different ones.</p>"},{"slug":"will-blow-your-mind-projected-meta-information-vid","type":"video","date":"2009-03-16T07:00:00.000Z","video_type":"unknown","title":"Wearable device projects meta information onto every day items in the real world.","old_url":"http://joreteg.com/post/98751349/will-blow-your-mind-projected-meta-information-vid","url":"/blog/will-blow-your-mind-projected-meta-information-vid","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/03/will-blow-your-mind-projected-meta-information-vid.html","markdown":"This is mindblowing. Wearable device projects meta information onto every day items in the real world. This brings the concept of natural technology interaction to the real world.\n\n<object width=\"500\" height=\"365\"><param name=\"movie\" value=\"http://video.ted.com/assets/player/swf/EmbedPlayer.swf\"></param><param name=\"allowFullScreen\" value=\"true\" /><param name=\"wmode\" value=\"transparent\"></param><param name=\"bgColor\" value=\"#ffffff\"></param> <param name=\"flashvars\" value=\"vu=http://video.ted.com/talks/embed/PattieMaes_2009-embed_high.flv&su=http://images.ted.com/images/ted/tedindex/embed-posters/PattieMaes-2009.embed_thumbnail.jpg&vw=432&vh=240&ap=0&ti=481\" /><embed src=\"http://video.ted.com/assets/player/swf/EmbedPlayer.swf\" pluginspace=\"http://www.macromedia.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" wmode=\"transparent\" bgColor=\"#ffffff\" width=\"500\" height=\"365\" allowFullScreen=\"true\" flashvars=\"vu=http://video.ted.com/talks/embed/PattieMaes_2009-embed_high.flv&su=http://images.ted.com/images/ted/tedindex/embed-posters/PattieMaes-2009.embed_thumbnail.jpg&vw=432&vh=240&ap=0&ti=481\"></embed></object>","outputFile":"/blog/will-blow-your-mind-projected-meta-information-vid.html","html":"<p>This is mindblowing. Wearable device projects meta information onto every day items in the real world. This brings the concept of natural technology interaction to the real world.</p><object width=500 height=365><param name=movie value=http://video.ted.com/assets/player/swf/EmbedPlayer.swf><param name=allowFullScreen value=true><param name=wmode value=transparent><param name=bgColor value=#ffffff><param name=flashvars value=\"vu=http://video.ted.com/talks/embed/PattieMaes_2009-embed_high.flv&su=http://images.ted.com/images/ted/tedindex/embed-posters/PattieMaes-2009.embed_thumbnail.jpg&vw=432&vh=240&ap=0&ti=481\"><embed src=http://video.ted.com/assets/player/swf/EmbedPlayer.swf pluginspace=http://www.macromedia.com/go/getflashplayer type=application/x-shockwave-flash wmode=transparent bgcolor=#ffffff width=500 height=365 allowfullscreen=true flashvars=\"vu=http://video.ted.com/talks/embed/PattieMaes_2009-embed_high.flv&su=http://images.ted.com/images/ted/tedindex/embed-posters/PattieMaes-2009.embed_thumbnail.jpg&vw=432&vh=240&ap=0&ti=481\"></object>","preview":"<p>This is mindblowing. Wearable device projects meta information onto every day items in the real world. This brings the concept of natural technology interaction to the real world.</p><object width=500 height=365><param name=movie value=http://video.ted.com/assets/player/swf/EmbedPlayer.swf><param name=allowFullScreen value=true><param name=wmode value=transparent><param name=bgColor value=#ffffff><param name=flashvars value=\"vu=http://video.ted.com/talks/embed/PattieMaes_2009-embed_high.flv&su=http://images.ted.com/images/ted/tedindex/embed-posters/PattieMaes-2009.embed_thumbnail.jpg&vw=432&vh=240&ap=0&ti=481\"><embed src=http://video.ted.com/assets/player/swf/EmbedPlayer.swf pluginspace=http://www.macromedia.com/go/getflashplayer type=application/x-shockwave-flash wmode=transparent bgcolor=#ffffff width=500 height=365 allowfullscreen=true flashvars=\"vu=http://video.ted.com/talks/embed/PattieMaes_2009-embed_high.flv&su=http://images.ted.com/images/ted/tedindex/embed-posters/PattieMaes-2009.embed_thumbnail.jpg&vw=432&vh=240&ap=0&ti=481\"></object>"},{"slug":"using-form-labels-as-input-values-jquery","type":"text","date":"2009-03-04T08:00:00.000Z","title":"Using Form Labels as Input Values with jQuery","old_url":"http://joreteg.com/post/98750890/using-form-labels-as-input-values-jquery","url":"/blog/using-form-labels-as-input-values-jquery","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/03/using-form-labels-as-input-values-jquery.html","markdown":"<p>I recently modified the comment forms on this site. Rather than having a separate label and input field, I used jQuery to put the contents of the label tags inside the inputs themselves.</p>\n\n<p>This gives me the desired effect without impacting accessibility, since the label elements are still there. It simply means that if there is no Javascript support it still functions as expected. Another example of <a href=\"http://www.alistapart.com/articles/understandingprogressiveenhancement\">progressive enhancement</a> at work.</p>\n\n<p>Why waste space with labels? I think it gives a nice clean look. I&rsquo;m thinking about refining this idea and bundling it into a jQuery plugin.</p>\n\n<p>What do you think? Do you like it? Does it cause usability problems? I&rsquo;m open to feedback. If you want to see the source code, you can <a href=\"http://github.com/HenrikJoreteg/jquery-magic-labels/tree/master\">check out the project on GitHub</a>. Just be advised, I&rsquo;m relatively new to jQuery and JavaScript, there may be better ways to do this&hellip; I&rsquo;m all ears.</p>\n\n<p>**Update 3/6/2009: ** I revisited it to make it more generic. Also, it&rsquo;s minified so it&rsquo;s harder to review.  But feel free to download it and test it.  All you have to do to use it is to add it to is add the script and jQuery to your page and call &ldquo;initMagicLabels();&rdquo; it takes a jQuery selector to identify which form(s) you want it to apply to.</p>\n\n<p>If you want it to apply to every form on the page, just pass it &ldquo;form&rdquo; as an argument. You can also do the id of the form for example:</p>\n\n<pre><code>initMagicLabels(\"#myForm\"); \n</code></pre>\n\n<p>or a class:</p>\n\n<pre><code>initMagicLabels(\".myFormClass\");\n</code></pre>\n\n<p>Enjoy!</p>","outputFile":"/blog/using-form-labels-as-input-values-jquery.html","html":"<p>I recently modified the comment forms on this site. Rather than having a separate label and input field, I used jQuery to put the contents of the label tags inside the inputs themselves.</p><p>This gives me the desired effect without impacting accessibility, since the label elements are still there. It simply means that if there is no Javascript support it still functions as expected. Another example of <a href=http://www.alistapart.com/articles/understandingprogressiveenhancement>progressive enhancement</a> at work.</p><p>Why waste space with labels? I think it gives a nice clean look. I&rsquo;m thinking about refining this idea and bundling it into a jQuery plugin.</p><p>What do you think? Do you like it? Does it cause usability problems? I&rsquo;m open to feedback. If you want to see the source code, you can <a href=http://github.com/HenrikJoreteg/jquery-magic-labels/tree/master>check out the project on GitHub</a>. Just be advised, I&rsquo;m relatively new to jQuery and JavaScript, there may be better ways to do this&hellip; I&rsquo;m all ears.</p><p><strong>Update 3/6/2009:</strong> I revisited it to make it more generic. Also, it&rsquo;s minified so it&rsquo;s harder to review. But feel free to download it and test it. All you have to do to use it is to add it to is add the script and jQuery to your page and call &ldquo;initMagicLabels();&rdquo; it takes a jQuery selector to identify which form(s) you want it to apply to.</p><p>If you want it to apply to every form on the page, just pass it &ldquo;form&rdquo; as an argument. You can also do the id of the form for example:</p><pre><code>initMagicLabels(\"#myForm\"); \n</code></pre><p>or a class:</p><pre><code>initMagicLabels(\".myFormClass\");\n</code></pre><p>Enjoy!</p>","preview":"<p>I recently modified the comment forms on this site. Rather than having a separate label and input field, I used jQuery to put the contents of the label tags inside the inputs themselves.</p><p>This gives me the desired effect without impacting accessibility, since the label elements are still there. It simply means that if there is no Javascript support it still functions as expected. Another example of <a href=http://www.alistapart.com/articles/understandingprogressiveenhancement>progressive enhancement</a> at work.</p>"},{"slug":"this-video-was-filmed-during-the-2004-ski-season","type":"video","date":"2009-02-10T08:00:00.000Z","thumbnail_url":"https://i.vimeocdn.com/video/2271597_295x166.jpg","video_type":"vimeo","title":"My 2004 Mammoth skiing video","old_url":"http://joreteg.com/post/98750477/this-video-was-filmed-during-the-2004-ski-season","url":"/blog/this-video-was-filmed-during-the-2004-ski-season","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/02/this-video-was-filmed-during-the-2004-ski-season.html","markdown":"This video was filmed during the 2004 ski season in Mammoth, CA. Those were good times. Hope you enjoy:\n\n<iframe src=\"https://player.vimeo.com/video/3339573?title=0&byline=0&portrait=0\" width=\"500\" height=\"377\" frameborder=\"0\" title=\"Henrik Joreteg, Skiing in Mammoth 2004\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>","outputFile":"/blog/this-video-was-filmed-during-the-2004-ski-season.html","html":"<p>This video was filmed during the 2004 ski season in Mammoth, CA. Those were good times. Hope you enjoy:</p><iframe src=\"https://player.vimeo.com/video/3339573?title=0&byline=0&portrait=0\" width=500 height=377 frameborder=0 title=\"Henrik Joreteg, Skiing in Mammoth 2004\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>","preview":"<p>This video was filmed during the 2004 ski season in Mammoth, CA. Those were good times. Hope you enjoy:</p><iframe src=\"https://player.vimeo.com/video/3339573?title=0&byline=0&portrait=0\" width=500 height=377 frameborder=0 title=\"Henrik Joreteg, Skiing in Mammoth 2004\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>"},{"slug":"official-google-sync-now-finally-comes-iphone","type":"text","date":"2009-02-09T08:00:00.000Z","title":"Official Google Sync now finally comes to iPhone!","old_url":"http://joreteg.com/post/98750062/official-google-sync-now-finally-comes-iphone","url":"/blog/official-google-sync-now-finally-comes-iphone","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/02/official-google-sync-now-finally-comes-iphone.html","markdown":"<p>Over on the <a href=\"http://googleblog.blogspot.com/2009/02/calendar-and-contact-syncing-for-iphone.html\">Official Google Blog</a> they just announced support for contact and calendar syncing with the iPhone!</p>\n\n<p>I&rsquo;ve been hoping for this since I first got my iPhone. You can read the <a href=\"http://www.google.com/mobile/apple/sync.html\">full iPhone specific details here</a>. The cool thing it&rsquo;s using Microsoft Exchanges Active Sync feature, which means 1 thing. FREE PUSH FUNCTIONALITY!</p>\n\n<p>But, be warned&hellip; it will wipe your contacts and calendars on your device. So, I&rsquo;m waiting till I get home to actually try this out. Supposedly it supports multiple calendars too!</p>\n\n<p>I&rsquo;m guessing Apple will lose some MobileMe customer over this because frankly, the syncing ability is the only reason I signed up for MobileMe.</p>","outputFile":"/blog/official-google-sync-now-finally-comes-iphone.html","html":"<p>Over on the <a href=http://googleblog.blogspot.com/2009/02/calendar-and-contact-syncing-for-iphone.html>Official Google Blog</a> they just announced support for contact and calendar syncing with the iPhone!</p><p>I&rsquo;ve been hoping for this since I first got my iPhone. You can read the <a href=http://www.google.com/mobile/apple/sync.html>full iPhone specific details here</a>. The cool thing it&rsquo;s using Microsoft Exchanges Active Sync feature, which means 1 thing. FREE PUSH FUNCTIONALITY!</p><p>But, be warned&hellip; it will wipe your contacts and calendars on your device. So, I&rsquo;m waiting till I get home to actually try this out. Supposedly it supports multiple calendars too!</p><p>I&rsquo;m guessing Apple will lose some MobileMe customer over this because frankly, the syncing ability is the only reason I signed up for MobileMe.</p>","preview":"<p>Over on the <a href=http://googleblog.blogspot.com/2009/02/calendar-and-contact-syncing-for-iphone.html>Official Google Blog</a> they just announced support for contact and calendar syncing with the iPhone!</p><p>I&rsquo;ve been hoping for this since I first got my iPhone. You can read the <a href=http://www.google.com/mobile/apple/sync.html>full iPhone specific details here</a>. The cool thing it&rsquo;s using Microsoft Exchanges Active Sync feature, which means 1 thing. FREE PUSH FUNCTIONALITY!</p>"},{"slug":"why-i-love-google-chrome-and-you-should-too","type":"text","date":"2009-02-08T08:00:00.000Z","title":"Why I love Google Chrome (and you should too)","old_url":"http://joreteg.com/post/98749783/why-i-love-google-chrome-and-you-should-too","url":"/blog/why-i-love-google-chrome-and-you-should-too","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/02/why-i-love-google-chrome-and-you-should-too.html","markdown":"<p><a href=\"http://www.google.com/chrome\"><img src=\"http://farm4.static.flickr.com/3075/2820302020_14d8760918_o.jpg\" alt=\"Google Chrome logo\"/></a></p>\n\n<p>As someone who literally spends my entire workday with a web browser (or three) open on my computer and as someone who builds web applications for a living, I expect a LOT from my browser. I expect it to be extremely fast, stable, have the powerful features I need and all the while I expect it to stay out of my way as much as possible. I don&rsquo;t wanna see it, I don&rsquo;t wanna think about it, I just want it to show me the web and then get out of my way.</p>\n\n<p>That&rsquo;s why I LOVE Google Chrome. It isn&rsquo;t perfect yet but it&rsquo;s the closest thing to an unobtrusive, quirk-free browser that I&rsquo;ve seen yet. Anytime a piece of software (or a person for that matter) tries to be everything to everyone it fails. The brilliant people at Google know this. They understand that simplicity is the ultimate sophistication. Here are some of my favorite features:</p>\n\n<ol><li>Super fast to start up and to load pages. I mean really&hellip; it&rsquo;s quick.</li>\n<li>Minimalist design. Slim, unobtrusive toolbar. This is one of those things that drives me absolutely nuts about most people&rsquo;s browser setups. By the time they have their huge navigation toolbar, URL box, search box, bookmarks toolbar, Yahoo toolbar, Google Toolbar and the status bar across the bottom, they&rsquo;ve taken up nearly a third of their available screen space! Do you want to see the web or your browser?</li>\n<li>Chrome updates itself silently, behind-the-scenes. Yes, you read that correctly. You won&rsquo;t even realize it&rsquo;s happening. This is one area where Microsoft could take a hint: I want the latest and greatest features, security patches and bug fixes as they are released but I don&rsquo;t want a bubble popping up to tell me I need to update, I don&rsquo;t want to be forced to wait and I certainly don&rsquo;t want to restart my browser. Chrome updates just happen silently, which is important because they can (and do) push out updates more frequently without constantly nagging me to update my software.</li>\n<li>Ingenious tab functionality. This is HUGE for me because I always juggle lots of different pages in a dual monitor setup. I always have gobs of tabs open. For example one page that I&rsquo;m developing, a few reference pages, one for deployment requests, Twitter, Google Reader, Gmail&hellip; you get my drift. If I want to move a tab to a separate window, I can just click and drag the tab out of the existing window and Chrome is smart enough to create a new window for me. The opposite is also true. It sounds like a minor deal, but it&rsquo;s very intuitive and it&rsquo;s a huge usability improvement.</li>\n<li>Creating desktop versions of web-applications. Think about this scenario: if I want to have a certain website like GMail, facebook, Reader, Pandora or Google Docs open all day. I don&rsquo;t necessarily want to run all these things in tabs in my browser because it crowds my workspace. In fact, I don&rsquo;t even really want to use them like a browser at all. Essentially I want to be able to switch back and forth from GMail and my browser as if they were two separate applications. Well, with Chrome I can do just that. Chrome lets you turn web-applications into a desktop applications and you can run them alongside your browser just like you would by having Outlook open all day. You can just run GMail as a separate application separate from your browser. This is a very powerful feature that I started using about a year ago on my mac with a free app called <a href=\"http://fluidapp.com/\">fluid</a>. It will change how you view web-applications.</li>\n</ol><p>I could easily go on and on. There are so many cool features: the combined search and URL box, the &ldquo;speed dial&rdquo; homepage, the fact that viewing the page source will open a new tab, the built-in element inspector, the tight security, etc, etc. Google is also giving away all it&rsquo;s secrets by open-sourcing the browser through the <a href=\"http://code.google.com/chromium/\">chromium project</a>.</p>\n\n<p>My only complaint is that Chrome doesn&rsquo;t support addons yet, only because as a developer I often want some advanced functionality such as <a href=\"http://getfirebug.com/\">firebug</a>. But, according to Google <a href=\"http://dev.chromium.org/developers/design-documents/extensions\">extensions are coming</a>.</p>\n\n<p>If you haven&rsquo;t already. <a href=\"http://google.com/chrome\">Get Chrome</a> and set it as your default browser&hellip; you won&rsquo;t regret it.</p>\n\n<p>If you have a higher tolerance for bugs and you want to test some of the advanced functionality coming to Chrome check out my other post about <a href=\"http://www.joreteg.com/blog/2009/jan/12/how-get-beta-and-dev-versions-google-chrome/\">how to get the beta and development versions of Chrome</a>.</p>","outputFile":"/blog/why-i-love-google-chrome-and-you-should-too.html","html":"<p><a href=http://www.google.com/chrome><img src=http://farm4.static.flickr.com/3075/2820302020_14d8760918_o.jpg alt=\"Google Chrome logo\"></a></p><p>As someone who literally spends my entire workday with a web browser (or three) open on my computer and as someone who builds web applications for a living, I expect a LOT from my browser. I expect it to be extremely fast, stable, have the powerful features I need and all the while I expect it to stay out of my way as much as possible. I don&rsquo;t wanna see it, I don&rsquo;t wanna think about it, I just want it to show me the web and then get out of my way.</p><p>That&rsquo;s why I LOVE Google Chrome. It isn&rsquo;t perfect yet but it&rsquo;s the closest thing to an unobtrusive, quirk-free browser that I&rsquo;ve seen yet. Anytime a piece of software (or a person for that matter) tries to be everything to everyone it fails. The brilliant people at Google know this. They understand that simplicity is the ultimate sophistication. Here are some of my favorite features:</p><p><ol><li>Super fast to start up and to load pages. I mean really&hellip; it&rsquo;s quick.</li></ol></p><p><li>Minimalist design. Slim, unobtrusive toolbar. This is one of those things that drives me absolutely nuts about most people&rsquo;s browser setups. By the time they have their huge navigation toolbar, URL box, search box, bookmarks toolbar, Yahoo toolbar, Google Toolbar and the status bar across the bottom, they&rsquo;ve taken up nearly a third of their available screen space! Do you want to see the web or your browser?</li></p><p><li>Chrome updates itself silently, behind-the-scenes. Yes, you read that correctly. You won&rsquo;t even realize it&rsquo;s happening. This is one area where Microsoft could take a hint: I want the latest and greatest features, security patches and bug fixes as they are released but I don&rsquo;t want a bubble popping up to tell me I need to update, I don&rsquo;t want to be forced to wait and I certainly don&rsquo;t want to restart my browser. Chrome updates just happen silently, which is important because they can (and do) push out updates more frequently without constantly nagging me to update my software.</li></p><p><li>Ingenious tab functionality. This is HUGE for me because I always juggle lots of different pages in a dual monitor setup. I always have gobs of tabs open. For example one page that I&rsquo;m developing, a few reference pages, one for deployment requests, Twitter, Google Reader, Gmail&hellip; you get my drift. If I want to move a tab to a separate window, I can just click and drag the tab out of the existing window and Chrome is smart enough to create a new window for me. The opposite is also true. It sounds like a minor deal, but it&rsquo;s very intuitive and it&rsquo;s a huge usability improvement.</li></p><p><li>Creating desktop versions of web-applications. Think about this scenario: if I want to have a certain website like GMail, facebook, Reader, Pandora or Google Docs open all day. I don&rsquo;t necessarily want to run all these things in tabs in my browser because it crowds my workspace. In fact, I don&rsquo;t even really want to use them like a browser at all. Essentially I want to be able to switch back and forth from GMail and my browser as if they were two separate applications. Well, with Chrome I can do just that. Chrome lets you turn web-applications into a desktop applications and you can run them alongside your browser just like you would by having Outlook open all day. You can just run GMail as a separate application separate from your browser. This is a very powerful feature that I started using about a year ago on my mac with a free app called <a href=\"http://fluidapp.com/\">fluid</a>. It will change how you view web-applications.</li></p><p>I could easily go on and on. There are so many cool features: the combined search and URL box, the &ldquo;speed dial&rdquo; homepage, the fact that viewing the page source will open a new tab, the built-in element inspector, the tight security, etc, etc. Google is also giving away all it&rsquo;s secrets by open-sourcing the browser through the <a href=\"http://code.google.com/chromium/\">chromium project</a>.</p><p></p><p>My only complaint is that Chrome doesn&rsquo;t support addons yet, only because as a developer I often want some advanced functionality such as <a href=\"http://getfirebug.com/\">firebug</a>. But, according to Google <a href=http://dev.chromium.org/developers/design-documents/extensions>extensions are coming</a>.</p><p>If you haven&rsquo;t already. <a href=http://google.com/chrome>Get Chrome</a> and set it as your default browser&hellip; you won&rsquo;t regret it.</p><p>If you have a higher tolerance for bugs and you want to test some of the advanced functionality coming to Chrome check out my other post about <a href=\"http://www.joreteg.com/blog/2009/jan/12/how-get-beta-and-dev-versions-google-chrome/\">how to get the beta and development versions of Chrome</a>.</p>","preview":"<p><a href=http://www.google.com/chrome><img src=http://farm4.static.flickr.com/3075/2820302020_14d8760918_o.jpg alt=\"Google Chrome logo\"></a></p><p>As someone who literally spends my entire workday with a web browser (or three) open on my computer and as someone who builds web applications for a living, I expect a LOT from my browser. I expect it to be extremely fast, stable, have the powerful features I need and all the while I expect it to stay out of my way as much as possible. I don&rsquo;t wanna see it, I don&rsquo;t wanna think about it, I just want it to show me the web and then get out of my way.</p>"},{"slug":"jeff-han-and-perceptive-pixel-mind-blowing-multi-t","type":"text","date":"2009-01-30T08:00:00.000Z","title":"Jeff Han and Perceptive Pixel, Mind-Blowing Multi-Touch","old_url":"http://joreteg.com/post/98749521/jeff-han-and-perceptive-pixel-mind-blowing-multi-t","url":"/blog/jeff-han-and-perceptive-pixel-mind-blowing-multi-t","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/01/jeff-han-and-perceptive-pixel-mind-blowing-multi-t.html","markdown":"<p>If you&rsquo;ve never heard of Jeff Han or his company <a href=\"http://www.perceptivepixel.com/\">Perceptive Pixel</a> you&rsquo;re out of the loop. Time magazine <a href=\"http://www.time.com/time/specials/2007/article/0,28804,1733748_1733754_1735325,00.html\">named him one of the 100 most influential people in the world</a> in 2008. However, odds are you have no idea who he is or what he does.</p>\n\n<p>How you interact with computers will change DRAMATICALLY during your lifetime. Think outside the mouse and keyboard for a second. Should your computer interface really consist of a finite number of buttons physically fixed in place.</p>\n\n<p>In normal life, when you want something that&rsquo;s sitting on a desk you reach for it. You don&rsquo;t grab a mouse, maneuver a pointer to a specific location and click on it. We&rsquo;ve just worked with computers for so long that we&rsquo;ve forgotten how unnatural it really is. Technology innovators are increasingly &ldquo;putting the world&rdquo; into computer systems but we still interact with the virtual world in very unnatural ways.</p>\n\n<p>That is exactly what Jeff Han and his company are fixing. They are reinventing how we interact with computers.</p>\n\n<p>Average Joe has no interest in learning the intricacies of using a computer. There are so many different types of programs and systems out there, that the need to constantly learn different interfaces is a challenge. If interactions more closely matched our natural, tactile approach to the world, learning curves would be shorter and adoption rates would increase among those who are less technically inclined.</p>\n\n<p>Just watch the video, it&rsquo;s very impressive. Enjoy.</p>\n\n<p><object width=\"640\" height=\"505\"><param name=\"movie\" value=\"http://www.youtube.com/v/9zGDNFpOMcA&amp;hl=en&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999\"><param name=\"allowFullScreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><embed src=\"http://www.youtube.com/v/9zGDNFpOMcA&amp;hl=en&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"505\"></embed></object></p>","outputFile":"/blog/jeff-han-and-perceptive-pixel-mind-blowing-multi-t.html","html":"<p>If you&rsquo;ve never heard of Jeff Han or his company <a href=\"http://www.perceptivepixel.com/\">Perceptive Pixel</a> you&rsquo;re out of the loop. Time magazine <a href=http://www.time.com/time/specials/2007/article/0,28804,1733748_1733754_1735325,00.html>named him one of the 100 most influential people in the world</a> in 2008. However, odds are you have no idea who he is or what he does.</p><p>How you interact with computers will change DRAMATICALLY during your lifetime. Think outside the mouse and keyboard for a second. Should your computer interface really consist of a finite number of buttons physically fixed in place.</p><p>In normal life, when you want something that&rsquo;s sitting on a desk you reach for it. You don&rsquo;t grab a mouse, maneuver a pointer to a specific location and click on it. We&rsquo;ve just worked with computers for so long that we&rsquo;ve forgotten how unnatural it really is. Technology innovators are increasingly &ldquo;putting the world&rdquo; into computer systems but we still interact with the virtual world in very unnatural ways.</p><p>That is exactly what Jeff Han and his company are fixing. They are reinventing how we interact with computers.</p><p>Average Joe has no interest in learning the intricacies of using a computer. There are so many different types of programs and systems out there, that the need to constantly learn different interfaces is a challenge. If interactions more closely matched our natural, tactile approach to the world, learning curves would be shorter and adoption rates would increase among those who are less technically inclined.</p><p>Just watch the video, it&rsquo;s very impressive. Enjoy.</p><p><object width=640 height=505><param name=movie value=\"http://www.youtube.com/v/9zGDNFpOMcA&amp;hl=en&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999\"><param name=allowFullScreen value=true><param name=allowscriptaccess value=always><embed src=\"http://www.youtube.com/v/9zGDNFpOMcA&amp;hl=en&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999\" type=application/x-shockwave-flash allowscriptaccess=always allowfullscreen=true width=640 height=505></object></p>","preview":"<p>If you&rsquo;ve never heard of Jeff Han or his company <a href=\"http://www.perceptivepixel.com/\">Perceptive Pixel</a> you&rsquo;re out of the loop. Time magazine <a href=http://www.time.com/time/specials/2007/article/0,28804,1733748_1733754_1735325,00.html>named him one of the 100 most influential people in the world</a> in 2008. However, odds are you have no idea who he is or what he does.</p>"},{"slug":"high-tech-president","type":"text","date":"2009-01-15T08:00:00.000Z","title":"A High-tech President?","old_url":"http://joreteg.com/post/98748983/high-tech-president","url":"/blog/high-tech-president","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/01/high-tech-president.html","markdown":"<p>Although I consider myself a political conservative the geek inside me is impressed the apparent tech-savvyness of President-Elect Barack Obama. This is one huge benefit of a relatively young president. I&rsquo;m excited to see signs that the Obama administration is using technology to interact with the populous.</p>\n\n<p>Within days of being elected, Obama&rsquo;s team launched <a href=\"http://www.change.gov\">http://www.change.gov</a> with a blog and updates about plans and ideas. The site includes something they call the <a href=\"http://citizensbriefingbook.change.gov/\">Citizens Briefing Book</a> where anybody with an idea can contribute. Granted, mechanisms like this have existed before (remember snail mail?) but I&rsquo;ve gotta admit that it sure is nice to see a president who&rsquo;s not completely out-of-the-loop when it comes to technology.</p>\n\n<p>As far as what will actually happen with all this talk of change, that is left to be seen.</p>\n\n<p><strong>UPDATE</strong>\n<a href=\"http://www.change.gov\">Change.gov</a> has been shut down and the presidential website has undergone a makeover. Check it out at <a href=\"http://www.whitehouse.gov\">whitehouse.gov</a>.</p>","outputFile":"/blog/high-tech-president.html","html":"<p>Although I consider myself a political conservative the geek inside me is impressed the apparent tech-savvyness of President-Elect Barack Obama. This is one huge benefit of a relatively young president. I&rsquo;m excited to see signs that the Obama administration is using technology to interact with the populous.</p><p>Within days of being elected, Obama&rsquo;s team launched <a href=http://www.change.gov>http://www.change.gov</a> with a blog and updates about plans and ideas. The site includes something they call the <a href=\"http://citizensbriefingbook.change.gov/\">Citizens Briefing Book</a> where anybody with an idea can contribute. Granted, mechanisms like this have existed before (remember snail mail?) but I&rsquo;ve gotta admit that it sure is nice to see a president who&rsquo;s not completely out-of-the-loop when it comes to technology.</p><p>As far as what will actually happen with all this talk of change, that is left to be seen.</p><p><strong>UPDATE</strong> <a href=http://www.change.gov>Change.gov</a> has been shut down and the presidential website has undergone a makeover. Check it out at <a href=http://www.whitehouse.gov>whitehouse.gov</a>.</p>","preview":"<p>Although I consider myself a political conservative the geek inside me is impressed the apparent tech-savvyness of President-Elect Barack Obama. This is one huge benefit of a relatively young president. I&rsquo;m excited to see signs that the Obama administration is using technology to interact with the populous.</p>"},{"slug":"how-to-get-beta-and-dev-versions-google-chrome","type":"text","date":"2009-01-12T08:00:00.000Z","title":"How to get the beta and dev versions of Google Chrome","old_url":"http://joreteg.com/post/98748607/how-to-get-beta-and-dev-versions-google-chrome","url":"/blog/how-to-get-beta-and-dev-versions-google-chrome","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/01/how-to-get-beta-and-dev-versions-google-chrome.html","markdown":"<p><a href=\"http://www.google.com/chrome\"><img src=\"http://farm4.static.flickr.com/3075/2820302020_14d8760918_o.jpg\" alt=\"Google Chrome logo\"/></a></p>\n\n<p>Most people running Google Chrome are running version 1.0. But, the latest development version is 2.0.156.1.</p>\n\n<p>Users can now choose from 3 different update channels. Stable, Beta and Development.</p>\n\n<p>The stable releases are updated quarterly and are the &ldquo;official&rdquo; stable releases. Beta is updated monthly and is less stable than the official releases but more stable than the Development version which is updated weekly and lets users try out the newest features.</p>\n\n<p>The latest release adds a lot of cool features such as:</p>\n\n<ul><li>Full-page zoom (instead of just increasing text size)</li>\n<li>Form auto-complete</li>\n<li>Browser profiles</li>\n<li>Limited Greasemonkey support (although I haven&rsquo;t tried it yet)</li>\n<li>Auto scroll (by clicking and dragging your mousewheel)</li>\n</ul><p>So how do you get the latest features?</p>\n\n<p>You go to the <a href=\"http://dev.chromium.org/getting-involved/dev-channel\">Chromium development docs</a> and download the Google Chrome Channel Changer. Here&rsquo;s a <a href=\"http://chromium.googlecode.com/files/chromechannel-2.0.exe\">direct link</a> to the download.</p>\n\n<p>By running that little program you can chose which channel you want to subscribe to. Then go to the &ldquo;wrench&rdquo; menu in Chrome and select &ldquo;About Google Chrome&rdquo; and click check for updates. Now, it will update to whatever level you&rsquo;ve selected.</p>\n\n<p>Enjoy!</p>\n\n<p>What are your thoughts on Chrome? I&rsquo;m really looking forward to support for extensions and the <a href=\"http://www.google.com/chrome/intl/en/mac.html\">Mac release</a> which is supposedly slated for June 2009.</p>","outputFile":"/blog/how-to-get-beta-and-dev-versions-google-chrome.html","html":"<p><a href=http://www.google.com/chrome><img src=http://farm4.static.flickr.com/3075/2820302020_14d8760918_o.jpg alt=\"Google Chrome logo\"></a></p><p>Most people running Google Chrome are running version 1.0. But, the latest development version is 2.0.156.1.</p><p>Users can now choose from 3 different update channels. Stable, Beta and Development.</p><p>The stable releases are updated quarterly and are the &ldquo;official&rdquo; stable releases. Beta is updated monthly and is less stable than the official releases but more stable than the Development version which is updated weekly and lets users try out the newest features.</p><p>The latest release adds a lot of cool features such as:</p><p><ul><li>Full-page zoom (instead of just increasing text size)</li></ul></p><p><li>Form auto-complete</li></p><p><li>Browser profiles</li></p><p><li>Limited Greasemonkey support (although I haven&rsquo;t tried it yet)</li></p><p><li>Auto scroll (by clicking and dragging your mousewheel)</li></p><p>So how do you get the latest features?</p><p></p><p>You go to the <a href=http://dev.chromium.org/getting-involved/dev-channel>Chromium development docs</a> and download the Google Chrome Channel Changer. Here&rsquo;s a <a href=http://chromium.googlecode.com/files/chromechannel-2.0.exe>direct link</a> to the download.</p><p>By running that little program you can chose which channel you want to subscribe to. Then go to the &ldquo;wrench&rdquo; menu in Chrome and select &ldquo;About Google Chrome&rdquo; and click check for updates. Now, it will update to whatever level you&rsquo;ve selected.</p><p>Enjoy!</p><p>What are your thoughts on Chrome? I&rsquo;m really looking forward to support for extensions and the <a href=http://www.google.com/chrome/intl/en/mac.html>Mac release</a> which is supposedly slated for June 2009.</p>","preview":"<p><a href=http://www.google.com/chrome><img src=http://farm4.static.flickr.com/3075/2820302020_14d8760918_o.jpg alt=\"Google Chrome logo\"></a></p><p>Most people running Google Chrome are running version 1.0. But, the latest development version is 2.0.156.1.</p><p>Users can now choose from 3 different update channels. Stable, Beta and Development.</p>"},{"slug":"bloxes","type":"text","date":"2009-01-08T08:00:00.000Z","title":"Bloxes!","old_url":"http://joreteg.com/post/98748173/bloxes","url":"/blog/bloxes","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/01/bloxes.html","markdown":"<p>This is one of the coolest ideas I&rsquo;ve stumbled across for a while. Simple but ingenious:</p>\n\n<p><img src=\"http://farm3.static.flickr.com/2401/2331984428_c3fb883578.jpg\" alt=\"Aza standing on bloxes\"/></p>\n\n<p>Aza Raskin standing on a cube of bloxes.\nPhoto credit <a href=\"http://www.flickr.com/photos/deadhorse/2331984428/in/pool-bloxes\">Andres Huff on flickr</a></p>\n\n<p>They&rsquo;re called <a href=\"http://bloxes.com\">Bloxes</a>. Imagine giant cardboard legos that achieve incredible strength due to their shape. You can use them as sound-dampening walls, office partitions, or anything you could think of. Then, disassemble them and rebuilt whatever you want. They were invented by the <a href=\"http://en.wikipedia.org/wiki/Jef_Raskin\">Jef Raskin</a> the guy who started the Macintosh project at Apple. Now they&rsquo;re being sold and marketed by his son <a href=\"http://www.azarask.in/blog/\">Aza</a> who works for <a href=\"http://www.google.com\">Google</a>.</p>\n\n<p><img src=\"http://farm4.static.flickr.com/3039/2335330824_7b54f3e496.jpg\" alt=\"Bloxes pic from flickr\"/></p>\n\n<p>Photo credit santheo from <a href=\"http://www.flickr.com/photos/santheo/2335330824/in/pool-651147@N24\">flickr</a></p>\n\n<p>These thing are awesome! You can build all kinds of stuff, then tear it down as many times as you want. There&rsquo;s a whole <a href=\"http://www.flickr.com/groups/bloxes/pool/\">pool of pictures</a> on flickr showing various uses. Be sure to check out the <a href=\"http://bloxes.com\">bloxes website</a> too.</p>\n\n<p>I may just to get some of these to fortify/soundproof my office at work.</p>","outputFile":"/blog/bloxes.html","html":"<p>This is one of the coolest ideas I&rsquo;ve stumbled across for a while. Simple but ingenious:</p><p><img src=http://farm3.static.flickr.com/2401/2331984428_c3fb883578.jpg alt=\"Aza standing on bloxes\"></p><p>Aza Raskin standing on a cube of bloxes. Photo credit <a href=http://www.flickr.com/photos/deadhorse/2331984428/in/pool-bloxes>Andres Huff on flickr</a></p><p>They&rsquo;re called <a href=http://bloxes.com>Bloxes</a>. Imagine giant cardboard legos that achieve incredible strength due to their shape. You can use them as sound-dampening walls, office partitions, or anything you could think of. Then, disassemble them and rebuilt whatever you want. They were invented by the <a href=http://en.wikipedia.org/wiki/Jef_Raskin>Jef Raskin</a> the guy who started the Macintosh project at Apple. Now they&rsquo;re being sold and marketed by his son <a href=\"http://www.azarask.in/blog/\">Aza</a> who works for <a href=http://www.google.com>Google</a>.</p><p><img src=http://farm4.static.flickr.com/3039/2335330824_7b54f3e496.jpg alt=\"Bloxes pic from flickr\"></p><p>Photo credit santheo from <a href=http://www.flickr.com/photos/santheo/2335330824/in/pool-651147@N24>flickr</a></p><p>These thing are awesome! You can build all kinds of stuff, then tear it down as many times as you want. There&rsquo;s a whole <a href=\"http://www.flickr.com/groups/bloxes/pool/\">pool of pictures</a> on flickr showing various uses. Be sure to check out the <a href=http://bloxes.com>bloxes website</a> too.</p><p>I may just to get some of these to fortify/soundproof my office at work.</p>","preview":"<p>This is one of the coolest ideas I&rsquo;ve stumbled across for a while. Simple but ingenious:</p><p><img src=http://farm3.static.flickr.com/2401/2331984428_c3fb883578.jpg alt=\"Aza standing on bloxes\"></p><p>Aza Raskin standing on a cube of bloxes. Photo credit <a href=http://www.flickr.com/photos/deadhorse/2331984428/in/pool-bloxes>Andres Huff on flickr</a></p>"},{"slug":"introduction-to-google-reader","type":"text","date":"2009-01-05T08:00:00.000Z","title":"Why and How to use Google Reader","old_url":"http://joreteg.com/post/98747667/introduction-to-google-reader","url":"/blog/introduction-to-google-reader","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/01/introduction-to-google-reader.html","markdown":"<p>Imagine having a newspaper or magazine that was written just for you, automatically updated and sent to you whenever a new relevant story was added. Say hello to Google Reader.</p>\n\n<p>The first step is easy. Just follow the link below to sign up for the free service:</p>\n\n<p><a href=\"http://www.google.com/reader\">http://www.google.com/reader</a></p>\n\n<p>Once you&rsquo;ve created an account, you can start adding sites you want to subscribe to. It&rsquo;s easy&hellip; just click the &ldquo;Add a subscription&rdquo; button at the top right and type in the URL of the blog (for example &ldquo;joreteg.com&rdquo;).</p>\n\n<p><img src=\"http://farm2.static.flickr.com/1084/3173042836_d88fd1bb2a_o.png\" alt=\"Google Reader Screen Shot\"/></p>\n\n<p>That&rsquo;s it you just added your first feed! Now you can add as many as you want and then all you&rsquo;ve gotta do is go back to Google Reader and check for unread items. If you want to see a story in it&rsquo;s original form, you just click the title of the post to go to the page where it came from.</p>\n\n<p>Google Reader lets you subscribe to any website that publishes content feeds. The good news is that these days pretty much all blogs and news outlets publish feeds. You can add feeds directly from within Google Reader or you can look for feed links while you&rsquo;re browsing.</p>\n\n<p>The standard feed icon looks something like this:</p>\n\n<p><img src=\"http://farm4.static.flickr.com/3306/3172996124_fda990262d_o.png\" alt=\"Standard Feed Icon\"/></p>\n\n<p>Anytime you see this or any mention of <a href=\"http://en.wikipedia.org/wiki/RSS_(file_format)\">RSS</a> or a feed you can click on it and if you&rsquo;re using a modern browser (I recommend <a href=\"http://www.google.com/chrome\">Chrome</a> or <a href=\"http://www.mozilla.com/en-US/firefox/\">Firefox</a>) it will give you the option of subscribing using the program/service of your choice.</p>\n\n<p>Many browsers will also display a feed icon in the address bar to indicate when a site has a feed.</p>\n\n<p>Now you can easily stay current with the sites and authors you like without having to check lots of different sites, scouring for new content. I check Google Reader daily. Once you experience the convenience of it you&rsquo;ll realize why paper is history.</p>\n\n<p>To see how the dynamic web is changing our cultural anthropology check out this amazing video, as brought to my attention by my friend and co-worker <a href=\"http://joshhighland.com/blog/2009/01/05/the-machine-is-using-us/\">Josh Highland</a>. It&rsquo;s well worth your time and will make you think.</p>\n\n<p>Enjoy!</p>\n\n<p><object width=\"425\" height=\"344\"><param name=\"movie\" value=\"http://www.youtube.com/v/NLlGopyXT_g&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\"><param name=\"allowFullScreen\" value=\"true\"><embed src=\"http://www.youtube.com/v/NLlGopyXT_g&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" width=\"425\" height=\"344\"></embed></object></p>","outputFile":"/blog/introduction-to-google-reader.html","html":"<p>Imagine having a newspaper or magazine that was written just for you, automatically updated and sent to you whenever a new relevant story was added. Say hello to Google Reader.</p><p>The first step is easy. Just follow the link below to sign up for the free service:</p><p><a href=http://www.google.com/reader>http://www.google.com/reader</a></p><p>Once you&rsquo;ve created an account, you can start adding sites you want to subscribe to. It&rsquo;s easy&hellip; just click the &ldquo;Add a subscription&rdquo; button at the top right and type in the URL of the blog (for example &ldquo;joreteg.com&rdquo;).</p><p><img src=http://farm2.static.flickr.com/1084/3173042836_d88fd1bb2a_o.png alt=\"Google Reader Screen Shot\"></p><p>That&rsquo;s it you just added your first feed! Now you can add as many as you want and then all you&rsquo;ve gotta do is go back to Google Reader and check for unread items. If you want to see a story in it&rsquo;s original form, you just click the title of the post to go to the page where it came from.</p><p>Google Reader lets you subscribe to any website that publishes content feeds. The good news is that these days pretty much all blogs and news outlets publish feeds. You can add feeds directly from within Google Reader or you can look for feed links while you&rsquo;re browsing.</p><p>The standard feed icon looks something like this:</p><p><img src=http://farm4.static.flickr.com/3306/3172996124_fda990262d_o.png alt=\"Standard Feed Icon\"></p><p>Anytime you see this or any mention of <a href=http://en.wikipedia.org/wiki/RSS_(file_format)>RSS</a> or a feed you can click on it and if you&rsquo;re using a modern browser (I recommend <a href=http://www.google.com/chrome>Chrome</a> or <a href=\"http://www.mozilla.com/en-US/firefox/\">Firefox</a>) it will give you the option of subscribing using the program/service of your choice.</p><p>Many browsers will also display a feed icon in the address bar to indicate when a site has a feed.</p><p>Now you can easily stay current with the sites and authors you like without having to check lots of different sites, scouring for new content. I check Google Reader daily. Once you experience the convenience of it you&rsquo;ll realize why paper is history.</p><p>To see how the dynamic web is changing our cultural anthropology check out this amazing video, as brought to my attention by my friend and co-worker <a href=\"http://joshhighland.com/blog/2009/01/05/the-machine-is-using-us/\">Josh Highland</a>. It&rsquo;s well worth your time and will make you think.</p><p>Enjoy!</p><p><object width=425 height=344><param name=movie value=\"http://www.youtube.com/v/NLlGopyXT_g&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\"><param name=allowFullScreen value=true><embed src=\"http://www.youtube.com/v/NLlGopyXT_g&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1\" type=application/x-shockwave-flash allowfullscreen=true width=425 height=344></object></p>","preview":"<p>Imagine having a newspaper or magazine that was written just for you, automatically updated and sent to you whenever a new relevant story was added. Say hello to Google Reader.</p><p>The first step is easy. Just follow the link below to sign up for the free service:</p><p><a href=http://www.google.com/reader>http://www.google.com/reader</a></p>"},{"slug":"want-unlock-your-iphone-instructions-washington-po","type":"text","date":"2009-01-02T08:00:00.000Z","title":"Want to Unlock Your iPhone? Instructions from Washington Post","old_url":"http://joreteg.com/post/98747115/want-unlock-your-iphone-instructions-washington-po","url":"/blog/want-unlock-your-iphone-instructions-washington-po","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2009/01/want-unlock-your-iphone-instructions-washington-po.html","markdown":"<p><img src=\"http://farm4.static.flickr.com/3104/3160180824_f42fb419d9.jpg\" alt=\"Screenshot of story from Washington Post\"/></p>\n\n<p>Does it strike anybody else as odd, thata major news outlet <a href=\"http://www.washingtonpost.com/wp-dyn/content/article/2009/01/01/AR2009010102135.html\">is publishing instructions</a> on how to unlock your iPhone, which breaks your license agreement with Apple and your contract with AT&amp;T?</p>\n\n<p>The iPhone situation is highlighting a major flaw in how cell phone companies do business in the US: <em>They tie the phone to the carrier</em>. As freedom loving citizens we should be fighting this tooth and nail. We are signing contracts that will last longer than most of our cell phones! It discourages competition and that&rsquo;s why the customer service reps at cell phone companies don&rsquo;t become helpful until your contract is up.</p>\n\n<p>Do we have a choice? Sort of. You can buy <a href=\"http://www.amazon.com/s/ref=nb_ss_gw_0_8?url=search-alias%3Daps&amp;field-keywords=unlocked+cell+phones&amp;x=0&amp;y=0&amp;sprefix=unlocked\">some pretty sweet</a> &ldquo;unlocked&rdquo; phones directly from <a href=\"http://www.amazon.com\">Amazon</a> and take them to a carrier to get service. However, as became blatantly obviously with the iPhone. Your options are limited and the prices you pay for service with an unlocked phone are pretty much always the same as if you had gotten a free or heavily subsidized phone from the service provider. So, it will actually cost you significantly more to have a little bit of freedom. It&rsquo;s an outrage, we should all be calling/writing our congressman about it.</p>\n\n<p>Imagine being able to pick any phone you want (not just one of the 10 that your carrier offers). Then, shopping around for the best plan for you. That&rsquo;s the type of freedom we&rsquo;re used to in other areas of our lives. But, we&rsquo;ve been hoodwinked into believing that two-year contracts are just a part of life.</p>\n\n<p>It&rsquo;s extremely limiting, it&rsquo;s an insulting way to treat a customer, it&rsquo;s anti-competitive and it should be illegal.</p>","outputFile":"/blog/want-unlock-your-iphone-instructions-washington-po.html","html":"<p><img src=http://farm4.static.flickr.com/3104/3160180824_f42fb419d9.jpg alt=\"Screenshot of story from Washington Post\"></p><p>Does it strike anybody else as odd, thata major news outlet <a href=http://www.washingtonpost.com/wp-dyn/content/article/2009/01/01/AR2009010102135.html>is publishing instructions</a> on how to unlock your iPhone, which breaks your license agreement with Apple and your contract with AT&amp;T?</p><p>The iPhone situation is highlighting a major flaw in how cell phone companies do business in the US: <em>They tie the phone to the carrier</em>. As freedom loving citizens we should be fighting this tooth and nail. We are signing contracts that will last longer than most of our cell phones! It discourages competition and that&rsquo;s why the customer service reps at cell phone companies don&rsquo;t become helpful until your contract is up.</p><p>Do we have a choice? Sort of. You can buy <a href=\"http://www.amazon.com/s/ref=nb_ss_gw_0_8?url=search-alias%3Daps&amp;field-keywords=unlocked+cell+phones&amp;x=0&amp;y=0&amp;sprefix=unlocked\">some pretty sweet</a> &ldquo;unlocked&rdquo; phones directly from <a href=http://www.amazon.com>Amazon</a> and take them to a carrier to get service. However, as became blatantly obviously with the iPhone. Your options are limited and the prices you pay for service with an unlocked phone are pretty much always the same as if you had gotten a free or heavily subsidized phone from the service provider. So, it will actually cost you significantly more to have a little bit of freedom. It&rsquo;s an outrage, we should all be calling/writing our congressman about it.</p><p>Imagine being able to pick any phone you want (not just one of the 10 that your carrier offers). Then, shopping around for the best plan for you. That&rsquo;s the type of freedom we&rsquo;re used to in other areas of our lives. But, we&rsquo;ve been hoodwinked into believing that two-year contracts are just a part of life.</p><p>It&rsquo;s extremely limiting, it&rsquo;s an insulting way to treat a customer, it&rsquo;s anti-competitive and it should be illegal.</p>","preview":"<p><img src=http://farm4.static.flickr.com/3104/3160180824_f42fb419d9.jpg alt=\"Screenshot of story from Washington Post\"></p><p>Does it strike anybody else as odd, thata major news outlet <a href=http://www.washingtonpost.com/wp-dyn/content/article/2009/01/01/AR2009010102135.html>is publishing instructions</a> on how to unlock your iPhone, which breaks your license agreement with Apple and your contract with AT&amp;T?</p>"},{"slug":"what-if-html-validation-affected-your-google-pager","type":"text","date":"2008-12-30T08:00:00.000Z","title":"What if HTML Validation Affected Your Google Pagerank?","old_url":"http://joreteg.com/post/98746623/what-if-html-validation-affected-your-google-pager","url":"/blog/what-if-html-validation-affected-your-google-pager","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/12/what-if-html-validation-affected-your-google-pager.html","markdown":"<p>Website owners everywhere bend over backwards, come up with <a href=\"http://en.wikipedia.org/wiki/Link_farm\">crazy schemes</a> and try every trick in the book for increasing the <a href=\"http://en.wikipedia.org/wiki/PageRank\">Google Page Rank</a> of their site (and subsequently, traffic to their site).</p>\n\n<p>This puts Google in a unique position of influence. Imagine if the <a href=\"http://en.wikipedia.org/wiki/Googlebot\">Googlebot</a> gave even just a hint of priority to sites that validated as XHTML Strict.</p>\n\n<p>I&rsquo;m not necessarily advocating that, but imagine the impact on web developers! It would help bring standards compliance into the spotlight. Hopefully the resulting discussions would help move the web forward.</p>\n\n<p>If you&rsquo;re a web developer, rather than worry about reading up on web-standards, just install the <a href=\"https://addons.mozilla.org/en-US/firefox/addon/249\">Html Validator</a> extension for Firefox and use it as you develop. It puts either a green check mark or a red X in the status bar of your browser as you browse. When there&rsquo;s a red X, simply click on it to see what errors the validator found. It&rsquo;s a powerful teaching tool and you&rsquo;ll soon find yourself obsessed with making sure each page of your site shows the green check mark.</p>\n\n<p>(BTW, I&rsquo;m far from perfect in this area, but I&rsquo;m making the effort, and so should you)</p>","outputFile":"/blog/what-if-html-validation-affected-your-google-pager.html","html":"<p>Website owners everywhere bend over backwards, come up with <a href=http://en.wikipedia.org/wiki/Link_farm>crazy schemes</a> and try every trick in the book for increasing the <a href=http://en.wikipedia.org/wiki/PageRank>Google Page Rank</a> of their site (and subsequently, traffic to their site).</p><p>This puts Google in a unique position of influence. Imagine if the <a href=http://en.wikipedia.org/wiki/Googlebot>Googlebot</a> gave even just a hint of priority to sites that validated as XHTML Strict.</p><p>I&rsquo;m not necessarily advocating that, but imagine the impact on web developers! It would help bring standards compliance into the spotlight. Hopefully the resulting discussions would help move the web forward.</p><p>If you&rsquo;re a web developer, rather than worry about reading up on web-standards, just install the <a href=https://addons.mozilla.org/en-US/firefox/addon/249>Html Validator</a> extension for Firefox and use it as you develop. It puts either a green check mark or a red X in the status bar of your browser as you browse. When there&rsquo;s a red X, simply click on it to see what errors the validator found. It&rsquo;s a powerful teaching tool and you&rsquo;ll soon find yourself obsessed with making sure each page of your site shows the green check mark.</p><p>(BTW, I&rsquo;m far from perfect in this area, but I&rsquo;m making the effort, and so should you)</p>","preview":"<p>Website owners everywhere bend over backwards, come up with <a href=http://en.wikipedia.org/wiki/Link_farm>crazy schemes</a> and try every trick in the book for increasing the <a href=http://en.wikipedia.org/wiki/PageRank>Google Page Rank</a> of their site (and subsequently, traffic to their site).</p>"},{"slug":"iphones-at-walmart","type":"text","date":"2008-12-29T08:00:00.000Z","title":"iPhones at Wal-Mart?","old_url":"http://joreteg.com/post/98746189/iphones-at-walmart","url":"/blog/iphones-at-walmart","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/12/iphones-at-walmart.html","markdown":"<p>It&rsquo;s official, Apple is trying to go mainstream by selling iPhones at the world&rsquo;s largest retailer. That&rsquo;s right&hellip; Wal-Mart!</p>\n\n<p><img src=\"http://farm4.static.flickr.com/3176/3147048505_8911fbed64.jpg\" alt=\"iPhones now @ Wal-Mart!\"/></p>\n\n<p>This is an interesting move for Apple. Typically, Apple products are sold with sleek, swanky merchandising in sleek, swanky Apple stores. Wal-Mart hardly fits that description. There was some speculation that if Apple made this move, they would sell a version of the iPhone for as little as $99. As it turns out, they&rsquo;re only reducing the price by a measly $2. Rather than $199 and $299, for the 8GB and 16GB models respectively, they&rsquo;ll be priced at $197 and $297. <em>LAME!</em> Why bother discounting them at all?</p>\n\n<p>Regardless, the swanky Apple brand has just descended into the world of discount retailing.</p>\n\n<p>Good move or straying too far from the sexy brand image they&rsquo;ve built? Guess we&rsquo;ll see&hellip;</p>","outputFile":"/blog/iphones-at-walmart.html","html":"<p>It&rsquo;s official, Apple is trying to go mainstream by selling iPhones at the world&rsquo;s largest retailer. That&rsquo;s right&hellip; Wal-Mart!</p><p><img src=http://farm4.static.flickr.com/3176/3147048505_8911fbed64.jpg alt=\"iPhones now @ Wal-Mart!\"></p><p>This is an interesting move for Apple. Typically, Apple products are sold with sleek, swanky merchandising in sleek, swanky Apple stores. Wal-Mart hardly fits that description. There was some speculation that if Apple made this move, they would sell a version of the iPhone for as little as $99. As it turns out, they&rsquo;re only reducing the price by a measly $2. Rather than $199 and $299, for the 8GB and 16GB models respectively, they&rsquo;ll be priced at $197 and $297. <em>LAME!</em> Why bother discounting them at all?</p><p>Regardless, the swanky Apple brand has just descended into the world of discount retailing.</p><p>Good move or straying too far from the sexy brand image they&rsquo;ve built? Guess we&rsquo;ll see&hellip;</p>","preview":"<p>It&rsquo;s official, Apple is trying to go mainstream by selling iPhones at the world&rsquo;s largest retailer. That&rsquo;s right&hellip; Wal-Mart!</p><p><img src=http://farm4.static.flickr.com/3176/3147048505_8911fbed64.jpg alt=\"iPhones now @ Wal-Mart!\"></p><p>This is an interesting move for Apple. Typically, Apple products are sold with sleek, swanky merchandising in sleek, swanky Apple stores. Wal-Mart hardly fits that description. There was some speculation that if Apple made this move, they would sell a version of the iPhone for as little as $99. As it turns out, they&rsquo;re only reducing the price by a measly $2. Rather than $199 and $299, for the 8GB and 16GB models respectively, they&rsquo;ll be priced at $197 and $297. <em>LAME!</em> Why bother discounting them at all?</p>"},{"slug":"case-for-using-django-as-cms","type":"text","date":"2008-12-26T08:00:00.000Z","title":"The Case for Using Django Instead of a Pre-Packaged CMS","old_url":"http://joreteg.com/post/98745710/case-for-using-django-as-cms","url":"/blog/case-for-using-django-as-cms","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/12/case-for-using-django-as-cms.html","markdown":"<p>We&rsquo;ve been exploring options for content management systems at work. So far, I&rsquo;m failing to see any significant benefits of a CMS over simply building the site in <a href=\"http://www.djangoproject.com\">Django</a> and customizing Django&rsquo;s auto-generated admin interface.</p>\n\n<p>This argument will not hold true for non-developers. If you&rsquo;re just looking for an out-of-the box solution for a simple site with less than 50 pages and you&rsquo;re not looking to create lots of different layouts I recommend a pre-packaged CMS. One of the best is <a href=\"http://www.wordpress.org\">Wordpress.org</a> (it&rsquo;s not just for blogging anymore).</p>\n\n<p>However, if you <em>do</em> need a highly customizable solution, I feel that Django is a better solution.</p>\n\n<p>Here are 26 reasons:</p>\n\n<ul><li>I managed to build a functioning CMS in about 2 hours with less than 100 lines of code (not counting the html templates) that was functionally superior to my <a href=\"http://drupal.org/\">Drupal</a> installation after I had worked on it for about 10 hours.  (I&rsquo;ve only been working with Django for about 6 months. With no previous Python experience.)</li>\n<li>The main advantage of using a CMS is that it gives you a way to enter data without having to build an admin interface. That functionality is provided, pretty much out-of-the box with Django. It generates a brilliant, customizable admin interface for you based on your data models. When you develop in Django, you&rsquo;re essentially creating a custom CMS without doing any extra work.</li>\n<li>By rolling your own CMS, you get customize it to work just the way you want it.</li>\n<li>You can mix and match. You don&rsquo;t have to have your entire site be driven by the CMS. You can easily add other pages that are just defined in your Django application.  </li>\n<li>Django was initially built around a newspaper&rsquo;s content-driven publishing needs. It&rsquo;s designed to handle content.</li>\n<li><a href=\"http://www.google.com\">Google</a>, <a href=\"http://www.washingtonpost.com/\">The Washington Post</a> and <a href=\"http://www.theonion.com/\">The Onion</a> all use Django in some aspect of their operations.</li>\n<li>Django code is straight <a href=\"http://python.org\">Python</a>. Extending its functionality is as easy as dropping in any Python module (of which there are TONS).</li>\n<li>Developing in Django is FAST because it is designed to require as little coding as possible. The same is true of Python, it is one of the pithiest languages out there. It uses very few brackets and tags, unlike the tag-based languages like <a href=\"http://www.php.net/\">PHP</a> and <a href=\"http://www.adobe.com/products/coldfusion/\">ColdFusion</a>. Instead it uses linebreaks and whitespace. This also means there isn&rsquo;t as much syntax to remember or type.</li>\n<li>Python&rsquo;s basic structure forces developers to write readable code! No more; &ldquo;what on earth is going on here&rsquo; when rebuilding someone else&rsquo;s messy ColdFusion site. In some cases with Python it almost looks like you&rsquo;re reading pseudo-code.</li>\n<li>The Django tagline is very telling about their development philosophy: &quot;The web framework for perfectionists with deadlines.&rdquo; It sounds like it was built just for me.</li>\n<li>Django comes bundled with a powerful ORM (object relational mapper), which uses the same model definitions that help define your admin site to generate the needed database tables. In the code you can then use a database record like you would an object. Manipulating object from the database is very intuitive and doesn&rsquo;t require you to write ANY SQL, unless you&rsquo;re getting really fancy. Django&rsquo;s ORM follows the <a href=\"http://en.wikipedia.org/wiki/Active_record_pattern\">Active Record</a> design pattern.</li>\n<li>Django Works with: MySQL, SQLite3, PostGreSQL, there&rsquo;s also a Python adapter for MSSQL server, although I&rsquo;ve read that the MS SQL server is not yet super stable.</li>\n<li>Django has built in support for <a href=\"http://docs.djangoproject.com/en/dev/topics/i18n/\">internationalization</a> in both code and templates. It can even handle locale specific date formats and languages that read from right to left!</li>\n<li>Python is relatively easy to learn because the syntax is so minimalistic. There&rsquo;s even a great <a href=\"http://diveintopython.org/\">free online book</a> to get you started.</li>\n<li>Django is stable and is being very actively developed, the user community is growing rapidly. Plus, there&rsquo;s a huge Python community already. </li>\n<li>Comparisons show that building sites in Django is even faster than Ruby on Rails.</li>\n<li>Django&rsquo;s architecture is inherently very pluggable. For example, if I wanted to add blogging functionality to the demo CMS I built, It would be really easy to plug it in, in a few minutes.  (styling the templates is what would take a little longer).</li>\n<li>You can define very granular permissions to establish a publishing work-flow that meets any logical requirements.</li>\n<li>It&rsquo;s all open source and it runs beautifully on Apache/mod_python.</li>\n<li>Built-in support for running multiple sites from one admin.</li>\n<li>Django is built, from ground up for perfect URLS. ALL URLs are decoupled from the content. They&rsquo;re pointers, not absolute references to specific documents. This allows for greater flexibility, you can restructure your site, or even change to a different server technology without breaking your old links.</li>\n<li>Powerful <a href=\"http://docs.djangoproject.com/en/dev/topics/cache/\">caching capabilities</a>, very granular if desired. Compatible with <a href=\"http://www.danga.com/memcached/\">memcached</a> for lightning fast caching.</li>\n<li>Includes a very robust inheritance-based <a href=\"http://docs.djangoproject.com/en/dev/topics/templates/\">templating language</a> that helps template developers practice the <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY principal</a> which helps enforce consistent styling across related pages and sites.</li>\n<li>There is very clean code separation between the templates and the Python code, makes it easy to separate work of designers and developers.</li>\n<li>Python&rsquo;s inventor <a href=\"http://neopythonic.blogspot.com/\">Guido van Rossum</a> who is arguably one of the smartest developers out there calls Django his favorite web framework.</li>\n<li><a href=\"http://jeffcroft.com/\">Jeff Croft</a> also <a href=\"http://blueflavor.com/blog/2007/dec/03/django-a-flexible-choice-for-y/\">wrote a great article</a> about using Django instead of a traditional CMS.</li>\n</ul>","outputFile":"/blog/case-for-using-django-as-cms.html","html":"<p>We&rsquo;ve been exploring options for content management systems at work. So far, I&rsquo;m failing to see any significant benefits of a CMS over simply building the site in <a href=http://www.djangoproject.com>Django</a> and customizing Django&rsquo;s auto-generated admin interface.</p><p>This argument will not hold true for non-developers. If you&rsquo;re just looking for an out-of-the box solution for a simple site with less than 50 pages and you&rsquo;re not looking to create lots of different layouts I recommend a pre-packaged CMS. One of the best is <a href=http://www.wordpress.org>Wordpress.org</a> (it&rsquo;s not just for blogging anymore).</p><p>However, if you <em>do</em> need a highly customizable solution, I feel that Django is a better solution.</p><p>Here are 26 reasons:</p><ul><li>I managed to build a functioning CMS in about 2 hours with less than 100 lines of code (not counting the html templates) that was functionally superior to my <a href=\"http://drupal.org/\">Drupal</a> installation after I had worked on it for about 10 hours. (I&rsquo;ve only been working with Django for about 6 months. With no previous Python experience.)</li><li>The main advantage of using a CMS is that it gives you a way to enter data without having to build an admin interface. That functionality is provided, pretty much out-of-the box with Django. It generates a brilliant, customizable admin interface for you based on your data models. When you develop in Django, you&rsquo;re essentially creating a custom CMS without doing any extra work.</li><li>By rolling your own CMS, you get customize it to work just the way you want it.</li><li>You can mix and match. You don&rsquo;t have to have your entire site be driven by the CMS. You can easily add other pages that are just defined in your Django application.</li><li>Django was initially built around a newspaper&rsquo;s content-driven publishing needs. It&rsquo;s designed to handle content.</li><li><a href=http://www.google.com>Google</a>, <a href=\"http://www.washingtonpost.com/\">The Washington Post</a> and <a href=\"http://www.theonion.com/\">The Onion</a> all use Django in some aspect of their operations.</li><li>Django code is straight <a href=http://python.org>Python</a>. Extending its functionality is as easy as dropping in any Python module (of which there are TONS).</li><li>Developing in Django is FAST because it is designed to require as little coding as possible. The same is true of Python, it is one of the pithiest languages out there. It uses very few brackets and tags, unlike the tag-based languages like <a href=\"http://www.php.net/\">PHP</a> and <a href=\"http://www.adobe.com/products/coldfusion/\">ColdFusion</a>. Instead it uses linebreaks and whitespace. This also means there isn&rsquo;t as much syntax to remember or type.</li><li>Python&rsquo;s basic structure forces developers to write readable code! No more; &ldquo;what on earth is going on here&rsquo; when rebuilding someone else&rsquo;s messy ColdFusion site. In some cases with Python it almost looks like you&rsquo;re reading pseudo-code.</li><li>The Django tagline is very telling about their development philosophy: &quot;The web framework for perfectionists with deadlines.&rdquo; It sounds like it was built just for me.</li><li>Django comes bundled with a powerful ORM (object relational mapper), which uses the same model definitions that help define your admin site to generate the needed database tables. In the code you can then use a database record like you would an object. Manipulating object from the database is very intuitive and doesn&rsquo;t require you to write ANY SQL, unless you&rsquo;re getting really fancy. Django&rsquo;s ORM follows the <a href=http://en.wikipedia.org/wiki/Active_record_pattern>Active Record</a> design pattern.</li><li>Django Works with: MySQL, SQLite3, PostGreSQL, there&rsquo;s also a Python adapter for MSSQL server, although I&rsquo;ve read that the MS SQL server is not yet super stable.</li><li>Django has built in support for <a href=\"http://docs.djangoproject.com/en/dev/topics/i18n/\">internationalization</a> in both code and templates. It can even handle locale specific date formats and languages that read from right to left!</li><li>Python is relatively easy to learn because the syntax is so minimalistic. There&rsquo;s even a great <a href=\"http://diveintopython.org/\">free online book</a> to get you started.</li><li>Django is stable and is being very actively developed, the user community is growing rapidly. Plus, there&rsquo;s a huge Python community already.</li><li>Comparisons show that building sites in Django is even faster than Ruby on Rails.</li><li>Django&rsquo;s architecture is inherently very pluggable. For example, if I wanted to add blogging functionality to the demo CMS I built, It would be really easy to plug it in, in a few minutes. (styling the templates is what would take a little longer).</li><li>You can define very granular permissions to establish a publishing work-flow that meets any logical requirements.</li><li>It&rsquo;s all open source and it runs beautifully on Apache/mod_python.</li><li>Built-in support for running multiple sites from one admin.</li><li>Django is built, from ground up for perfect URLS. ALL URLs are decoupled from the content. They&rsquo;re pointers, not absolute references to specific documents. This allows for greater flexibility, you can restructure your site, or even change to a different server technology without breaking your old links.</li><li>Powerful <a href=\"http://docs.djangoproject.com/en/dev/topics/cache/\">caching capabilities</a>, very granular if desired. Compatible with <a href=\"http://www.danga.com/memcached/\">memcached</a> for lightning fast caching.</li><li>Includes a very robust inheritance-based <a href=\"http://docs.djangoproject.com/en/dev/topics/templates/\">templating language</a> that helps template developers practice the <a href=http://en.wikipedia.org/wiki/Don%27t_repeat_yourself>DRY principal</a> which helps enforce consistent styling across related pages and sites.</li><li>There is very clean code separation between the templates and the Python code, makes it easy to separate work of designers and developers.</li><li>Python&rsquo;s inventor <a href=\"http://neopythonic.blogspot.com/\">Guido van Rossum</a> who is arguably one of the smartest developers out there calls Django his favorite web framework.</li><li><a href=\"http://jeffcroft.com/\">Jeff Croft</a> also <a href=\"http://blueflavor.com/blog/2007/dec/03/django-a-flexible-choice-for-y/\">wrote a great article</a> about using Django instead of a traditional CMS.</li></ul>","preview":"<p>We&rsquo;ve been exploring options for content management systems at work. So far, I&rsquo;m failing to see any significant benefits of a CMS over simply building the site in <a href=http://www.djangoproject.com>Django</a> and customizing Django&rsquo;s auto-generated admin interface.</p><p>This argument will not hold true for non-developers. If you&rsquo;re just looking for an out-of-the box solution for a simple site with less than 50 pages and you&rsquo;re not looking to create lots of different layouts I recommend a pre-packaged CMS. One of the best is <a href=http://www.wordpress.org>Wordpress.org</a> (it&rsquo;s not just for blogging anymore).</p>"},{"slug":"mint-releases-an-iphone-app","type":"text","date":"2008-12-19T08:00:00.000Z","title":"Mint Releases an iPhone App","old_url":"http://joreteg.com/post/98741807/mint-releases-an-iphone-app","url":"/blog/mint-releases-an-iphone-app","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/12/mint-releases-an-iphone-app.html","markdown":"<p><a href=\"http://www.flickr.com/photos/hjoreteg/3121161454/\" title=\"Mint iPhone App by hjoreteg, on Flickr\"><img src=\"http://farm4.static.flickr.com/3244/3121161454_24b902c0ef.jpg\" width=\"448\" height=\"251\" alt=\"Mint iPhone App\"/></a></p>\n\n<p>A few weeks ago <a href=\"http://joreteg.com/post/98740551/minty-fresh-finances-tracking-your-money-with-mint\">I wrote about Mint.com</a>.</p>\n\n<p>Well, this amazing service just released an iPhone app. It&rsquo;s pretty basic, but it shows you everything you really need to know about your money while you&rsquo;re out and about.</p>\n\n<p>Accessing the main Mint.com website through the Safari browser on the iPhone was a little wonky. I&rsquo;ve been hoping they&rsquo;d release an iPhone app ever since I first started using the site.</p>\n\n<p>Well today is the day, Woohoo! If you haven&rsquo;t already, go <a href=\"http://www.mint.com\">sign up</a> today.</p>","outputFile":"/blog/mint-releases-an-iphone-app.html","html":"<p><a href=\"http://www.flickr.com/photos/hjoreteg/3121161454/\" title=\"Mint iPhone App by hjoreteg, on Flickr\"><img src=http://farm4.static.flickr.com/3244/3121161454_24b902c0ef.jpg width=448 height=251 alt=\"Mint iPhone App\"></a></p><p>A few weeks ago <a href=http://joreteg.com/post/98740551/minty-fresh-finances-tracking-your-money-with-mint>I wrote about Mint.com</a>.</p><p>Well, this amazing service just released an iPhone app. It&rsquo;s pretty basic, but it shows you everything you really need to know about your money while you&rsquo;re out and about.</p><p>Accessing the main Mint.com website through the Safari browser on the iPhone was a little wonky. I&rsquo;ve been hoping they&rsquo;d release an iPhone app ever since I first started using the site.</p><p>Well today is the day, Woohoo! If you haven&rsquo;t already, go <a href=http://www.mint.com>sign up</a> today.</p>","preview":"<p><a href=\"http://www.flickr.com/photos/hjoreteg/3121161454/\" title=\"Mint iPhone App by hjoreteg, on Flickr\"><img src=http://farm4.static.flickr.com/3244/3121161454_24b902c0ef.jpg width=448 height=251 alt=\"Mint iPhone App\"></a></p><p>A few weeks ago <a href=http://joreteg.com/post/98740551/minty-fresh-finances-tracking-your-money-with-mint>I wrote about Mint.com</a>.</p>"},{"slug":"action-plan-get-out-of-debt","type":"text","date":"2008-10-29T07:00:00.000Z","title":"Action Plan: Get out of debt","old_url":"http://joreteg.com/post/98740859/action-plan-get-out-of-debt","url":"/blog/action-plan-get-out-of-debt","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/10/action-plan-get-out-of-debt.html","markdown":"<p>Slavery may have been abolished with the 13th amendment, but millions of Americans are slaves to their debts. The crazy part is that they signed up for it themselves! Until you&rsquo;re free from your unproductive debts, you&rsquo;re not free.</p>\n\n<p>Nothing sucks the life out of you like unproductive debt. As will be discussed in other posts, not all debt is bad. However, odds are pretty good that most personal debts that you have are tying you down, limiting your options, exposing you to too much risk and eating up your paycheck. A good rule of thumb is: Unless the loan helped you buy something that is making you money or you can safely earn a better interest rate than what you&rsquo;re paying, you should never have gotten that loan and you should pay it off A.S.A.P.</p>\n\n<p>One of the best things you can do for yourself is to start getting rid of those bad debts.</p>\n\n<p>To do that successfully, you need a strategy. Many people just try to randomly throw any extra money they can at all the various loans that they have. That approach is tiring, overwhelming and makes it hard to see progress. And frankly, without progress, people give up and stay trapped in debt.</p>\n\n<p>There is a <em>best</em> way to do this. Let&rsquo;s take a look at an example:</p>\n\n<p>Assume you have the following 5 loans:</p>\n\n<p>Car Loan 6% $15,000\nMasterCard at 10% with $4,000\nStudent Loan at 4.75% $43,000\nVisa Card at 19% interest with a balance of $2,000\nA Loan from BestBuy at 7% for $3,500 (you bought a big plasma TV you couldn&rsquo;t afford.)</p>\n\n<p>Where do you start?</p>\n\n<p>You only have so much each month to put toward your loans. So, the trick is to make it go as far as possible.</p>\n\n<p><strong>Step 1: Order them by Interest Rate</strong>\nList all your loans starting with the highest interest to the lowest. It doesn&rsquo;t matter whether the balance is $20,000 or $50. Put them in order of interest rate.</p>\n\n<p>Continuing with our example our list would be rearranged as follows:</p>\n\n<p>19% Visa Card \n10% MasterCard\n7% BestBuy loan\n6% Car Loan\n4.75% Student Loan</p>\n\n<p><strong>Step 2: Work out your budget </strong>\nFigure out just how much of your earnings you can put toward your loans each month. For our example let&rsquo;s say you have $2000 each month to put toward your loans.</p>\n\n<p>One of the best ways to ensure that you have enough money to pay your loans is to make the payments right away when you get your paycheck. This way you spend what&rsquo;s left instead of what&rsquo;s using what&rsquo;s left to pay back your loans.</p>\n\n<p><strong>Step 3: Target your first loan</strong>\nNow, pay minimum payments on every loan except for the first one on your list. Do NOT pay any more than minimum payments on any of your other loans. All your extra payments should be put exclusively toward the loan with the highest interest rate. Otherwise, you&rsquo;re paying more interest than you need to.</p>\n\n<p>Notice that interest rate is the only thing that matters here. No matter what the balance is on your other loans, only pay minimums on your other loans. But go crazy on your first one. Get that sucker paid off!</p>\n\n<p><strong>Step 4: Knock-em down </strong>\nHere is where you&rsquo;ve got to stay strong. Once your first loan is paid off, now you may feel like some of the pressure is off and you can relax a bit more. That will screw up your plan.</p>\n\n<p>If you&rsquo;ve gotten this far, you&rsquo;ve already proven to yourself that you CAN put a certain amount of money each month toward your loans. So don&rsquo;t stop doing now, this is where you can really start seeing fast progress!</p>\n\n<p>Now you simply add the entire amount you were putting toward the first loan to the minimum payment on the second loan on your list. Continue this pattern way until you&rsquo;re out of debt. This will ensure that you pay the minimum amount of interest necessary and get out of debt as quickly as possible.</p>\n\n<p><strong>A few more thoughts</strong>\nAs you start paying off your first couple of loans you&rsquo;ll get to the point where you&rsquo;re putting a LOT more than the minimum payment toward the loan that is now at the top of your list. It may be tempting to spend some of that money. But, paying more than minimum payments is the only way to make significant progress. In fact, in some cases, like high-interest credit cards, you won&rsquo;t EVER pay it off with minimum payments. Some loans are designed to keep you in debt forever. When you&rsquo;re making big payments you&rsquo;ll see progress and you&rsquo;ll have the satisfaction of knowing that you&rsquo;re paying the least amount of interest possible.</p>\n\n<p>Now&rsquo;s the time to start getting out of bad debt and stop buying stuff on credit. If you can&rsquo;t pay it by the end of the month and it isn&rsquo;t going to help you make more money, you have no business buying it! Be less stupid next time, live below your means. It&rsquo;ll change your life.</p>","outputFile":"/blog/action-plan-get-out-of-debt.html","html":"<p>Slavery may have been abolished with the 13th amendment, but millions of Americans are slaves to their debts. The crazy part is that they signed up for it themselves! Until you&rsquo;re free from your unproductive debts, you&rsquo;re not free.</p><p>Nothing sucks the life out of you like unproductive debt. As will be discussed in other posts, not all debt is bad. However, odds are pretty good that most personal debts that you have are tying you down, limiting your options, exposing you to too much risk and eating up your paycheck. A good rule of thumb is: Unless the loan helped you buy something that is making you money or you can safely earn a better interest rate than what you&rsquo;re paying, you should never have gotten that loan and you should pay it off A.S.A.P.</p><p>One of the best things you can do for yourself is to start getting rid of those bad debts.</p><p>To do that successfully, you need a strategy. Many people just try to randomly throw any extra money they can at all the various loans that they have. That approach is tiring, overwhelming and makes it hard to see progress. And frankly, without progress, people give up and stay trapped in debt.</p><p>There is a <em>best</em> way to do this. Let&rsquo;s take a look at an example:</p><p>Assume you have the following 5 loans:</p><p>Car Loan 6% $15,000 MasterCard at 10% with $4,000 Student Loan at 4.75% $43,000 Visa Card at 19% interest with a balance of $2,000 A Loan from BestBuy at 7% for $3,500 (you bought a big plasma TV you couldn&rsquo;t afford.)</p><p>Where do you start?</p><p>You only have so much each month to put toward your loans. So, the trick is to make it go as far as possible.</p><p><strong>Step 1: Order them by Interest Rate</strong> List all your loans starting with the highest interest to the lowest. It doesn&rsquo;t matter whether the balance is $20,000 or $50. Put them in order of interest rate.</p><p>Continuing with our example our list would be rearranged as follows:</p><p>19% Visa Card 10% MasterCard 7% BestBuy loan 6% Car Loan 4.75% Student Loan</p><p><strong>Step 2: Work out your budget</strong> Figure out just how much of your earnings you can put toward your loans each month. For our example let&rsquo;s say you have $2000 each month to put toward your loans.</p><p>One of the best ways to ensure that you have enough money to pay your loans is to make the payments right away when you get your paycheck. This way you spend what&rsquo;s left instead of what&rsquo;s using what&rsquo;s left to pay back your loans.</p><p><strong>Step 3: Target your first loan</strong> Now, pay minimum payments on every loan except for the first one on your list. Do NOT pay any more than minimum payments on any of your other loans. All your extra payments should be put exclusively toward the loan with the highest interest rate. Otherwise, you&rsquo;re paying more interest than you need to.</p><p>Notice that interest rate is the only thing that matters here. No matter what the balance is on your other loans, only pay minimums on your other loans. But go crazy on your first one. Get that sucker paid off!</p><p><strong>Step 4: Knock-em down</strong> Here is where you&rsquo;ve got to stay strong. Once your first loan is paid off, now you may feel like some of the pressure is off and you can relax a bit more. That will screw up your plan.</p><p>If you&rsquo;ve gotten this far, you&rsquo;ve already proven to yourself that you CAN put a certain amount of money each month toward your loans. So don&rsquo;t stop doing now, this is where you can really start seeing fast progress!</p><p>Now you simply add the entire amount you were putting toward the first loan to the minimum payment on the second loan on your list. Continue this pattern way until you&rsquo;re out of debt. This will ensure that you pay the minimum amount of interest necessary and get out of debt as quickly as possible.</p><p><strong>A few more thoughts</strong> As you start paying off your first couple of loans you&rsquo;ll get to the point where you&rsquo;re putting a LOT more than the minimum payment toward the loan that is now at the top of your list. It may be tempting to spend some of that money. But, paying more than minimum payments is the only way to make significant progress. In fact, in some cases, like high-interest credit cards, you won&rsquo;t EVER pay it off with minimum payments. Some loans are designed to keep you in debt forever. When you&rsquo;re making big payments you&rsquo;ll see progress and you&rsquo;ll have the satisfaction of knowing that you&rsquo;re paying the least amount of interest possible.</p><p>Now&rsquo;s the time to start getting out of bad debt and stop buying stuff on credit. If you can&rsquo;t pay it by the end of the month and it isn&rsquo;t going to help you make more money, you have no business buying it! Be less stupid next time, live below your means. It&rsquo;ll change your life.</p>","preview":"<p>Slavery may have been abolished with the 13th amendment, but millions of Americans are slaves to their debts. The crazy part is that they signed up for it themselves! Until you&rsquo;re free from your unproductive debts, you&rsquo;re not free.</p><p>Nothing sucks the life out of you like unproductive debt. As will be discussed in other posts, not all debt is bad. However, odds are pretty good that most personal debts that you have are tying you down, limiting your options, exposing you to too much risk and eating up your paycheck. A good rule of thumb is: Unless the loan helped you buy something that is making you money or you can safely earn a better interest rate than what you&rsquo;re paying, you should never have gotten that loan and you should pay it off A.S.A.P.</p>"},{"slug":"minty-fresh-finances-tracking-your-money-with-mint","type":"text","date":"2008-10-15T07:00:00.000Z","title":"Minty Fresh Finances, tracking your money with Mint.com","old_url":"http://joreteg.com/post/98740551/minty-fresh-finances-tracking-your-money-with-mint","url":"/blog/minty-fresh-finances-tracking-your-money-with-mint","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/10/minty-fresh-finances-tracking-your-money-with-mint.html","markdown":"<p>It&rsquo;s official, you no longer have any excuses for not tracking your money.</p>\n\n<p>I&rsquo;m not talking about using clunky (and costly) desktop software like Quicken and Microsoft Money. Plus, no one wants to type in or categorize all their transactions.</p>\n\n<p>Say hello to a free, web-based alternative: <a href=\"http://www.mint.com/\">Mint.com</a></p>\n\n<p><a href=\"http://www.mint.com/\"><img src=\"http://1.bp.blogspot.com/_Rf-gIgFQFeA/SPavDOeM6lI/AAAAAAAAArs/PqPgj5YGAMY/s400/Mint_Screen_Shot.png\" alt=\"Mint.com Screenshot\"/></a>\nMint is a well-designed web app that automatically aggregates financial data from all your various online financial services. It imports, categorizes, and presents you with an up-to-the-minute snapshot of your finances.</p>\n\n<p>It works for a wide range of institutions:</p>\n\n<ol><li>Bank accounts</li>\n<li>Investment/Retirement Accounts</li>\n<li>Mortgages</li>\n<li>Student Loans</li>\n<li>Other loans</li>\n</ol><p>It&rsquo;s so simple. Your entire financial life in one interface.</p>\n\n<p>If you want detailed budgeting you may have to stick to a more traditional solution. However, if you take the cost of your time into consideration, I believe that Mint will give you the best return on investment.</p>\n\n<p>I tested Mint when it was first released in September, 2007. At the time it was innovative, but lacked some of the features I wanted. Today, Mint has matured into a very useful tool with a much-improved interface.</p>\n\n<p>Try it out, knowing where your money goes is the first step to getting your finances on track. You&rsquo;ve got nothing to lose.</p>\n\n<p>Go <a href=\"http://www.mint.com\">sign up now</a>. It&rsquo;s quick and painless.</p>","outputFile":"/blog/minty-fresh-finances-tracking-your-money-with-mint.html","html":"<p>It&rsquo;s official, you no longer have any excuses for not tracking your money.</p><p>I&rsquo;m not talking about using clunky (and costly) desktop software like Quicken and Microsoft Money. Plus, no one wants to type in or categorize all their transactions.</p><p>Say hello to a free, web-based alternative: <a href=\"http://www.mint.com/\">Mint.com</a></p><p><a href=\"http://www.mint.com/\"><img src=http://1.bp.blogspot.com/_Rf-gIgFQFeA/SPavDOeM6lI/AAAAAAAAArs/PqPgj5YGAMY/s400/Mint_Screen_Shot.png alt=\"Mint.com Screenshot\"></a> Mint is a well-designed web app that automatically aggregates financial data from all your various online financial services. It imports, categorizes, and presents you with an up-to-the-minute snapshot of your finances.</p><p>It works for a wide range of institutions:</p><p><ol><li>Bank accounts</li></ol></p><p><li>Investment/Retirement Accounts</li></p><p><li>Mortgages</li></p><p><li>Student Loans</li></p><p><li>Other loans</li></p><p>It&rsquo;s so simple. Your entire financial life in one interface.</p><p></p><p>If you want detailed budgeting you may have to stick to a more traditional solution. However, if you take the cost of your time into consideration, I believe that Mint will give you the best return on investment.</p><p>I tested Mint when it was first released in September, 2007. At the time it was innovative, but lacked some of the features I wanted. Today, Mint has matured into a very useful tool with a much-improved interface.</p><p>Try it out, knowing where your money goes is the first step to getting your finances on track. You&rsquo;ve got nothing to lose.</p><p>Go <a href=http://www.mint.com>sign up now</a>. It&rsquo;s quick and painless.</p>","preview":"<p>It&rsquo;s official, you no longer have any excuses for not tracking your money.</p><p>I&rsquo;m not talking about using clunky (and costly) desktop software like Quicken and Microsoft Money. Plus, no one wants to type in or categorize all their transactions.</p><p>Say hello to a free, web-based alternative: <a href=\"http://www.mint.com/\">Mint.com</a></p>"},{"slug":"the-gaping-hole-in-american-education","type":"text","date":"2008-10-12T07:00:00.000Z","title":"The Gaping Hole in American Education","old_url":"http://joreteg.com/post/98739682/the-gaping-hole-in-american-education","url":"/blog/the-gaping-hole-in-american-education","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/10/the-gaping-hole-in-american-education.html","markdown":"<p>In school we&rsquo;re taught writing, reading, and arithmetic. We study history, science, sociology, technology and even the &ldquo;birds and the bees.&rdquo;</p>\n\n<p>But, on graduation day, how much does the average American know about money?</p>\n\n<p>The answer: pretty much nothing.</p>\n\n<p><img src=\"http://2.bp.blogspot.com/_Rf-gIgFQFeA/SPJw0BXp1XI/AAAAAAAAArM/eTcvUu2EoMo/s400/iStock_000006667499XSmall.jpg\" alt=\"broken piggy bank\"/></p>\n\n<p>We may have taken an economics class or two. But we are never really taught how to handle our own finances, much less, even begin to understand the finances of our country.</p>\n\n<p>Somehow that topic of money has been lumped into the category of things that parents are supposed to teach their children. But parents cannot teach things that they themselves, often times, don&rsquo;t understand.</p>\n\n<p>In the last few months we&rsquo;ve seen a pretty severe melt-down of our credit markets. Yet, Average Joe has no clue what is going on or who is to blame. Everyone loves to point fingers at shady mortgage brokers, big mortgage companies, and politicians. Don&rsquo;t get me wrong, they certainly didn&rsquo;t help the situation, but the truth is, thousands of borrowers signed loan documents that a financially savvy person would never have signed.</p>\n\n<p>Another consequence of ignorance is the fact that Americans have amassed an astounding $2,500,000,000,000 in consumer debt (This does not include real estate loans, source: Federal Reserve). This is essentially high-interest credit cards and car loans.</p>\n\n<p>Finances are often stated as one of the most common causes of divorce. The consequences and costs of our financial ignorance is noticeable everywhere.</p>\n\n<p>It&rsquo;s time to get smart about our finances. It&rsquo;s time we educate ourselves and our children, we owe it to the next generation.</p>\n\n<p>What has been your experience? When you first moved out on your own, did you feel well equipped to handle your finances? Do you understand what is happening in our credit and stock markets right now? What types of things would you like to see this blog cover?</p>","outputFile":"/blog/the-gaping-hole-in-american-education.html","html":"<p>In school we&rsquo;re taught writing, reading, and arithmetic. We study history, science, sociology, technology and even the &ldquo;birds and the bees.&rdquo;</p><p>But, on graduation day, how much does the average American know about money?</p><p>The answer: pretty much nothing.</p><p><img src=http://2.bp.blogspot.com/_Rf-gIgFQFeA/SPJw0BXp1XI/AAAAAAAAArM/eTcvUu2EoMo/s400/iStock_000006667499XSmall.jpg alt=\"broken piggy bank\"></p><p>We may have taken an economics class or two. But we are never really taught how to handle our own finances, much less, even begin to understand the finances of our country.</p><p>Somehow that topic of money has been lumped into the category of things that parents are supposed to teach their children. But parents cannot teach things that they themselves, often times, don&rsquo;t understand.</p><p>In the last few months we&rsquo;ve seen a pretty severe melt-down of our credit markets. Yet, Average Joe has no clue what is going on or who is to blame. Everyone loves to point fingers at shady mortgage brokers, big mortgage companies, and politicians. Don&rsquo;t get me wrong, they certainly didn&rsquo;t help the situation, but the truth is, thousands of borrowers signed loan documents that a financially savvy person would never have signed.</p><p>Another consequence of ignorance is the fact that Americans have amassed an astounding $2,500,000,000,000 in consumer debt (This does not include real estate loans, source: Federal Reserve). This is essentially high-interest credit cards and car loans.</p><p>Finances are often stated as one of the most common causes of divorce. The consequences and costs of our financial ignorance is noticeable everywhere.</p><p>It&rsquo;s time to get smart about our finances. It&rsquo;s time we educate ourselves and our children, we owe it to the next generation.</p><p>What has been your experience? When you first moved out on your own, did you feel well equipped to handle your finances? Do you understand what is happening in our credit and stock markets right now? What types of things would you like to see this blog cover?</p>","preview":"<p>In school we&rsquo;re taught writing, reading, and arithmetic. We study history, science, sociology, technology and even the &ldquo;birds and the bees.&rdquo;</p><p>But, on graduation day, how much does the average American know about money?</p><p>The answer: pretty much nothing.</p><p><img src=http://2.bp.blogspot.com/_Rf-gIgFQFeA/SPJw0BXp1XI/AAAAAAAAArM/eTcvUu2EoMo/s400/iStock_000006667499XSmall.jpg alt=\"broken piggy bank\"></p>"},{"slug":"naming-a-business-tips-from-namelab","type":"text","date":"2008-04-07T07:00:00.000Z","title":"Naming a Business, tips from NameLab","old_url":"http://joreteg.com/post/98738163/naming-a-business-tips-from-namelab","url":"/blog/naming-a-business-tips-from-namelab","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/04/naming-a-business-tips-from-namelab.html","markdown":"<p>In the old days a business name wasn&rsquo;t considered so important. No overpaid creative geniuses were brought in to create a thrilling name like &ldquo;General Motors.&rdquo;</p>\n\n<p>But, I assure you that since then, GM has paid big money to consulting firms to create names for their brands and vehicles.</p>\n\n<p>A Chicago-based consulting company called NameLab does nothing but come up with product and company names (<a href=\"http://www.namelab.com\">http://namelab.com</a>). A few of their more well known creations include: Olive Garden, Acura, CompUSA, LUXOR (LV casino), AutoZone.</p>\n\n<p>So, what do they have to say about what makes a good name? They use all types of fancy language to describe their naming strategy. After sorting through it and adding a few thoughts of my own here are my &ldquo;take-home&rdquo; points:</p>\n\n<ol><li><p>Names derive much of their meaning from experiences with similar products or services. For example, if is started a website called schmoogle, you would doubtlessly  begin forming associations with the search giant. Therefore, you&rsquo;ll want to ensure that similar sounding names/brands carry positive connotations. You&rsquo;ll also want to be careful with associating too closely with another brand, if they ruin their reputation, it could drag your brand down with it. I wouldn&rsquo;t recommend naming an accounting firm anything that starts with &ldquo;EN&rdquo; or ends in &ldquo;RON&rdquo;.</p></li>\n<li><p>Unlike advertising that describes attributes or adjectives of the product, the product name is much more definitive. The name is the &ldquo;subject&rdquo; of the sentence. It doesn&rsquo;t just tell us what the product <em>does</em>, it tells us what it <em>is</em>. Therefore, don&rsquo;t pick a name that &ldquo;describes&rdquo; your product or company. Instead, let your name be something that can stand on it&rsquo;s own merit. Be inventive, create a brand new word.</p></li>\n<li><p>Function matters. NameLab analyzes a name for its &ldquo;speech stream visibility&rdquo;, which is the probability that a word will be recognized in a normal spoken stream of English speech. Think &ldquo;iPod&rdquo; or &ldquo;Google&rdquo; or &ldquo;Yahoo!&rdquo; These names all contain distinctive sounds that make them POP in a normal conversation. The same is true for &ldquo;Notational Visibility&rdquo;, which is the probability that a word will stand out from a typed text, such as a newspaper column. Again, think about the naming convention Apple has used in putting a small letter &ldquo;i&rdquo; in front of all their product names. They don&rsquo;t follow conventional capitalization rules. There&rsquo;s a reason it&rsquo;s written as iPod instead of Ipod. &ldquo;iPod&rdquo; is far more unusual, hence it&rsquo;s more noticeable and memorable.</p></li>\n</ol>","outputFile":"/blog/naming-a-business-tips-from-namelab.html","html":"<p>In the old days a business name wasn&rsquo;t considered so important. No overpaid creative geniuses were brought in to create a thrilling name like &ldquo;General Motors.&rdquo;</p><p>But, I assure you that since then, GM has paid big money to consulting firms to create names for their brands and vehicles.</p><p>A Chicago-based consulting company called NameLab does nothing but come up with product and company names (<a href=http://www.namelab.com>http://namelab.com</a>). A few of their more well known creations include: Olive Garden, Acura, CompUSA, LUXOR (LV casino), AutoZone.</p><p>So, what do they have to say about what makes a good name? They use all types of fancy language to describe their naming strategy. After sorting through it and adding a few thoughts of my own here are my &ldquo;take-home&rdquo; points:</p><ol><li><p>Names derive much of their meaning from experiences with similar products or services. For example, if is started a website called schmoogle, you would doubtlessly begin forming associations with the search giant. Therefore, you&rsquo;ll want to ensure that similar sounding names/brands carry positive connotations. You&rsquo;ll also want to be careful with associating too closely with another brand, if they ruin their reputation, it could drag your brand down with it. I wouldn&rsquo;t recommend naming an accounting firm anything that starts with &ldquo;EN&rdquo; or ends in &ldquo;RON&rdquo;.</p></li><li><p>Unlike advertising that describes attributes or adjectives of the product, the product name is much more definitive. The name is the &ldquo;subject&rdquo; of the sentence. It doesn&rsquo;t just tell us what the product <em>does</em>, it tells us what it <em>is</em>. Therefore, don&rsquo;t pick a name that &ldquo;describes&rdquo; your product or company. Instead, let your name be something that can stand on it&rsquo;s own merit. Be inventive, create a brand new word.</p></li><li><p>Function matters. NameLab analyzes a name for its &ldquo;speech stream visibility&rdquo;, which is the probability that a word will be recognized in a normal spoken stream of English speech. Think &ldquo;iPod&rdquo; or &ldquo;Google&rdquo; or &ldquo;Yahoo!&rdquo; These names all contain distinctive sounds that make them POP in a normal conversation. The same is true for &ldquo;Notational Visibility&rdquo;, which is the probability that a word will stand out from a typed text, such as a newspaper column. Again, think about the naming convention Apple has used in putting a small letter &ldquo;i&rdquo; in front of all their product names. They don&rsquo;t follow conventional capitalization rules. There&rsquo;s a reason it&rsquo;s written as iPod instead of Ipod. &ldquo;iPod&rdquo; is far more unusual, hence it&rsquo;s more noticeable and memorable.</p></li></ol>","preview":"<p>In the old days a business name wasn&rsquo;t considered so important. No overpaid creative geniuses were brought in to create a thrilling name like &ldquo;General Motors.&rdquo;</p><p>But, I assure you that since then, GM has paid big money to consulting firms to create names for their brands and vehicles.</p>"},{"slug":"get-a-mentor","type":"text","date":"2008-04-06T07:00:00.000Z","title":"Get a Mentor","old_url":"http://joreteg.com/post/98737599/get-a-mentor","url":"/blog/get-a-mentor","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/04/get-a-mentor.html","markdown":"<p>Starting a business is tough. Many businesses can take 5 years to really get their footing. If you&rsquo;re going to commit several years of your life to building a business, you want to be sure that what you have is viable. Truth is, even if you have a viable model, there are going to be times when you won&rsquo;t believe that it is.</p>\n\n<p>I learned a huge lesson this last week.</p>\n\n<p>GET A MENTOR!</p>\n\n<p>They say the number one reason businesses fail is undercapitalization. I disagree. If entrepreneurs sought qualified advice, they would know that they need more money to pull it off. The real reason for failure is that they think they don&rsquo;t need advice!</p>\n\n<p>This week I contacted an acquaintance whom I didn&rsquo;t know so well. He goes to my church and he&rsquo;s friends with my wife&rsquo;s dad. I&rsquo;ve spoken to him a few times and he knew that I was working on some &ldquo;business related to real estate.&rdquo; All I knew about him was that he started a medical equipment business many years ago that has been very successful.</p>\n\n<p>I wrote him an email. I expressed my frustration with the lack of qualified advice and just asked him if he&rsquo;d be willing to sit down with me for a few minutes. I wanted to hear about his experiences with getting his business going and get some feedback on what I was doing with mine.</p>\n\n<p><strong>It was one of the most encouraging meetings of my life</strong>. He has been where I am. He worked hard and diligently on what seemed to be a worthwhile venture (like I&rsquo;m doing), and he&rsquo;s now a very successful man with a 20-employee business. In our meeting he did a lot of listening and offered some great insights. He could also relate to the personal and family challenges that come along with making a commitment to starting a business.</p>\n\n<p>We decided to stay in touch and we&rsquo;ve been emailing since.</p>\n\n<p>My only regret is that I didn&rsquo;t contact him sooner!</p>\n\n<p>Entrepreneurs are by definition &ldquo;do-it-your-selfers.&rdquo; However, I&rsquo;m realizing, that this stubborn &ldquo;I can do it all myself&rdquo; attitude is often a hindrance to their own success.</p>\n\n<p>Take the time to seek well-qualified advice. If you ask humbly and graciously many people who have been through it will be happy to help. It&rsquo;s well worth the effort.</p>","outputFile":"/blog/get-a-mentor.html","html":"<p>Starting a business is tough. Many businesses can take 5 years to really get their footing. If you&rsquo;re going to commit several years of your life to building a business, you want to be sure that what you have is viable. Truth is, even if you have a viable model, there are going to be times when you won&rsquo;t believe that it is.</p><p>I learned a huge lesson this last week.</p><p>GET A MENTOR!</p><p>They say the number one reason businesses fail is undercapitalization. I disagree. If entrepreneurs sought qualified advice, they would know that they need more money to pull it off. The real reason for failure is that they think they don&rsquo;t need advice!</p><p>This week I contacted an acquaintance whom I didn&rsquo;t know so well. He goes to my church and he&rsquo;s friends with my wife&rsquo;s dad. I&rsquo;ve spoken to him a few times and he knew that I was working on some &ldquo;business related to real estate.&rdquo; All I knew about him was that he started a medical equipment business many years ago that has been very successful.</p><p>I wrote him an email. I expressed my frustration with the lack of qualified advice and just asked him if he&rsquo;d be willing to sit down with me for a few minutes. I wanted to hear about his experiences with getting his business going and get some feedback on what I was doing with mine.</p><p><strong>It was one of the most encouraging meetings of my life</strong>. He has been where I am. He worked hard and diligently on what seemed to be a worthwhile venture (like I&rsquo;m doing), and he&rsquo;s now a very successful man with a 20-employee business. In our meeting he did a lot of listening and offered some great insights. He could also relate to the personal and family challenges that come along with making a commitment to starting a business.</p><p>We decided to stay in touch and we&rsquo;ve been emailing since.</p><p>My only regret is that I didn&rsquo;t contact him sooner!</p><p>Entrepreneurs are by definition &ldquo;do-it-your-selfers.&rdquo; However, I&rsquo;m realizing, that this stubborn &ldquo;I can do it all myself&rdquo; attitude is often a hindrance to their own success.</p><p>Take the time to seek well-qualified advice. If you ask humbly and graciously many people who have been through it will be happy to help. It&rsquo;s well worth the effort.</p>","preview":"<p>Starting a business is tough. Many businesses can take 5 years to really get their footing. If you&rsquo;re going to commit several years of your life to building a business, you want to be sure that what you have is viable. Truth is, even if you have a viable model, there are going to be times when you won&rsquo;t believe that it is.</p>"},{"slug":"giving-meaningful-presentations","type":"text","date":"2008-02-11T08:00:00.000Z","title":"Giving Meaningful Presentations","old_url":"http://joreteg.com/post/98737181/giving-meaningful-presentations","url":"/blog/giving-meaningful-presentations","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/02/giving-meaningful-presentations.html","markdown":"<p>Today will forever change how I approach giving a presentation.</p>\n\n<p>This morning I had the most successful presentation of my life. It wasn&rsquo;t because it was a big audience or because I wowed them with my wit. It was a short, simple presentation about HouseFLIX to approximately 35 real estate agents at their office. No big deal. But, everybody followed along completely, they understood and connected with what I said, and Travis got a slew of new customers as a result.</p>\n\n<p>I changed my normal presentation strategy in 2 ways. I hope I never forget them.</p>\n\n<p>First, I stripped it down to the most simple message I could give and still be coherent. (My entire presentation took up 4 slides. There was 1 concept per slide.)</p>\n\n<p>Second, was how I involved the audience, here&rsquo;s where I want to elaborate&hellip;</p>\n\n<p>Presenting is about communication. It&rsquo;s not about what you say as the presenter, it&rsquo;s all about what the audience hears and understands.</p>\n\n<p>It&rsquo;s possible to give a brilliant, eloquent and totally useless speech. People do it all the time. Those types of speeches may leave  audience impressed with the presenter&rsquo;s intelligence. But, unless the audience understood his message and can still remember it 2 weeks later. HE FAILED.</p>\n\n<p>Most presentations focus on facts. People simply go and rattle off a bunch of information and statistics. If presented well, it might be interesting at the time, but most people don&rsquo;t remember those stats 5 or 10 minutes later (Much less 5 or 10 days).</p>\n\n<p>A better technique is to tell a story. Good stories create &ldquo;knowledge gaps&rdquo; where a few important pieces of information are missing and the audience stays focused to satisfy their curiosity. This improves recollection, but it&rsquo;s still not great.</p>\n\n<p>The ultimate communication technique, even beyond story telling is when you can put your audience <em>in</em> the story. When you can get your audience to use their own imaginations to visualize a situation that you paint for them, it triggers all sorts of senses, emotions and responses in people&rsquo;s brains. Studies suggest that when people visualize a situation, their brain goes through nearly the same things it would if they actually experienced it! As you can imagine, this dramatically increases recollection.</p>\n\n<p>I began the presentation with a slide of a young, wealthy, professional-looking couple staring at the audience with an intense, critical look on their faces. Then I painted a picture for the audience including names and occupations of the couple in the picture. I told them to imagine that they were in the middle of a listing presentation with this couple. Then &ldquo;as the gentleman in the picture&rdquo; I asked them a very difficult, probing question about how they would market their home on the Internet. I kept probing them and providing details to make sure they would <em>feel</em> the situation and the stress of being put on the spot. Then I offered an alternative answer and told them to imagine answering the question in that way. Once again, hoping they would feel the confidence of being able to provide such a positive, confident answer to the fictional character&rsquo;s tough question.</p>\n\n<p>They were riveted. It was incredible. It was a situation they had all experienced. It played on fears that they could all relate to. Then it gave them the solution that resolved the situation. They were totally &ldquo;there&rdquo; in that situation.</p>\n\n<p>We then reinforced the same message by having the picture of the same couple on the brochure that we handed them. Essentially, it was almost like an outline of the presentation. It was the best response we&rsquo;ve ever received. The visualization technique seems to be really powerful.</p>","outputFile":"/blog/giving-meaningful-presentations.html","html":"<p>Today will forever change how I approach giving a presentation.</p><p>This morning I had the most successful presentation of my life. It wasn&rsquo;t because it was a big audience or because I wowed them with my wit. It was a short, simple presentation about HouseFLIX to approximately 35 real estate agents at their office. No big deal. But, everybody followed along completely, they understood and connected with what I said, and Travis got a slew of new customers as a result.</p><p>I changed my normal presentation strategy in 2 ways. I hope I never forget them.</p><p>First, I stripped it down to the most simple message I could give and still be coherent. (My entire presentation took up 4 slides. There was 1 concept per slide.)</p><p>Second, was how I involved the audience, here&rsquo;s where I want to elaborate&hellip;</p><p>Presenting is about communication. It&rsquo;s not about what you say as the presenter, it&rsquo;s all about what the audience hears and understands.</p><p>It&rsquo;s possible to give a brilliant, eloquent and totally useless speech. People do it all the time. Those types of speeches may leave audience impressed with the presenter&rsquo;s intelligence. But, unless the audience understood his message and can still remember it 2 weeks later. HE FAILED.</p><p>Most presentations focus on facts. People simply go and rattle off a bunch of information and statistics. If presented well, it might be interesting at the time, but most people don&rsquo;t remember those stats 5 or 10 minutes later (Much less 5 or 10 days).</p><p>A better technique is to tell a story. Good stories create &ldquo;knowledge gaps&rdquo; where a few important pieces of information are missing and the audience stays focused to satisfy their curiosity. This improves recollection, but it&rsquo;s still not great.</p><p>The ultimate communication technique, even beyond story telling is when you can put your audience <em>in</em> the story. When you can get your audience to use their own imaginations to visualize a situation that you paint for them, it triggers all sorts of senses, emotions and responses in people&rsquo;s brains. Studies suggest that when people visualize a situation, their brain goes through nearly the same things it would if they actually experienced it! As you can imagine, this dramatically increases recollection.</p><p>I began the presentation with a slide of a young, wealthy, professional-looking couple staring at the audience with an intense, critical look on their faces. Then I painted a picture for the audience including names and occupations of the couple in the picture. I told them to imagine that they were in the middle of a listing presentation with this couple. Then &ldquo;as the gentleman in the picture&rdquo; I asked them a very difficult, probing question about how they would market their home on the Internet. I kept probing them and providing details to make sure they would <em>feel</em> the situation and the stress of being put on the spot. Then I offered an alternative answer and told them to imagine answering the question in that way. Once again, hoping they would feel the confidence of being able to provide such a positive, confident answer to the fictional character&rsquo;s tough question.</p><p>They were riveted. It was incredible. It was a situation they had all experienced. It played on fears that they could all relate to. Then it gave them the solution that resolved the situation. They were totally &ldquo;there&rdquo; in that situation.</p><p>We then reinforced the same message by having the picture of the same couple on the brochure that we handed them. Essentially, it was almost like an outline of the presentation. It was the best response we&rsquo;ve ever received. The visualization technique seems to be really powerful.</p>","preview":"<p>Today will forever change how I approach giving a presentation.</p><p>This morning I had the most successful presentation of my life. It wasn&rsquo;t because it was a big audience or because I wowed them with my wit. It was a short, simple presentation about HouseFLIX to approximately 35 real estate agents at their office. No big deal. But, everybody followed along completely, they understood and connected with what I said, and Travis got a slew of new customers as a result.</p>"},{"slug":"how-to-handle-competition","type":"text","date":"2008-02-07T08:00:00.000Z","title":"How to handle Competition","old_url":"http://joreteg.com/post/98736662/how-to-handle-competition","url":"/blog/how-to-handle-competition","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/02/how-to-handle-competition.html","markdown":"<p>How do you handle competition in a new industry? If you&rsquo;re one of the first in a new and appealing market, you&rsquo;re doubtlessly going to experience imitators. It shouldn&rsquo;t be discouraging. If anything, it&rsquo;s a compliment. We&rsquo;re experiencing that at HouseFLIX.</p>\n\n<p>It means we&rsquo;re doing something right and something worth copying and that&rsquo;s a good thing.</p>\n\n<p>We don&rsquo;t feel immediately threatened by any of our competitors, but a problem occurs if enough new emergents appear and there are no clear leaders. Because, then it becomes a proven and attractive new market for a bigger company with far greater resources. If there are no clear leaders, then they&rsquo;ll design their own system and cherry-pick the best strategy rather than buy anyone out. That&rsquo;s no good for any of the smaller players.</p>\n\n<p>The big companies experience similar situations all the time. Look at Microsoft&rsquo;s offer to buy Yahoo. They decided that they have to merge resources in order to give Google a worthy competitor in the online advertising industry.</p>\n\n<p>Perhaps smaller companies have to learn to do the same.</p>","outputFile":"/blog/how-to-handle-competition.html","html":"<p>How do you handle competition in a new industry? If you&rsquo;re one of the first in a new and appealing market, you&rsquo;re doubtlessly going to experience imitators. It shouldn&rsquo;t be discouraging. If anything, it&rsquo;s a compliment. We&rsquo;re experiencing that at HouseFLIX.</p><p>It means we&rsquo;re doing something right and something worth copying and that&rsquo;s a good thing.</p><p>We don&rsquo;t feel immediately threatened by any of our competitors, but a problem occurs if enough new emergents appear and there are no clear leaders. Because, then it becomes a proven and attractive new market for a bigger company with far greater resources. If there are no clear leaders, then they&rsquo;ll design their own system and cherry-pick the best strategy rather than buy anyone out. That&rsquo;s no good for any of the smaller players.</p><p>The big companies experience similar situations all the time. Look at Microsoft&rsquo;s offer to buy Yahoo. They decided that they have to merge resources in order to give Google a worthy competitor in the online advertising industry.</p><p>Perhaps smaller companies have to learn to do the same.</p>","preview":"<p>How do you handle competition in a new industry? If you&rsquo;re one of the first in a new and appealing market, you&rsquo;re doubtlessly going to experience imitators. It shouldn&rsquo;t be discouraging. If anything, it&rsquo;s a compliment. We&rsquo;re experiencing that at HouseFLIX.</p><p>It means we&rsquo;re doing something right and something worth copying and that&rsquo;s a good thing.</p>"},{"slug":"expected-outcomes-handling-failure","type":"text","date":"2008-01-14T08:00:00.000Z","title":"Expected Outcomes, Handling Failure","old_url":"http://joreteg.com/post/98736283/expected-outcomes-handling-failure","url":"/blog/expected-outcomes-handling-failure","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2008/01/expected-outcomes-handling-failure.html","markdown":"<p>Despite calculated actions and contingency plans it&rsquo;s amazing how often the outcome of our efforts differs from how we imagine it. We&rsquo;re by no means consistent, no matter what lengths we go to to produce consistent results.</p>\n\n<p>That can be de-motivating for some, but on further exploration you realize it&rsquo;s not a big deal. In fact, if you stop to think about the number of contingencies involved in a given effort, it&rsquo;s amazing that we can produce any semblance of consistency.</p>\n\n<p>Imagine a basketball player taking a shot during an NBA game. Even a super star like Kobe Bryant will miss his shot 56% of the time. Typically a 56% failing rate is nothing to get very excited about. If you fail more than half the times you try something that&rsquo;s anything but consistent.</p>\n\n<p>What goes into those odds? How was Kobe being guarded, was he wide open, was he doing a layup or a 3 pointer, was he fresh off the bench, was he tired, did he have any nagging injuries, were his hands too sweaty, did he have a clear view of the hoop, was he squared up, did he get enough sleep the night before, did he eat his wheaties&hellip; you get my point.</p>\n\n<p>If you think about it there are always going to be lots contingencies that affect the consistency of the outcomes. The only think worth sweating about is the consistency of your efforts. I believe that if you can manage a consistent focused effort in the direction you want to go, eventually, you&rsquo;ll get the outcome you&rsquo;re looking for.</p>\n\n<p>Thoreau said it best:</p>\n\n<blockquote>If one advances confidently in the direction of his dreams, and endeavors to live the life which he has imagined, he will meet with a success unexpected in common hours.</blockquote>","outputFile":"/blog/expected-outcomes-handling-failure.html","html":"<p>Despite calculated actions and contingency plans it&rsquo;s amazing how often the outcome of our efforts differs from how we imagine it. We&rsquo;re by no means consistent, no matter what lengths we go to to produce consistent results.</p><p>That can be de-motivating for some, but on further exploration you realize it&rsquo;s not a big deal. In fact, if you stop to think about the number of contingencies involved in a given effort, it&rsquo;s amazing that we can produce any semblance of consistency.</p><p>Imagine a basketball player taking a shot during an NBA game. Even a super star like Kobe Bryant will miss his shot 56% of the time. Typically a 56% failing rate is nothing to get very excited about. If you fail more than half the times you try something that&rsquo;s anything but consistent.</p><p>What goes into those odds? How was Kobe being guarded, was he wide open, was he doing a layup or a 3 pointer, was he fresh off the bench, was he tired, did he have any nagging injuries, were his hands too sweaty, did he have a clear view of the hoop, was he squared up, did he get enough sleep the night before, did he eat his wheaties&hellip; you get my point.</p><p>If you think about it there are always going to be lots contingencies that affect the consistency of the outcomes. The only think worth sweating about is the consistency of your efforts. I believe that if you can manage a consistent focused effort in the direction you want to go, eventually, you&rsquo;ll get the outcome you&rsquo;re looking for.</p><p>Thoreau said it best:</p><blockquote>If one advances confidently in the direction of his dreams, and endeavors to live the life which he has imagined, he will meet with a success unexpected in common hours.</blockquote>","preview":"<p>Despite calculated actions and contingency plans it&rsquo;s amazing how often the outcome of our efforts differs from how we imagine it. We&rsquo;re by no means consistent, no matter what lengths we go to to produce consistent results.</p><p>That can be de-motivating for some, but on further exploration you realize it&rsquo;s not a big deal. In fact, if you stop to think about the number of contingencies involved in a given effort, it&rsquo;s amazing that we can produce any semblance of consistency.</p>"},{"slug":"your-online-reputation","type":"text","date":"2007-12-18T08:00:00.000Z","title":"Your Online Reputation","old_url":"http://joreteg.com/post/98735857/your-online-reputation","url":"/blog/your-online-reputation","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/12/your-online-reputation.html","markdown":"<p>If someone &ldquo;Googles&rdquo; your name what will they learn about you? And&hellip;do you have any control over what they see?</p>\n\n<p>You may have more control than you realize.</p>\n\n<p>When I Google &ldquo;Henrik Joreteg&rdquo; my professional profile on LinkedIn.com is the first search result. This includes all the professional details about me. It&rsquo;s a lot like posting your resume. There are also references and recommendations that add credibility to what is written in my profile and there are links to my business (HouseFLIX.com) and to this blog.</p>\n\n<p>This blog happens to be the second Google search result which will again, hopefully give a better view of who I am and serve to further increase my credibility.</p>\n\n<p>By publishing a blog and posting a profile on LinkedIn you can dramatically increase the quality and accuracy of information that is available about you on the Internet.</p>","outputFile":"/blog/your-online-reputation.html","html":"<p>If someone &ldquo;Googles&rdquo; your name what will they learn about you? And&hellip;do you have any control over what they see?</p><p>You may have more control than you realize.</p><p>When I Google &ldquo;Henrik Joreteg&rdquo; my professional profile on LinkedIn.com is the first search result. This includes all the professional details about me. It&rsquo;s a lot like posting your resume. There are also references and recommendations that add credibility to what is written in my profile and there are links to my business (HouseFLIX.com) and to this blog.</p><p>This blog happens to be the second Google search result which will again, hopefully give a better view of who I am and serve to further increase my credibility.</p><p>By publishing a blog and posting a profile on LinkedIn you can dramatically increase the quality and accuracy of information that is available about you on the Internet.</p>","preview":"<p>If someone &ldquo;Googles&rdquo; your name what will they learn about you? And&hellip;do you have any control over what they see?</p><p>You may have more control than you realize.</p><p>When I Google &ldquo;Henrik Joreteg&rdquo; my professional profile on LinkedIn.com is the first search result. This includes all the professional details about me. It&rsquo;s a lot like posting your resume. There are also references and recommendations that add credibility to what is written in my profile and there are links to my business (HouseFLIX.com) and to this blog.</p>"},{"slug":"sticky-ideas-lessons-learned-from-made-to-stick","type":"text","date":"2007-12-04T08:00:00.000Z","title":"Sticky Ideas, lessons learned from \"Made to Stick\"","old_url":"http://joreteg.com/post/98735206/sticky-ideas-lessons-learned-from-made-to-stick","url":"/blog/sticky-ideas-lessons-learned-from-made-to-stick","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/12/sticky-ideas-lessons-learned-from-made-to-stick.html","markdown":"<p>Why is it that some arguably worthless, incorrect, ideas such as urban legends spread like wild-fire while other far more intelligent and worthy ideas don&rsquo;t get anywhere.</p>\n\n<p>They&rsquo;re not <em>sticky!</em> Companies spend so much time trying to say things that are descriptive or include all the messages they want to broadcast, but they often fail to spend the time tweaking the presentation of the idea to make it interesting&hellip; to make it stick.</p>\n\n<p>That&rsquo;s what the book &ldquo;Made to Stick&rdquo;, by Chip Heath and Dan Heath is all about. It&rsquo;s about deconstructing what makes ideas sticky.</p>\n\n<p>The book gives the example of a man who worked for a non-profit group that educates the public about nutrition. His organization discovered that a typical medium sized bag of movie popcorn contains 37 grams of saturated fat. So what?!?!</p>\n\n<p>In reality 37 grams is a tremendously unhealthy amount to consume in one sitting.</p>\n\n<p>This man&rsquo;s job was to turn that statistic into a captivating story. The typical numeric explanation or graph would not have made much of a stir. The line he came up with was:</p>\n\n<p>&ldquo;A medium-sized &lsquo;butter&rsquo; popcorn at a typical neighborhood movie theater contains more artery-clogging fat than a bacon-and-eggs breakfast, a Big Mac and fries for lunch, and a steak dinner with all the trimmings - COMBINED!&rdquo;</p>\n\n<p>The story was a sensation! It made the front pages of USA Today, the LA Times, and The Washington Post&rsquo;s Style section. It was featured on all kinds of news casts and the end result was a noticeable drop in popcorn sales and ultimately several major theater chains changed the type of oil they used!</p>\n\n<p>The idea stuck! It&rsquo;s a fairly uninteresting stat, but it was crafted into a very &ldquo;sticky&rdquo; idea. That&rsquo;s the crux of effective marketing. Build a captivating idea, focus on how it needs to be presented, and take the time to make it &ldquo;sticky&rdquo;.</p>\n\n<p>The book concludes that sticky ideas generally need to have these characteristics:</p>\n\n<ol><li>Simplicity</li>\n<li>Unexpectedness</li>\n<li>Concreteness</li>\n<li>Credibility (real or implied)</li>\n<li>Emotions</li>\n<li>Stories</li>\n</ol><p>The authors expand on this significantly. But that&rsquo;s the gist of it. It&rsquo;s a compelling concept.</p>","outputFile":"/blog/sticky-ideas-lessons-learned-from-made-to-stick.html","html":"<p>Why is it that some arguably worthless, incorrect, ideas such as urban legends spread like wild-fire while other far more intelligent and worthy ideas don&rsquo;t get anywhere.</p><p>They&rsquo;re not <em>sticky!</em> Companies spend so much time trying to say things that are descriptive or include all the messages they want to broadcast, but they often fail to spend the time tweaking the presentation of the idea to make it interesting&hellip; to make it stick.</p><p>That&rsquo;s what the book &ldquo;Made to Stick&rdquo;, by Chip Heath and Dan Heath is all about. It&rsquo;s about deconstructing what makes ideas sticky.</p><p>The book gives the example of a man who worked for a non-profit group that educates the public about nutrition. His organization discovered that a typical medium sized bag of movie popcorn contains 37 grams of saturated fat. So what?!?!</p><p>In reality 37 grams is a tremendously unhealthy amount to consume in one sitting.</p><p>This man&rsquo;s job was to turn that statistic into a captivating story. The typical numeric explanation or graph would not have made much of a stir. The line he came up with was:</p><p>&ldquo;A medium-sized &lsquo;butter&rsquo; popcorn at a typical neighborhood movie theater contains more artery-clogging fat than a bacon-and-eggs breakfast, a Big Mac and fries for lunch, and a steak dinner with all the trimmings - COMBINED!&rdquo;</p><p>The story was a sensation! It made the front pages of USA Today, the LA Times, and The Washington Post&rsquo;s Style section. It was featured on all kinds of news casts and the end result was a noticeable drop in popcorn sales and ultimately several major theater chains changed the type of oil they used!</p><p>The idea stuck! It&rsquo;s a fairly uninteresting stat, but it was crafted into a very &ldquo;sticky&rdquo; idea. That&rsquo;s the crux of effective marketing. Build a captivating idea, focus on how it needs to be presented, and take the time to make it &ldquo;sticky&rdquo;.</p><p>The book concludes that sticky ideas generally need to have these characteristics:</p><p><ol><li>Simplicity</li></ol></p><p><li>Unexpectedness</li></p><p><li>Concreteness</li></p><p><li>Credibility (real or implied)</li></p><p><li>Emotions</li></p><p><li>Stories</li></p><p>The authors expand on this significantly. But that&rsquo;s the gist of it. It&rsquo;s a compelling concept.</p><p></p>","preview":"<p>Why is it that some arguably worthless, incorrect, ideas such as urban legends spread like wild-fire while other far more intelligent and worthy ideas don&rsquo;t get anywhere.</p><p>They&rsquo;re not <em>sticky!</em> Companies spend so much time trying to say things that are descriptive or include all the messages they want to broadcast, but they often fail to spend the time tweaking the presentation of the idea to make it interesting&hellip; to make it stick.</p>"},{"slug":"thoughts-on-machiavelli-the-prince","type":"text","date":"2007-10-25T07:00:00.000Z","title":"Thoughts on Machiavelli's \"The Prince\"","old_url":"http://joreteg.com/post/98734506/thoughts-on-machiavelli-the-prince","url":"/blog/thoughts-on-machiavelli-the-prince","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/10/thoughts-on-machiavelli-the-prince.html","markdown":"<p>I just finished reading &ldquo;The Prince&rdquo; by Niccolo Machiavelli. One of his more common themes is &ldquo;the end justifies the means.&rdquo; Seemingly, no matter what means necessary. So it&rsquo;s not very politically correct to say the least.</p>\n\n<p>I had heard lots of bits and pieces about him because his theories are often referenced in various news articles and business books. I was just curious what it was all about and it&rsquo;s a relatively short little book, so I figured I&rsquo;d read it.</p>\n\n<p>A few thoughts&hellip;</p>\n\n<p>The book is essentially a handbook for the head of a country, emperors, kings, or any other &ldquo;prince&rdquo; as he refers to them as.</p>\n\n<p>By handbook, I mean, handbook on the acquisition and use of power. The principles he defines  have practical application in almost any other situation dealing with power and authority. Some can be seen played out in our democratic politics and business structures of today. So it makes for an interesting read.</p>\n\n<p>Since this blog is about business, I&rsquo;ll try to keep my comments inline. How does any of this fit into business?</p>\n\n<p>He strongly discourages the use of mercenaries (foreign soldiers who are paid to fight in your army). Mercenaries seem great until they&rsquo;re truly tested. When the battle gets tough, their loyalties are with their own, not with their hired boss. Also, in the cases where they are successful in battle on your behalf, you are endebted to them and they may keep the conquered lands for themselves.</p>\n\n<p>This is akin to outsourcing in today&rsquo;s businesses. It&rsquo;s not fair interpret that to mean that all outsourcing is bad. However, in other ares of the book Machiavelli says that the primary occupation of a prince is &ldquo;war.&rdquo; So it makes sense to translate that to outsource your primary occupation or business function is not good. Businesses need to understand what their primary business is, and where their &ldquo;value-added&rdquo; happens. If that central function is outsourced, then they&rsquo;re just asking to eliminate themselves from the chain of power. Well, one could say for example that a company like Apple who outsources most of their manufacturing to China is breaking that rule. The assumption there is that they&rsquo;re a manufacturer&hellip; but they&rsquo;re NOT. Their primary business function is design. There are efficiencies to be gained from outsourcing. But, business have to clearly understand what business they&rsquo;re in, and be sure to keep that function &ldquo;in-house.&rdquo;</p>\n\n<p>Machiavelli understood the rallying power of setting out to accomplish great things. He mentions that in order to become an esteemed prince one should &ldquo;embark on great enterprises and give rare proofs of his ability.&rdquo; He understood the concept of people wanting to ally with people who are setting out to do something big. People love worthy causes and big projects where they feel they can contribute.</p>\n\n<p>Machiavelli also reaffirms my previous post about the power of surprise and the story-telling that occurs as a result. He says to &ldquo;resort to unusual and distinctive acts in civil matters&hellip; when someone does something extraordinarily good or bad in civic life, he should reward or punish him in a manner that will arouse considerable comment.&rdquo; Providing a story worth telling is a powerful way to disseminate information.</p>\n\n<p>One last point I want to mention is what he says about how the strength of a principality should be measured. To summarize, he says that a principality needs sufficient power and resources to stand on their own when the need arises, or whether they will always require the protection of others. This could be translated to business that they need adequate funding and resources to get through the tough times. For start-ups, this means having the resources necessary to get through the launch phase.</p>\n\n<p>Those are some lessons from Machiavelli that have practical application to businesses.</p>","outputFile":"/blog/thoughts-on-machiavelli-the-prince.html","html":"<p>I just finished reading &ldquo;The Prince&rdquo; by Niccolo Machiavelli. One of his more common themes is &ldquo;the end justifies the means.&rdquo; Seemingly, no matter what means necessary. So it&rsquo;s not very politically correct to say the least.</p><p>I had heard lots of bits and pieces about him because his theories are often referenced in various news articles and business books. I was just curious what it was all about and it&rsquo;s a relatively short little book, so I figured I&rsquo;d read it.</p><p>A few thoughts&hellip;</p><p>The book is essentially a handbook for the head of a country, emperors, kings, or any other &ldquo;prince&rdquo; as he refers to them as.</p><p>By handbook, I mean, handbook on the acquisition and use of power. The principles he defines have practical application in almost any other situation dealing with power and authority. Some can be seen played out in our democratic politics and business structures of today. So it makes for an interesting read.</p><p>Since this blog is about business, I&rsquo;ll try to keep my comments inline. How does any of this fit into business?</p><p>He strongly discourages the use of mercenaries (foreign soldiers who are paid to fight in your army). Mercenaries seem great until they&rsquo;re truly tested. When the battle gets tough, their loyalties are with their own, not with their hired boss. Also, in the cases where they are successful in battle on your behalf, you are endebted to them and they may keep the conquered lands for themselves.</p><p>This is akin to outsourcing in today&rsquo;s businesses. It&rsquo;s not fair interpret that to mean that all outsourcing is bad. However, in other ares of the book Machiavelli says that the primary occupation of a prince is &ldquo;war.&rdquo; So it makes sense to translate that to outsource your primary occupation or business function is not good. Businesses need to understand what their primary business is, and where their &ldquo;value-added&rdquo; happens. If that central function is outsourced, then they&rsquo;re just asking to eliminate themselves from the chain of power. Well, one could say for example that a company like Apple who outsources most of their manufacturing to China is breaking that rule. The assumption there is that they&rsquo;re a manufacturer&hellip; but they&rsquo;re NOT. Their primary business function is design. There are efficiencies to be gained from outsourcing. But, business have to clearly understand what business they&rsquo;re in, and be sure to keep that function &ldquo;in-house.&rdquo;</p><p>Machiavelli understood the rallying power of setting out to accomplish great things. He mentions that in order to become an esteemed prince one should &ldquo;embark on great enterprises and give rare proofs of his ability.&rdquo; He understood the concept of people wanting to ally with people who are setting out to do something big. People love worthy causes and big projects where they feel they can contribute.</p><p>Machiavelli also reaffirms my previous post about the power of surprise and the story-telling that occurs as a result. He says to &ldquo;resort to unusual and distinctive acts in civil matters&hellip; when someone does something extraordinarily good or bad in civic life, he should reward or punish him in a manner that will arouse considerable comment.&rdquo; Providing a story worth telling is a powerful way to disseminate information.</p><p>One last point I want to mention is what he says about how the strength of a principality should be measured. To summarize, he says that a principality needs sufficient power and resources to stand on their own when the need arises, or whether they will always require the protection of others. This could be translated to business that they need adequate funding and resources to get through the tough times. For start-ups, this means having the resources necessary to get through the launch phase.</p><p>Those are some lessons from Machiavelli that have practical application to businesses.</p>","preview":"<p>I just finished reading &ldquo;The Prince&rdquo; by Niccolo Machiavelli. One of his more common themes is &ldquo;the end justifies the means.&rdquo; Seemingly, no matter what means necessary. So it&rsquo;s not very politically correct to say the least.</p><p>I had heard lots of bits and pieces about him because his theories are often referenced in various news articles and business books. I was just curious what it was all about and it&rsquo;s a relatively short little book, so I figured I&rsquo;d read it.</p>"},{"slug":"finding-work-life-balance","type":"text","date":"2007-10-19T07:00:00.000Z","title":"Finding the Balance","old_url":"http://joreteg.com/post/98728689/finding-work-life-balance","url":"/blog/finding-work-life-balance","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/10/finding-work-life-balance.html","markdown":"<p>It&rsquo;s not simple. I have a tendency to overwork myself to the point where my work becomes ineffective. It is typically better for me to take a short break and start again thank to just keep pushing. If it were not for my awesome wife reminding me to stop&hellip;I&rsquo;d work from 7am to midnight every day.</p>\n\n<p>Sometimes you have to stop long enough to remember why you&rsquo;re working. It&rsquo;s great that I enjoy my work. But when my balance is off I become too one-dimensional. The interesting thing is that the imbalance ultimately hurts my business. Being too focused  mitigates my creativity, makes me far less personable, and severely limits my social life.</p>\n\n<p>If you look at that list you realize that each of those qualities are essential for operating a business:</p>\n\n<p><strong>Creativity -</strong> Essential for innovation.</p>\n\n<p><strong>Being Personable -</strong> Business is about personal connections.</p>\n\n<p><strong>Social Life -</strong> Meeting new people expands your vision and exposes you to people with talents and knowledge that could help you in your business life.</p>\n\n<p>I&rsquo;m not saying that you the only reason you take a break is to help your business. I just think it&rsquo;s cool that it ends up working that way.</p>\n\n<p>Without finding that balance, you&rsquo;ve got nothing worth working for.</p>","outputFile":"/blog/finding-work-life-balance.html","html":"<p>It&rsquo;s not simple. I have a tendency to overwork myself to the point where my work becomes ineffective. It is typically better for me to take a short break and start again thank to just keep pushing. If it were not for my awesome wife reminding me to stop&hellip;I&rsquo;d work from 7am to midnight every day.</p><p>Sometimes you have to stop long enough to remember why you&rsquo;re working. It&rsquo;s great that I enjoy my work. But when my balance is off I become too one-dimensional. The interesting thing is that the imbalance ultimately hurts my business. Being too focused mitigates my creativity, makes me far less personable, and severely limits my social life.</p><p>If you look at that list you realize that each of those qualities are essential for operating a business:</p><p><strong>Creativity -</strong> Essential for innovation.</p><p><strong>Being Personable -</strong> Business is about personal connections.</p><p><strong>Social Life -</strong> Meeting new people expands your vision and exposes you to people with talents and knowledge that could help you in your business life.</p><p>I&rsquo;m not saying that you the only reason you take a break is to help your business. I just think it&rsquo;s cool that it ends up working that way.</p><p>Without finding that balance, you&rsquo;ve got nothing worth working for.</p>","preview":"<p>It&rsquo;s not simple. I have a tendency to overwork myself to the point where my work becomes ineffective. It is typically better for me to take a short break and start again thank to just keep pushing. If it were not for my awesome wife reminding me to stop&hellip;I&rsquo;d work from 7am to midnight every day.</p>"},{"slug":"the-power-of-surprise","type":"text","date":"2007-10-17T07:00:00.000Z","title":"The Power of Surprise","old_url":"http://joreteg.com/post/98727981/the-power-of-surprise","url":"/blog/the-power-of-surprise","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/10/the-power-of-surprise.html","markdown":"<p>In his book &ldquo;The Starbucks Experience&rdquo; author Joseph A. Michelli talks about the power of the unexpected. It really hit me, because it&rsquo;s so blatantly obvious when you think about it.</p>\n\n<p>As a business owner, making good on your promises is a good place to start. But, if you really want to set yourself apart, venture into the realm of the unexpected.</p>\n\n<p>Popcorn, peanuts and molasses are not what made &ldquo;Cracker Jack&rdquo; a household name. It was the surprise!</p>\n\n<p>You see, nobody tells their friends about getting ordinary service. Because IT&rsquo;S BORING! You tell your friends about the stuff that <em>blindsides</em> you. The crazier it was the more people are gonna hear about it. Those are the items that make up conversation.</p>\n\n<p>Any brand conscious company wants word-of-mouth advertising because as consumers we are completely inundated with bogus, outrageous advertising claims. We need not look further than the junk mail we throw away every day. That&rsquo;s why a trusted friend&rsquo;s recommendation is more effective than a hundred TV ads.</p>\n\n<p>So, what&rsquo;s the secret to a successful &ldquo;word-of-mouth campaign&rdquo; (if there even is such a thing)? It&rsquo;s not rocket science, you <strong>purposely and consistently do things that are both unexpected and positive</strong>.</p>\n\n<p>The more outrageous, the better! You may have heard the story of the customer who successfully returned a car tire to Nordstroms, or they guy who took a hacksaw to his new Craftsman crescent wrench in the parking lot at Sears only to walk back in and exchange it for a brand new one without a word of complaint.</p>\n\n<p>See, these stories were so extraordinary that I&rsquo;m sitting here writing about them <em>years</em> after they happened.</p>\n\n<p>Surprise your customers and you&rsquo;ll give them something to talk about.</p>","outputFile":"/blog/the-power-of-surprise.html","html":"<p>In his book &ldquo;The Starbucks Experience&rdquo; author Joseph A. Michelli talks about the power of the unexpected. It really hit me, because it&rsquo;s so blatantly obvious when you think about it.</p><p>As a business owner, making good on your promises is a good place to start. But, if you really want to set yourself apart, venture into the realm of the unexpected.</p><p>Popcorn, peanuts and molasses are not what made &ldquo;Cracker Jack&rdquo; a household name. It was the surprise!</p><p>You see, nobody tells their friends about getting ordinary service. Because IT&rsquo;S BORING! You tell your friends about the stuff that <em>blindsides</em> you. The crazier it was the more people are gonna hear about it. Those are the items that make up conversation.</p><p>Any brand conscious company wants word-of-mouth advertising because as consumers we are completely inundated with bogus, outrageous advertising claims. We need not look further than the junk mail we throw away every day. That&rsquo;s why a trusted friend&rsquo;s recommendation is more effective than a hundred TV ads.</p><p>So, what&rsquo;s the secret to a successful &ldquo;word-of-mouth campaign&rdquo; (if there even is such a thing)? It&rsquo;s not rocket science, you <strong>purposely and consistently do things that are both unexpected and positive</strong>.</p><p>The more outrageous, the better! You may have heard the story of the customer who successfully returned a car tire to Nordstroms, or they guy who took a hacksaw to his new Craftsman crescent wrench in the parking lot at Sears only to walk back in and exchange it for a brand new one without a word of complaint.</p><p>See, these stories were so extraordinary that I&rsquo;m sitting here writing about them <em>years</em> after they happened.</p><p>Surprise your customers and you&rsquo;ll give them something to talk about.</p>","preview":"<p>In his book &ldquo;The Starbucks Experience&rdquo; author Joseph A. Michelli talks about the power of the unexpected. It really hit me, because it&rsquo;s so blatantly obvious when you think about it.</p><p>As a business owner, making good on your promises is a good place to start. But, if you really want to set yourself apart, venture into the realm of the unexpected.</p>"},{"slug":"stupidly-simple-tasks","type":"text","date":"2007-10-09T07:00:00.000Z","title":"Stupidly Simple Tasks","old_url":"http://joreteg.com/post/98726992/stupidly-simple-tasks","url":"/blog/stupidly-simple-tasks","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/10/stupidly-simple-tasks.html","markdown":"<p>David Allen, the energetic-screwball-genius behind &ldquo;Getting Things Done&rdquo; has one of the simplest approaches to accomplishing goals that&rsquo;s so simple, it borders on stupid.</p>\n\n<p>Imagine this, complex tasks, can be broken down into simple tasks.</p>\n\n<p>What does that mean? Well, let&rsquo;s say I want to learn how to speak French. If I were to put &ldquo;Learn French&rdquo; on my To-do list. It would never happen. In the middle of my hectic day I would look at that item and go&hellip; &ldquo;yeah right!&rdquo; and skip it.</p>\n\n<p>But, if I&rsquo;m really serious about wanting to learn French I should take the time to deconstruct the final goal into simple tasks. That processing is what allows me to fill my to-do list with doable, manageable, understandable tasks that ultimately lead me to my final goal.</p>\n\n<p>Only simplified tasks should make it onto your To-do list if you expect your list to be of any use to you. To-do items need a specific action, such as &ldquo;read and learn 10 new vocab words from <a href=\"http://www.learnfrench.com\">www.learnfrench.com</a>&rdquo;. Then, when you look at your to-do list, you don&rsquo;t have to process how you&rsquo;re going to go about learning French. You&rsquo;ll just perform the pre-planned actions necessary to reach your goal.</p>\n\n<p>Tasks, should be just that. Simple tasks, &ldquo;Learn French&rdquo; is not a task it&rsquo;s a goal. Goals have their place, but the To-do list is not it. If you make the mistake of putting goals on your to-do list odds are that you feel like an unproductive loser when months pass and you can&rsquo;t check them off.</p>\n\n<p>For your own sanity, sense of accomplishment, and happiness keep your task list stupidly simple. What do you do to make your to-do list more productive?</p>","outputFile":"/blog/stupidly-simple-tasks.html","html":"<p>David Allen, the energetic-screwball-genius behind &ldquo;Getting Things Done&rdquo; has one of the simplest approaches to accomplishing goals that&rsquo;s so simple, it borders on stupid.</p><p>Imagine this, complex tasks, can be broken down into simple tasks.</p><p>What does that mean? Well, let&rsquo;s say I want to learn how to speak French. If I were to put &ldquo;Learn French&rdquo; on my To-do list. It would never happen. In the middle of my hectic day I would look at that item and go&hellip; &ldquo;yeah right!&rdquo; and skip it.</p><p>But, if I&rsquo;m really serious about wanting to learn French I should take the time to deconstruct the final goal into simple tasks. That processing is what allows me to fill my to-do list with doable, manageable, understandable tasks that ultimately lead me to my final goal.</p><p>Only simplified tasks should make it onto your To-do list if you expect your list to be of any use to you. To-do items need a specific action, such as &ldquo;read and learn 10 new vocab words from <a href=http://www.learnfrench.com>www.learnfrench.com</a>&rdquo;. Then, when you look at your to-do list, you don&rsquo;t have to process how you&rsquo;re going to go about learning French. You&rsquo;ll just perform the pre-planned actions necessary to reach your goal.</p><p>Tasks, should be just that. Simple tasks, &ldquo;Learn French&rdquo; is not a task it&rsquo;s a goal. Goals have their place, but the To-do list is not it. If you make the mistake of putting goals on your to-do list odds are that you feel like an unproductive loser when months pass and you can&rsquo;t check them off.</p><p>For your own sanity, sense of accomplishment, and happiness keep your task list stupidly simple. What do you do to make your to-do list more productive?</p>","preview":"<p>David Allen, the energetic-screwball-genius behind &ldquo;Getting Things Done&rdquo; has one of the simplest approaches to accomplishing goals that&rsquo;s so simple, it borders on stupid.</p><p>Imagine this, complex tasks, can be broken down into simple tasks.</p><p>What does that mean? Well, let&rsquo;s say I want to learn how to speak French. If I were to put &ldquo;Learn French&rdquo; on my To-do list. It would never happen. In the middle of my hectic day I would look at that item and go&hellip; &ldquo;yeah right!&rdquo; and skip it.</p>"},{"slug":"making-choices-based-fear","type":"text","date":"2007-08-05T07:00:00.000Z","title":"Making Choices Based on Fear","old_url":"http://joreteg.com/post/98698315/making-choices-based-fear","url":"/blog/making-choices-based-fear","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/08/making-choices-based-fear.html","markdown":"<p>A trusted business adviser mentioned something interesting. So many people make life decisions out of fear. Fear of the unknown and fear of losing what they have (even if it&rsquo;s only mediocre). It would be interesting to see what would happen if people started making decisions based on what they want instead of simply avoiding what they don&rsquo;t want.</p>\n\n<p>I heard a twist on this from Stanford&rsquo;s entrepreneurial thought leaders podcast series. A venture capitalist was quoted as saying, that the single strongest determinant of success in new businesses is not the quality of the idea. It&rsquo;s the faith, and persistence of the entrepreneur. In fact he said &ldquo;I&rsquo;d rather fund an OK idea that the entrepreneur truly is sold on, than a great idea proposed with partial belief of the entrepreneur.&rdquo;</p>\n\n<p>The reasoning was simple. Even great ideas will hit major road blocks and the persistence and belief of the entrepreneur is what determines how that road block is handled&hellip; and often the survival of the business.</p>\n\n<p>I would imagine that one of the main differences that separates entrepreneurs\n from the masses. Making decisions based on what they want instead of fear is what gives them the strength and persistence necessary to push through the challenges.</p>","outputFile":"/blog/making-choices-based-fear.html","html":"<p>A trusted business adviser mentioned something interesting. So many people make life decisions out of fear. Fear of the unknown and fear of losing what they have (even if it&rsquo;s only mediocre). It would be interesting to see what would happen if people started making decisions based on what they want instead of simply avoiding what they don&rsquo;t want.</p><p>I heard a twist on this from Stanford&rsquo;s entrepreneurial thought leaders podcast series. A venture capitalist was quoted as saying, that the single strongest determinant of success in new businesses is not the quality of the idea. It&rsquo;s the faith, and persistence of the entrepreneur. In fact he said &ldquo;I&rsquo;d rather fund an OK idea that the entrepreneur truly is sold on, than a great idea proposed with partial belief of the entrepreneur.&rdquo;</p><p>The reasoning was simple. Even great ideas will hit major road blocks and the persistence and belief of the entrepreneur is what determines how that road block is handled&hellip; and often the survival of the business.</p><p>I would imagine that one of the main differences that separates entrepreneurs from the masses. Making decisions based on what they want instead of fear is what gives them the strength and persistence necessary to push through the challenges.</p>","preview":"<p>A trusted business adviser mentioned something interesting. So many people make life decisions out of fear. Fear of the unknown and fear of losing what they have (even if it&rsquo;s only mediocre). It would be interesting to see what would happen if people started making decisions based on what they want instead of simply avoiding what they don&rsquo;t want.</p>"},{"slug":"what-about-content-quality-on-the-internet","type":"text","date":"2007-07-30T07:00:00.000Z","title":"What About Content Quality?","old_url":"http://joreteg.com/post/98697752/what-about-content-quality-on-the-internet","url":"/blog/what-about-content-quality-on-the-internet","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/07/what-about-content-quality-on-the-internet.html","markdown":"<p>With the advent of mass self-publishing on the web, what will be done with all that useless content that is created? There&rsquo;s a beautiful freedom of speech aspect of self-publishing, but to be quite honest, there&rsquo;s a lot of relatively worthless content on the web.</p>\n\n<p>There&rsquo;s not a whole lot of content validation. I feel there are opportunities for entrepreneurs who can find ways to validate and qualify user-submitted information. Mozilla corporation, the makers of Firefox are a perfect example. Granted, they are not necessarily trying to make money. They say that they are motivated by the concept of an &lsquo;open web&rsquo;. But their model is unique in that the code and features of Firefox is all created by a huge network of programmers who are lending their talents to the cause. They have a system for qualifying and validating the content submitted and as a result they&rsquo;ve created one of the most popular browsers in the world.</p>\n\n<p>Rather than simply proliferating content for content&rsquo;s sake, those who find ways to do quality control and provide clear, useful information will, in my opinion have a good shot at success.</p>","outputFile":"/blog/what-about-content-quality-on-the-internet.html","html":"<p>With the advent of mass self-publishing on the web, what will be done with all that useless content that is created? There&rsquo;s a beautiful freedom of speech aspect of self-publishing, but to be quite honest, there&rsquo;s a lot of relatively worthless content on the web.</p><p>There&rsquo;s not a whole lot of content validation. I feel there are opportunities for entrepreneurs who can find ways to validate and qualify user-submitted information. Mozilla corporation, the makers of Firefox are a perfect example. Granted, they are not necessarily trying to make money. They say that they are motivated by the concept of an &lsquo;open web&rsquo;. But their model is unique in that the code and features of Firefox is all created by a huge network of programmers who are lending their talents to the cause. They have a system for qualifying and validating the content submitted and as a result they&rsquo;ve created one of the most popular browsers in the world.</p><p>Rather than simply proliferating content for content&rsquo;s sake, those who find ways to do quality control and provide clear, useful information will, in my opinion have a good shot at success.</p>","preview":"<p>With the advent of mass self-publishing on the web, what will be done with all that useless content that is created? There&rsquo;s a beautiful freedom of speech aspect of self-publishing, but to be quite honest, there&rsquo;s a lot of relatively worthless content on the web.</p><p>There&rsquo;s not a whole lot of content validation. I feel there are opportunities for entrepreneurs who can find ways to validate and qualify user-submitted information. Mozilla corporation, the makers of Firefox are a perfect example. Granted, they are not necessarily trying to make money. They say that they are motivated by the concept of an &lsquo;open web&rsquo;. But their model is unique in that the code and features of Firefox is all created by a huge network of programmers who are lending their talents to the cause. They have a system for qualifying and validating the content submitted and as a result they&rsquo;ve created one of the most popular browsers in the world.</p>"},{"slug":"the-big-wheel-momentun-and-your-business","type":"text","date":"2007-04-11T07:00:00.000Z","title":"The Big Wheel, Momentum and Your Business","old_url":"http://joreteg.com/post/98735023/the-big-wheel-momentun-and-your-business","url":"/blog/the-big-wheel-momentun-and-your-business","startingFilename":"/Users/henrikjoreteg/Sites/joreteg.com/posts/2007/04/the-big-wheel-momentun-and-your-business.html","markdown":"<p>Jim Collins, the author of &ldquo;Good to Great&rdquo; presents an analogy that I found to be extremely useful in explaining the phenomenon of extraordinary business growth.</p>\n\n<p>He says that there are not really all that many true overnight successes. The reason we view them that way is because when the publicly visible upswing occurs it can be very dramatic. But, if we study what caused the successes, which is exactly what Jim Collins did, we often find that there were months, if not years of preparation leading up to that &ldquo;overnight success&rdquo;.</p>\n\n<p>Collins explains it as a giant, heavy, wheel that is mounted on a center post. Imagine it like a big merry-go-round weighing many tons.</p>\n\n<p>Something heavy has a tremendous amount of inertia. It&rsquo;s impossible to spin it with a single hard push or even lots of individual pushes every now and then. More than anything else, consistent pushing is required to get it spinning.</p>\n\n<p>Getting the business model articulated may be one long push, then making the right partnerships is another one, getting the right technology working for you can be another one, getting a key clients may come next, getting a bit of external funding, increasing market awareness, refining product offerings&hellip; you get the idea. All these things are pushes. Together they can get the wheel started in the right direction. It may be slow, but you just have to keep pushing and pushing. Soon it may be spinning at 1 revolution per minute, then 2, then 5, then 20&hellip;</p>\n\n<p>Now, momentum is on your side. Steady pushing is still required, but each push now has greater impact and it starts to go&hellip; and go&hellip; and go. When it spins, and I mean really spins, it would take some really big set backs to even slow it down. You can then use smaller motors to keep pushing on your behalf. The whole goal is to just keep pushing. You just crank and crack.</p>\n\n<p>At that point, you may get the media to tune in, and they may be there to watch you go from 20 revolutions per minute to 1000 rpm. From their perspective it will all have happened very quickly, without all that much effort. Well, they don&rsquo;t know about the thousands of pushes the company made before the media started paying attention. It all started long before that with one single push followed by thousands of others.</p>\n\n<p>Seeing incredible results requires consistency more than anything else. I&rsquo;ve been pushing my company HouseFLIX for almost two years now and now we&rsquo;re finally seeing inertia working for us rather than against us. There&rsquo;s no way it would have even been spinning at all if I were the only one pushing. I&rsquo;ve got several committed people working to make it happen. Together we&rsquo;re seeing that big wheel turn.</p>","outputFile":"/blog/the-big-wheel-momentun-and-your-business.html","html":"<p>Jim Collins, the author of &ldquo;Good to Great&rdquo; presents an analogy that I found to be extremely useful in explaining the phenomenon of extraordinary business growth.</p><p>He says that there are not really all that many true overnight successes. The reason we view them that way is because when the publicly visible upswing occurs it can be very dramatic. But, if we study what caused the successes, which is exactly what Jim Collins did, we often find that there were months, if not years of preparation leading up to that &ldquo;overnight success&rdquo;.</p><p>Collins explains it as a giant, heavy, wheel that is mounted on a center post. Imagine it like a big merry-go-round weighing many tons.</p><p>Something heavy has a tremendous amount of inertia. It&rsquo;s impossible to spin it with a single hard push or even lots of individual pushes every now and then. More than anything else, consistent pushing is required to get it spinning.</p><p>Getting the business model articulated may be one long push, then making the right partnerships is another one, getting the right technology working for you can be another one, getting a key clients may come next, getting a bit of external funding, increasing market awareness, refining product offerings&hellip; you get the idea. All these things are pushes. Together they can get the wheel started in the right direction. It may be slow, but you just have to keep pushing and pushing. Soon it may be spinning at 1 revolution per minute, then 2, then 5, then 20&hellip;</p><p>Now, momentum is on your side. Steady pushing is still required, but each push now has greater impact and it starts to go&hellip; and go&hellip; and go. When it spins, and I mean really spins, it would take some really big set backs to even slow it down. You can then use smaller motors to keep pushing on your behalf. The whole goal is to just keep pushing. You just crank and crack.</p><p>At that point, you may get the media to tune in, and they may be there to watch you go from 20 revolutions per minute to 1000 rpm. From their perspective it will all have happened very quickly, without all that much effort. Well, they don&rsquo;t know about the thousands of pushes the company made before the media started paying attention. It all started long before that with one single push followed by thousands of others.</p><p>Seeing incredible results requires consistency more than anything else. I&rsquo;ve been pushing my company HouseFLIX for almost two years now and now we&rsquo;re finally seeing inertia working for us rather than against us. There&rsquo;s no way it would have even been spinning at all if I were the only one pushing. I&rsquo;ve got several committed people working to make it happen. Together we&rsquo;re seeing that big wheel turn.</p>","preview":"<p>Jim Collins, the author of &ldquo;Good to Great&rdquo; presents an analogy that I found to be extremely useful in explaining the phenomenon of extraordinary business growth.</p><p>He says that there are not really all that many true overnight successes. The reason we view them that way is because when the publicly visible upswing occurs it can be very dramatic. But, if we study what caused the successes, which is exactly what Jim Collins did, we often find that there were months, if not years of preparation leading up to that &ldquo;overnight success&rdquo;.</p>"}]}
